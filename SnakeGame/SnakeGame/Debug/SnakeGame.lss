
SnakeGame.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006a  00800100  000006b2  00000746  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006b2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000118  0080016a  0080016a  000007b0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007b0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  00000820  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011c9  00000000  00000000  00000940  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a0d  00000000  00000000  00001b09  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000092d  00000000  00000000  00002516  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000280  00000000  00000000  00002e44  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000058a  00000000  00000000  000030c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000910  00000000  00000000  0000364e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  00003f5e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 eb       	ldi	r30, 0xB2	; 178
  a0:	f6 e0       	ldi	r31, 0x06	; 6
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 36       	cpi	r26, 0x6A	; 106
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	22 e0       	ldi	r18, 0x02	; 2
  b4:	aa e6       	ldi	r26, 0x6A	; 106
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a2 38       	cpi	r26, 0x82	; 130
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	24 d2       	rcall	.+1096   	; 0x50c <main>
  c4:	f4 c2       	rjmp	.+1512   	; 0x6ae <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <time>:
  c8:	fc 01       	movw	r30, r24
  ca:	0f b6       	in	r0, 0x3f	; 63
  cc:	f8 94       	cli
  ce:	60 91 7e 02 	lds	r22, 0x027E	; 0x80027e <__system_time>
  d2:	70 91 7f 02 	lds	r23, 0x027F	; 0x80027f <__system_time+0x1>
  d6:	80 91 80 02 	lds	r24, 0x0280	; 0x800280 <__system_time+0x2>
  da:	90 91 81 02 	lds	r25, 0x0281	; 0x800281 <__system_time+0x3>
  de:	0f be       	out	0x3f, r0	; 63
  e0:	30 97       	sbiw	r30, 0x00	; 0
  e2:	21 f0       	breq	.+8      	; 0xec <time+0x24>
  e4:	60 83       	st	Z, r22
  e6:	71 83       	std	Z+1, r23	; 0x01
  e8:	82 83       	std	Z+2, r24	; 0x02
  ea:	93 83       	std	Z+3, r25	; 0x03
  ec:	08 95       	ret

000000ee <cs2High>:
}

void Screen1()
{
	cs1Low();
	cs2High();
  ee:	58 9a       	sbi	0x0b, 0	; 11
  f0:	08 95       	ret

000000f2 <cs2Low>:
  f2:	58 98       	cbi	0x0b, 0	; 11
  f4:	08 95       	ret

000000f6 <cs1High>:
  f6:	59 9a       	sbi	0x0b, 1	; 11
  f8:	08 95       	ret

000000fa <ResetHigh>:
  fa:	5a 9a       	sbi	0x0b, 2	; 11
  fc:	08 95       	ret

000000fe <rwLow>:
  fe:	5b 98       	cbi	0x0b, 3	; 11
 100:	08 95       	ret

00000102 <rsHigh>:
 102:	5c 9a       	sbi	0x0b, 4	; 11
 104:	08 95       	ret

00000106 <rsLow>:
 106:	5c 98       	cbi	0x0b, 4	; 11
 108:	08 95       	ret

0000010a <eHigh>:
 10a:	5d 9a       	sbi	0x0b, 5	; 11
 10c:	08 95       	ret

0000010e <eLow>:
 10e:	5d 98       	cbi	0x0b, 5	; 11
 110:	08 95       	ret

00000112 <WriteData>:
 112:	fd df       	rcall	.-6      	; 0x10e <eLow>
 114:	fa cf       	rjmp	.-12     	; 0x10a <eHigh>
 116:	08 95       	ret

00000118 <StartDisplay>:
 118:	8f e3       	ldi	r24, 0x3F	; 63
 11a:	85 b9       	out	0x05, r24	; 5
 11c:	f4 df       	rcall	.-24     	; 0x106 <rsLow>
 11e:	ef df       	rcall	.-34     	; 0xfe <rwLow>
 120:	ec df       	rcall	.-40     	; 0xfa <ResetHigh>
 122:	f3 df       	rcall	.-26     	; 0x10a <eHigh>
 124:	e8 df       	rcall	.-48     	; 0xf6 <cs1High>
 126:	e3 df       	rcall	.-58     	; 0xee <cs2High>
 128:	f4 cf       	rjmp	.-24     	; 0x112 <WriteData>
 12a:	08 95       	ret

0000012c <Screen2>:
}

void Screen2()
{
	cs1High();
 12c:	e4 df       	rcall	.-56     	; 0xf6 <cs1High>
	cs2Low();
 12e:	e1 cf       	rjmp	.-62     	; 0xf2 <cs2Low>
 130:	08 95       	ret

00000132 <SetPixel>:
 132:	cf 93       	push	r28
}

void SetPixel(char in)
{
 134:	c8 2f       	mov	r28, r24
	rsHigh();
 136:	e5 df       	rcall	.-54     	; 0x102 <rsHigh>
	rwLow();
 138:	e2 df       	rcall	.-60     	; 0xfe <rwLow>
	PORTB = in;
 13a:	c5 b9       	out	0x05, r28	; 5
	WriteData();
 13c:	ea df       	rcall	.-44     	; 0x112 <WriteData>
 13e:	cf 91       	pop	r28
}
 140:	08 95       	ret

00000142 <SetX>:
 142:	cf 93       	push	r28
		}
	}
}

void SetX(int x)
{
 144:	c8 2f       	mov	r28, r24
	rsLow();
 146:	df df       	rcall	.-66     	; 0x106 <rsLow>
	rwLow();
 148:	da df       	rcall	.-76     	; 0xfe <rwLow>
 14a:	c8 6b       	ori	r28, 0xB8	; 184
	PORTB = 0b10111000 | x;
 14c:	c5 b9       	out	0x05, r28	; 5
	WriteData();
 14e:	e1 df       	rcall	.-62     	; 0x112 <WriteData>
 150:	cf 91       	pop	r28
}
 152:	08 95       	ret

00000154 <SetY>:
 154:	cf 93       	push	r28

void SetY(int y)
{
 156:	c8 2f       	mov	r28, r24
	rwLow();
 158:	d2 df       	rcall	.-92     	; 0xfe <rwLow>
	rsLow();
 15a:	d5 df       	rcall	.-86     	; 0x106 <rsLow>
 15c:	c0 64       	ori	r28, 0x40	; 64
	PORTB = 0b01000000 | y;
 15e:	c5 b9       	out	0x05, r28	; 5
	WriteData();
 160:	d8 df       	rcall	.-80     	; 0x112 <WriteData>
 162:	cf 91       	pop	r28
}
 164:	08 95       	ret

00000166 <WipeScreen>:
 166:	0f 93       	push	r16
	PORTB = in;
	WriteData();
}

void WipeScreen()
{
 168:	1f 93       	push	r17
 16a:	cf 93       	push	r28
 16c:	df 93       	push	r29
	for (int i = 0; i < 8; i++)
 16e:	00 e0       	ldi	r16, 0x00	; 0
 170:	10 e0       	ldi	r17, 0x00	; 0
 172:	11 c0       	rjmp	.+34     	; 0x196 <WipeScreen+0x30>
	{
		for (int j = 0; j < 64; j++)
		{
			SetX(i);
 174:	c8 01       	movw	r24, r16
 176:	e5 df       	rcall	.-54     	; 0x142 <SetX>
			SetY(j);
 178:	ce 01       	movw	r24, r28
			rsHigh();
 17a:	ec df       	rcall	.-40     	; 0x154 <SetY>
			rwLow();
 17c:	c2 df       	rcall	.-124    	; 0x102 <rsHigh>
 17e:	bf df       	rcall	.-130    	; 0xfe <rwLow>
			
			PORTB = 0b00000000;
 180:	15 b8       	out	0x05, r1	; 5
			WriteData();
 182:	c7 df       	rcall	.-114    	; 0x112 <WriteData>
 184:	21 96       	adiw	r28, 0x01	; 1

void WipeScreen()
{
	for (int i = 0; i < 8; i++)
	{
		for (int j = 0; j < 64; j++)
 186:	c0 34       	cpi	r28, 0x40	; 64
 188:	d1 05       	cpc	r29, r1
 18a:	a1 f7       	brne	.-24     	; 0x174 <WipeScreen+0xe>
 18c:	0f 5f       	subi	r16, 0xFF	; 255
	WriteData();
}

void WipeScreen()
{
	for (int i = 0; i < 8; i++)
 18e:	1f 4f       	sbci	r17, 0xFF	; 255
 190:	08 30       	cpi	r16, 0x08	; 8
 192:	11 05       	cpc	r17, r1
 194:	19 f0       	breq	.+6      	; 0x19c <WipeScreen+0x36>
 196:	c0 e0       	ldi	r28, 0x00	; 0
	PORTB = in;
	WriteData();
}

void WipeScreen()
{
 198:	d0 e0       	ldi	r29, 0x00	; 0
 19a:	ec cf       	rjmp	.-40     	; 0x174 <WipeScreen+0xe>
 19c:	df 91       	pop	r29
			
			PORTB = 0b00000000;
			WriteData();
		}
	}
}
 19e:	cf 91       	pop	r28
 1a0:	1f 91       	pop	r17
 1a2:	0f 91       	pop	r16
 1a4:	08 95       	ret

000001a6 <SnakeInit>:
 1a6:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <posX>
{
	ttl++;
}

void IsInBound()
{
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <posY>
 1b0:	30 e0       	ldi	r19, 0x00	; 0
 1b2:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <ttl>
 1b6:	fc 01       	movw	r30, r24
 1b8:	e2 95       	swap	r30
 1ba:	f2 95       	swap	r31
 1bc:	f0 7f       	andi	r31, 0xF0	; 240
 1be:	fe 27       	eor	r31, r30
 1c0:	e0 7f       	andi	r30, 0xF0	; 240
 1c2:	fe 27       	eor	r31, r30
 1c4:	e4 58       	subi	r30, 0x84	; 132
 1c6:	fe 4f       	sbci	r31, 0xFE	; 254
 1c8:	e2 0f       	add	r30, r18
 1ca:	f3 1f       	adc	r31, r19
 1cc:	40 83       	st	Z, r20
 1ce:	fc 01       	movw	r30, r24
 1d0:	e2 95       	swap	r30
 1d2:	f2 95       	swap	r31
 1d4:	f0 7f       	andi	r31, 0xF0	; 240
 1d6:	fe 27       	eor	r31, r30
 1d8:	e0 7f       	andi	r30, 0xF0	; 240
 1da:	fe 27       	eor	r31, r30
 1dc:	e4 59       	subi	r30, 0x94	; 148
 1de:	fe 4f       	sbci	r31, 0xFE	; 254
 1e0:	e2 0f       	add	r30, r18
 1e2:	f3 1f       	adc	r31, r19
 1e4:	5f ef       	ldi	r21, 0xFF	; 255
 1e6:	54 0f       	add	r21, r20
 1e8:	50 83       	st	Z, r21
 1ea:	82 95       	swap	r24
 1ec:	92 95       	swap	r25
 1ee:	90 7f       	andi	r25, 0xF0	; 240
 1f0:	98 27       	eor	r25, r24
 1f2:	80 7f       	andi	r24, 0xF0	; 240
 1f4:	98 27       	eor	r25, r24
 1f6:	84 5a       	subi	r24, 0xA4	; 164
 1f8:	9e 4f       	sbci	r25, 0xFE	; 254
 1fa:	fc 01       	movw	r30, r24
 1fc:	e2 0f       	add	r30, r18
 1fe:	f3 1f       	adc	r31, r19
 200:	42 50       	subi	r20, 0x02	; 2
 202:	40 83       	st	Z, r20
 204:	08 95       	ret

00000206 <AddFood>:
	
}

void AddFood()
{
 206:	cf 93       	push	r28
 208:	df 93       	push	r29
	game[rand() % 16][rand() % 16] = 241;
 20a:	e6 d1       	rcall	.+972    	; 0x5d8 <rand>
 20c:	ec 01       	movw	r28, r24
 20e:	e4 d1       	rcall	.+968    	; 0x5d8 <rand>
 210:	9e 01       	movw	r18, r28
 212:	2f 70       	andi	r18, 0x0F	; 15
 214:	30 78       	andi	r19, 0x80	; 128
 216:	33 23       	and	r19, r19
 218:	34 f4       	brge	.+12     	; 0x226 <AddFood+0x20>
 21a:	21 50       	subi	r18, 0x01	; 1
 21c:	31 09       	sbc	r19, r1
 21e:	20 6f       	ori	r18, 0xF0	; 240
 220:	3f 6f       	ori	r19, 0xFF	; 255
 222:	2f 5f       	subi	r18, 0xFF	; 255
 224:	3f 4f       	sbci	r19, 0xFF	; 255
 226:	8f 70       	andi	r24, 0x0F	; 15
 228:	90 78       	andi	r25, 0x80	; 128
 22a:	99 23       	and	r25, r25
 22c:	24 f4       	brge	.+8      	; 0x236 <AddFood+0x30>
 22e:	01 97       	sbiw	r24, 0x01	; 1
 230:	80 6f       	ori	r24, 0xF0	; 240
 232:	9f 6f       	ori	r25, 0xFF	; 255
 234:	01 96       	adiw	r24, 0x01	; 1
 236:	22 95       	swap	r18
 238:	32 95       	swap	r19
 23a:	30 7f       	andi	r19, 0xF0	; 240
 23c:	32 27       	eor	r19, r18
 23e:	20 7f       	andi	r18, 0xF0	; 240
 240:	32 27       	eor	r19, r18
 242:	24 58       	subi	r18, 0x84	; 132
 244:	3e 4f       	sbci	r19, 0xFE	; 254
 246:	f9 01       	movw	r30, r18
 248:	e8 0f       	add	r30, r24
 24a:	f9 1f       	adc	r31, r25
 24c:	81 ef       	ldi	r24, 0xF1	; 241
 24e:	80 83       	st	Z, r24
}
 250:	df 91       	pop	r29
 252:	cf 91       	pop	r28
 254:	08 95       	ret

00000256 <Update>:

void Update()
{
 256:	cf 93       	push	r28
 258:	df 93       	push	r29
	switch (rotation)
 25a:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <__data_end>
 25e:	81 30       	cpi	r24, 0x01	; 1
 260:	61 f0       	breq	.+24     	; 0x27a <Update+0x24>
 262:	28 f0       	brcs	.+10     	; 0x26e <Update+0x18>
 264:	82 30       	cpi	r24, 0x02	; 2
 266:	79 f0       	breq	.+30     	; 0x286 <Update+0x30>
 268:	83 30       	cpi	r24, 0x03	; 3
 26a:	99 f0       	breq	.+38     	; 0x292 <Update+0x3c>
 26c:	18 c0       	rjmp	.+48     	; 0x29e <Update+0x48>
	{
		case 0:
			x = 1;
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <x>
			y = 0;
 274:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <y>
		break;
 278:	17 c0       	rjmp	.+46     	; 0x2a8 <Update+0x52>
		case 1:
			x = 0;
 27a:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <x>
			y = 1;
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <y>
		break;
 284:	11 c0       	rjmp	.+34     	; 0x2a8 <Update+0x52>
		case 2:
			x = -1;
 286:	8f ef       	ldi	r24, 0xFF	; 255
 288:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <x>
			y = 0;
 28c:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <y>
		break;
 290:	0b c0       	rjmp	.+22     	; 0x2a8 <Update+0x52>
		case 3:
			x = 0;
 292:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <x>
			y = -1;
 296:	8f ef       	ldi	r24, 0xFF	; 255
 298:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <y>
		break;
 29c:	05 c0       	rjmp	.+10     	; 0x2a8 <Update+0x52>
		default:
			x = 1;
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <x>
			y = 0;
 2a4:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <y>
		break;
	}
	
	lastPosX = posX;
 2a8:	c0 91 07 01 	lds	r28, 0x0107	; 0x800107 <posX>
 2ac:	c0 93 7d 02 	sts	0x027D, r28	; 0x80027d <lastPosX>
	lastPosY = posY;
 2b0:	50 91 06 01 	lds	r21, 0x0106	; 0x800106 <posY>
 2b4:	50 93 7c 02 	sts	0x027C, r21	; 0x80027c <lastPosY>
	posX += x;
 2b8:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <x>
 2bc:	ac 0f       	add	r26, r28
 2be:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <posX>
	posY += y;
 2c2:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <y>
 2c6:	85 0f       	add	r24, r21
 2c8:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <posY>
			if (game[x][y] > 0 && game[x][y] <= 240)
			{
				game[x][y]--;
			}
			
			game[lastPosX][lastPosY] = ttl;
 2cc:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <ttl>
			game[posX][posY] = 250 + rotation;
 2d0:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <__data_end>
 2d4:	96 50       	subi	r25, 0x06	; 6
 2d6:	2c e8       	ldi	r18, 0x8C	; 140
 2d8:	31 e0       	ldi	r19, 0x01	; 1
 2da:	6c e8       	ldi	r22, 0x8C	; 140
 2dc:	72 e0       	ldi	r23, 0x02	; 2
			if (game[x][y] > 0 && game[x][y] <= 240)
			{
				game[x][y]--;
			}
			
			game[lastPosX][lastPosY] = ttl;
 2de:	e0 e1       	ldi	r30, 0x10	; 16
 2e0:	ce 9f       	mul	r28, r30
 2e2:	e0 01       	movw	r28, r0
 2e4:	11 24       	eor	r1, r1
 2e6:	c4 58       	subi	r28, 0x84	; 132
 2e8:	de 4f       	sbci	r29, 0xFE	; 254
 2ea:	c5 0f       	add	r28, r21
 2ec:	d1 1d       	adc	r29, r1
			game[posX][posY] = 250 + rotation;
 2ee:	50 e1       	ldi	r21, 0x10	; 16
 2f0:	a5 9f       	mul	r26, r21
 2f2:	d0 01       	movw	r26, r0
 2f4:	11 24       	eor	r1, r1
 2f6:	a4 58       	subi	r26, 0x84	; 132
 2f8:	be 4f       	sbci	r27, 0xFE	; 254
 2fa:	a8 0f       	add	r26, r24
 2fc:	b1 1d       	adc	r27, r1
 2fe:	10 c0       	rjmp	.+32     	; 0x320 <Update+0xca>
	for (int x = 0; x < 16; x++)
	{
		for (int y = 0; y < 16; y++)
		{
			//game[x][y] = BodyParts[x][y];
			if (game[x][y] > 0 && game[x][y] <= 240)
 300:	80 81       	ld	r24, Z
 302:	81 50       	subi	r24, 0x01	; 1
 304:	80 3f       	cpi	r24, 0xF0	; 240
 306:	08 f4       	brcc	.+2      	; 0x30a <Update+0xb4>
			{
				game[x][y]--;
 308:	80 83       	st	Z, r24
			}
			
			game[lastPosX][lastPosY] = ttl;
 30a:	48 83       	st	Y, r20
			game[posX][posY] = 250 + rotation;
 30c:	9c 93       	st	X, r25
 30e:	31 96       	adiw	r30, 0x01	; 1
	posX += x;
	posY += y;
	
	for (int x = 0; x < 16; x++)
	{
		for (int y = 0; y < 16; y++)
 310:	e2 17       	cp	r30, r18
 312:	f3 07       	cpc	r31, r19
 314:	a9 f7       	brne	.-22     	; 0x300 <Update+0xaa>
 316:	20 5f       	subi	r18, 0xF0	; 240
 318:	3f 4f       	sbci	r19, 0xFF	; 255
	lastPosX = posX;
	lastPosY = posY;
	posX += x;
	posY += y;
	
	for (int x = 0; x < 16; x++)
 31a:	26 17       	cp	r18, r22
 31c:	37 07       	cpc	r19, r23
 31e:	19 f0       	breq	.+6      	; 0x326 <Update+0xd0>
 320:	f9 01       	movw	r30, r18
 322:	70 97       	sbiw	r30, 0x10	; 16
 324:	ed cf       	rjmp	.-38     	; 0x300 <Update+0xaa>
			game[lastPosX][lastPosY] = ttl;
			game[posX][posY] = 250 + rotation;
			
		}
	}
}
 326:	df 91       	pop	r29
 328:	cf 91       	pop	r28
 32a:	08 95       	ret

0000032c <Init>:
	}
}

void Init()
{
	DDRA |= 0b11111111;
 32c:	81 b1       	in	r24, 0x01	; 1
 32e:	8f ef       	ldi	r24, 0xFF	; 255
 330:	81 b9       	out	0x01, r24	; 1
	DDRB |= 0b11111111;
 332:	94 b1       	in	r25, 0x04	; 4
 334:	84 b9       	out	0x04, r24	; 4
	DDRD |= 0b11111111;
 336:	9a b1       	in	r25, 0x0a	; 10
 338:	8a b9       	out	0x0a, r24	; 10
	
	PORTD |= 0b10000000;
 33a:	5f 9a       	sbi	0x0b, 7	; 11
	
	srand(time(827345));
 33c:	61 ed       	ldi	r22, 0xD1	; 209
 33e:	7f e9       	ldi	r23, 0x9F	; 159
 340:	8c e0       	ldi	r24, 0x0C	; 12
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	c1 de       	rcall	.-638    	; 0xc8 <time>
 346:	4b c1       	rjmp	.+662    	; 0x5de <srand>
 348:	08 95       	ret

0000034a <ReadPix>:
}

char ReadPix(char id, char row){
	char out = 0;
	if (id == 0)
 34a:	81 11       	cpse	r24, r1
 34c:	11 c0       	rjmp	.+34     	; 0x370 <ReadPix+0x26>
 34e:	70 e0       	ldi	r23, 0x00	; 0
 350:	66 0f       	add	r22, r22
 352:	77 1f       	adc	r23, r23
 354:	66 0f       	add	r22, r22
 356:	77 1f       	adc	r23, r23
 358:	fb 01       	movw	r30, r22
 35a:	e0 59       	subi	r30, 0x90	; 144
 35c:	fe 4f       	sbci	r31, 0xFE	; 254
 35e:	64 59       	subi	r22, 0x94	; 148
 360:	7e 4f       	sbci	r23, 0xFE	; 254
	{
		for (int i = 3; i >= 0; i--)
		{
			out = out << 1;
 362:	88 0f       	add	r24, r24
			out += blank[row][i];
 364:	92 91       	ld	r25, -Z
 366:	89 0f       	add	r24, r25

char ReadPix(char id, char row){
	char out = 0;
	if (id == 0)
	{
		for (int i = 3; i >= 0; i--)
 368:	6e 17       	cp	r22, r30
 36a:	7f 07       	cpc	r23, r31
 36c:	d1 f7       	brne	.-12     	; 0x362 <ReadPix+0x18>
 36e:	08 95       	ret
			out = out << 1;
			out += blank[row][i];
			
		}
	}
	else if (id >= 1 && id <= 240)
 370:	9f ef       	ldi	r25, 0xFF	; 255
 372:	98 0f       	add	r25, r24
 374:	90 3f       	cpi	r25, 0xF0	; 240
 376:	90 f4       	brcc	.+36     	; 0x39c <ReadPix+0x52>
 378:	70 e0       	ldi	r23, 0x00	; 0
 37a:	66 0f       	add	r22, r22
 37c:	77 1f       	adc	r23, r23
 37e:	66 0f       	add	r22, r22
 380:	77 1f       	adc	r23, r23
 382:	fb 01       	movw	r30, r22
 384:	e3 5e       	subi	r30, 0xE3	; 227
 386:	fe 4f       	sbci	r31, 0xFE	; 254
 388:	67 5e       	subi	r22, 0xE7	; 231
 38a:	7e 4f       	sbci	r23, 0xFE	; 254
 38c:	80 e0       	ldi	r24, 0x00	; 0
	{
		for(int i = 3; i >= 0; i--)
		{
			out = out << 1;
 38e:	88 0f       	add	r24, r24
			out += fill[row][i];
 390:	92 91       	ld	r25, -Z
 392:	89 0f       	add	r24, r25
			
		}
	}
	else if (id >= 1 && id <= 240)
	{
		for(int i = 3; i >= 0; i--)
 394:	e6 17       	cp	r30, r22
 396:	f7 07       	cpc	r31, r23
 398:	d1 f7       	brne	.-12     	; 0x38e <ReadPix+0x44>
 39a:	08 95       	ret
		{
			out = out << 1;
			out += fill[row][i];
		}
	}
	else if (id == 241)
 39c:	81 3f       	cpi	r24, 0xF1	; 241
 39e:	91 f4       	brne	.+36     	; 0x3c4 <ReadPix+0x7a>
 3a0:	70 e0       	ldi	r23, 0x00	; 0
 3a2:	66 0f       	add	r22, r22
 3a4:	77 1f       	adc	r23, r23
 3a6:	66 0f       	add	r22, r22
 3a8:	77 1f       	adc	r23, r23
 3aa:	fb 01       	movw	r30, r22
 3ac:	e3 5f       	subi	r30, 0xF3	; 243
 3ae:	fe 4f       	sbci	r31, 0xFE	; 254
 3b0:	67 5f       	subi	r22, 0xF7	; 247
 3b2:	7e 4f       	sbci	r23, 0xFE	; 254
 3b4:	80 e0       	ldi	r24, 0x00	; 0
	{
		for(int i = 3; i >= 0; i--)
		{
			out = out << 1;
 3b6:	88 0f       	add	r24, r24
			out += food[row][i];
 3b8:	92 91       	ld	r25, -Z
 3ba:	89 0f       	add	r24, r25
			out += fill[row][i];
		}
	}
	else if (id == 241)
	{
		for(int i = 3; i >= 0; i--)
 3bc:	e6 17       	cp	r30, r22
 3be:	f7 07       	cpc	r31, r23
 3c0:	d1 f7       	brne	.-12     	; 0x3b6 <ReadPix+0x6c>
 3c2:	08 95       	ret
		{
			out = out << 1;
			out += food[row][i];
		}
	}
	else if (id == (250 + 0))
 3c4:	8a 3f       	cpi	r24, 0xFA	; 250
 3c6:	99 f4       	brne	.+38     	; 0x3ee <ReadPix+0xa4>
 3c8:	26 2f       	mov	r18, r22
 3ca:	30 e0       	ldi	r19, 0x00	; 0
 3cc:	22 0f       	add	r18, r18
 3ce:	33 1f       	adc	r19, r19
 3d0:	22 0f       	add	r18, r18
 3d2:	33 1f       	adc	r19, r19
 3d4:	f9 01       	movw	r30, r18
 3d6:	e3 5c       	subi	r30, 0xC3	; 195
 3d8:	fe 4f       	sbci	r31, 0xFE	; 254
 3da:	27 5c       	subi	r18, 0xC7	; 199
 3dc:	3e 4f       	sbci	r19, 0xFE	; 254
 3de:	80 e0       	ldi	r24, 0x00	; 0
	{
		for(int i = 3; i >= 0; i--)
		{
			out = out << 1;
 3e0:	88 0f       	add	r24, r24
			out += headEast[row][i];
 3e2:	92 91       	ld	r25, -Z
 3e4:	89 0f       	add	r24, r25
			out += food[row][i];
		}
	}
	else if (id == (250 + 0))
	{
		for(int i = 3; i >= 0; i--)
 3e6:	e2 17       	cp	r30, r18
 3e8:	f3 07       	cpc	r31, r19
 3ea:	d1 f7       	brne	.-12     	; 0x3e0 <ReadPix+0x96>
 3ec:	08 95       	ret
		{
			out = out << 1;
			out += headEast[row][i];
		}
	}
	else if (id == (250 + 3))
 3ee:	8d 3f       	cpi	r24, 0xFD	; 253
 3f0:	99 f4       	brne	.+38     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 3f2:	26 2f       	mov	r18, r22
 3f4:	30 e0       	ldi	r19, 0x00	; 0
 3f6:	22 0f       	add	r18, r18
 3f8:	33 1f       	adc	r19, r19
 3fa:	22 0f       	add	r18, r18
 3fc:	33 1f       	adc	r19, r19
 3fe:	f9 01       	movw	r30, r18
 400:	e3 5a       	subi	r30, 0xA3	; 163
 402:	fe 4f       	sbci	r31, 0xFE	; 254
 404:	27 5a       	subi	r18, 0xA7	; 167
 406:	3e 4f       	sbci	r19, 0xFE	; 254
 408:	80 e0       	ldi	r24, 0x00	; 0
	{
		for(int i = 3; i >= 0; i--)
		{
			out = out << 1;
 40a:	88 0f       	add	r24, r24
			out += headNorth[row][i];
 40c:	92 91       	ld	r25, -Z
 40e:	89 0f       	add	r24, r25
			out += headEast[row][i];
		}
	}
	else if (id == (250 + 3))
	{
		for(int i = 3; i >= 0; i--)
 410:	e2 17       	cp	r30, r18
 412:	f3 07       	cpc	r31, r19
 414:	d1 f7       	brne	.-12     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 416:	08 95       	ret
		{
			out = out << 1;
			out += headNorth[row][i];
		}
	}
	else if (id == (250 + 2))
 418:	8c 3f       	cpi	r24, 0xFC	; 252
 41a:	99 f4       	brne	.+38     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 41c:	26 2f       	mov	r18, r22
 41e:	30 e0       	ldi	r19, 0x00	; 0
 420:	22 0f       	add	r18, r18
 422:	33 1f       	adc	r19, r19
 424:	22 0f       	add	r18, r18
 426:	33 1f       	adc	r19, r19
 428:	f9 01       	movw	r30, r18
 42a:	e3 5d       	subi	r30, 0xD3	; 211
 42c:	fe 4f       	sbci	r31, 0xFE	; 254
 42e:	27 5d       	subi	r18, 0xD7	; 215
 430:	3e 4f       	sbci	r19, 0xFE	; 254
 432:	80 e0       	ldi	r24, 0x00	; 0
	{
		for(int i = 3; i >= 0; i--)
		{
			out = out << 1;
 434:	88 0f       	add	r24, r24
			out += headWest[row][i];
 436:	92 91       	ld	r25, -Z
 438:	89 0f       	add	r24, r25
			out += headNorth[row][i];
		}
	}
	else if (id == (250 + 2))
	{
		for(int i = 3; i >= 0; i--)
 43a:	e2 17       	cp	r30, r18
 43c:	f3 07       	cpc	r31, r19
 43e:	d1 f7       	brne	.-12     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 440:	08 95       	ret
		{
			out = out << 1;
			out += headWest[row][i];
		}
	}
	else if (id == (250 + 1))
 442:	8b 3f       	cpi	r24, 0xFB	; 251
 444:	99 f4       	brne	.+38     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
 446:	26 2f       	mov	r18, r22
 448:	30 e0       	ldi	r19, 0x00	; 0
 44a:	22 0f       	add	r18, r18
 44c:	33 1f       	adc	r19, r19
 44e:	22 0f       	add	r18, r18
 450:	33 1f       	adc	r19, r19
 452:	f9 01       	movw	r30, r18
 454:	e3 5b       	subi	r30, 0xB3	; 179
 456:	fe 4f       	sbci	r31, 0xFE	; 254
 458:	27 5b       	subi	r18, 0xB7	; 183
 45a:	3e 4f       	sbci	r19, 0xFE	; 254
 45c:	80 e0       	ldi	r24, 0x00	; 0
	{
		for(int i = 3; i >= 0; i--)
		{
			out = out << 1;
 45e:	88 0f       	add	r24, r24
			out += headSouth[row][i];
 460:	92 91       	ld	r25, -Z
 462:	89 0f       	add	r24, r25
			out += headWest[row][i];
		}
	}
	else if (id == (250 + 1))
	{
		for(int i = 3; i >= 0; i--)
 464:	e2 17       	cp	r30, r18
 466:	f3 07       	cpc	r31, r19
 468:	d1 f7       	brne	.-12     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 46a:	08 95       	ret
	
	srand(time(827345));
}

char ReadPix(char id, char row){
	char out = 0;
 46c:	80 e0       	ldi	r24, 0x00	; 0
		
		}
	}
	
	return out;
 46e:	08 95       	ret

00000470 <Draw>:
		}
	}
}

void Draw()
{
 470:	af 92       	push	r10
 472:	bf 92       	push	r11
 474:	cf 92       	push	r12
 476:	df 92       	push	r13
 478:	ef 92       	push	r14
 47a:	ff 92       	push	r15
 47c:	0f 93       	push	r16
 47e:	1f 93       	push	r17
 480:	cf 93       	push	r28
 482:	df 93       	push	r29
	Screen2();
 484:	53 de       	rcall	.-858    	; 0x12c <Screen2>
 486:	0f 2e       	mov	r0, r31
 488:	fc e8       	ldi	r31, 0x8C	; 140
 48a:	cf 2e       	mov	r12, r31
 48c:	f1 e0       	ldi	r31, 0x01	; 1
 48e:	df 2e       	mov	r13, r31
 490:	f0 2d       	mov	r31, r0
 492:	a1 2c       	mov	r10, r1
 494:	b1 2c       	mov	r11, r1
	
	for (char x = 0; x < 8; x++)
	{
		SetX(x);
 496:	c5 01       	movw	r24, r10
 498:	54 de       	rcall	.-856    	; 0x142 <SetX>
		SetY(0);
 49a:	80 e0       	ldi	r24, 0x00	; 0
 49c:	90 e0       	ldi	r25, 0x00	; 0
 49e:	5a de       	rcall	.-844    	; 0x154 <SetY>
 4a0:	86 01       	movw	r16, r12
 4a2:	00 51       	subi	r16, 0x10	; 16
 4a4:	11 09       	sbc	r17, r1
 4a6:	76 01       	movw	r14, r12
 4a8:	1a c0       	rjmp	.+52     	; 0x4de <Draw+0x6e>
		for (char y = 0; y < 16; y++)
		{
			for (char i = 0; i < 4; i++)
			{
				char toWrite = ReadPix(game[x * 2][y], i);
 4aa:	6c 2f       	mov	r22, r28
 4ac:	f8 01       	movw	r30, r16
 4ae:	80 81       	ld	r24, Z
 4b0:	4c df       	rcall	.-360    	; 0x34a <ReadPix>
 4b2:	d8 2f       	mov	r29, r24
				char add = ReadPix(game[(x * 2) + 1][y], i) << 4;
 4b4:	6c 2f       	mov	r22, r28
 4b6:	f7 01       	movw	r30, r14
 4b8:	80 81       	ld	r24, Z
 4ba:	47 df       	rcall	.-370    	; 0x34a <ReadPix>
 4bc:	f0 e1       	ldi	r31, 0x10	; 16
				toWrite += add;
				
				SetPixel(toWrite);
 4be:	8f 9f       	mul	r24, r31
 4c0:	d0 0d       	add	r29, r0
 4c2:	11 24       	eor	r1, r1
 4c4:	8d 2f       	mov	r24, r29
 4c6:	35 de       	rcall	.-918    	; 0x132 <SetPixel>
 4c8:	cf 5f       	subi	r28, 0xFF	; 255
	{
		SetX(x);
		SetY(0);
		for (char y = 0; y < 16; y++)
		{
			for (char i = 0; i < 4; i++)
 4ca:	c4 30       	cpi	r28, 0x04	; 4
 4cc:	71 f7       	brne	.-36     	; 0x4aa <Draw+0x3a>
 4ce:	0f 5f       	subi	r16, 0xFF	; 255
 4d0:	1f 4f       	sbci	r17, 0xFF	; 255
 4d2:	8f ef       	ldi	r24, 0xFF	; 255
 4d4:	e8 1a       	sub	r14, r24
 4d6:	f8 0a       	sbc	r15, r24
 4d8:	c0 16       	cp	r12, r16
	
	for (char x = 0; x < 8; x++)
	{
		SetX(x);
		SetY(0);
		for (char y = 0; y < 16; y++)
 4da:	d1 06       	cpc	r13, r17
 4dc:	11 f0       	breq	.+4      	; 0x4e2 <Draw+0x72>
 4de:	c0 e0       	ldi	r28, 0x00	; 0
	}
}

void Draw()
{
	Screen2();
 4e0:	e4 cf       	rjmp	.-56     	; 0x4aa <Draw+0x3a>
 4e2:	9f ef       	ldi	r25, 0xFF	; 255
 4e4:	a9 1a       	sub	r10, r25
 4e6:	b9 0a       	sbc	r11, r25
 4e8:	e0 e2       	ldi	r30, 0x20	; 32
 4ea:	ce 0e       	add	r12, r30
 4ec:	d1 1c       	adc	r13, r1
 4ee:	f8 e0       	ldi	r31, 0x08	; 8
	
	for (char x = 0; x < 8; x++)
 4f0:	af 16       	cp	r10, r31
 4f2:	b1 04       	cpc	r11, r1
 4f4:	81 f6       	brne	.-96     	; 0x496 <Draw+0x26>
 4f6:	df 91       	pop	r29
				
				SetPixel(toWrite);
			}			
		}
	}
}
 4f8:	cf 91       	pop	r28
 4fa:	1f 91       	pop	r17
 4fc:	0f 91       	pop	r16
 4fe:	ff 90       	pop	r15
 500:	ef 90       	pop	r14
 502:	df 90       	pop	r13
 504:	cf 90       	pop	r12
 506:	bf 90       	pop	r11
 508:	af 90       	pop	r10
 50a:	08 95       	ret

0000050c <main>:
 50c:	0f df       	rcall	.-482    	; 0x32c <Init>
int ttl = 3;

int main(void)
{
	Init();
	StartDisplay();
 50e:	04 de       	rcall	.-1016   	; 0x118 <StartDisplay>
	
	WipeScreen();
 510:	2a de       	rcall	.-940    	; 0x166 <WipeScreen>
	Screen2();
 512:	0c de       	rcall	.-1000   	; 0x12c <Screen2>
 514:	48 de       	rcall	.-880    	; 0x1a6 <SnakeInit>
	
	SnakeInit();
 516:	77 de       	rcall	.-786    	; 0x206 <AddFood>
 518:	c1 e0       	ldi	r28, 0x01	; 1
	AddFood();
 51a:	06 c0       	rjmp	.+12     	; 0x528 <main+0x1c>
 51c:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <__data_end>
	
	char bajs = 0;
	
	while (1)
	{
		bajs++;
 520:	8f 5f       	subi	r24, 0xFF	; 255
		if((bajs % 4) == 3)
		{
			rotation++;
			rotation %= 4;
 522:	83 70       	andi	r24, 0x03	; 3
 524:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <__data_end>
 528:	96 de       	rcall	.-724    	; 0x256 <Update>
		}
		Update();
 52a:	a2 df       	rcall	.-188    	; 0x470 <Draw>
 52c:	2f ef       	ldi	r18, 0xFF	; 255
		Draw();
 52e:	86 e7       	ldi	r24, 0x76	; 118
 530:	91 e0       	ldi	r25, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 532:	21 50       	subi	r18, 0x01	; 1
 534:	80 40       	sbci	r24, 0x00	; 0
 536:	90 40       	sbci	r25, 0x00	; 0
 538:	e1 f7       	brne	.-8      	; 0x532 <main+0x26>
 53a:	00 c0       	rjmp	.+0      	; 0x53c <main+0x30>
 53c:	00 00       	nop
 53e:	cf 5f       	subi	r28, 0xFF	; 255
 540:	8c 2f       	mov	r24, r28
 542:	83 70       	andi	r24, 0x03	; 3
	
	char bajs = 0;
	
	while (1)
	{
		bajs++;
 544:	83 30       	cpi	r24, 0x03	; 3
		if((bajs % 4) == 3)
 546:	81 f7       	brne	.-32     	; 0x528 <main+0x1c>
 548:	e9 cf       	rjmp	.-46     	; 0x51c <main+0x10>

0000054a <do_rand>:
 54a:	8f 92       	push	r8
 54c:	9f 92       	push	r9
 54e:	af 92       	push	r10
 550:	bf 92       	push	r11
 552:	cf 92       	push	r12
 554:	df 92       	push	r13
 556:	ef 92       	push	r14
 558:	ff 92       	push	r15
 55a:	cf 93       	push	r28
 55c:	df 93       	push	r29
 55e:	ec 01       	movw	r28, r24
 560:	68 81       	ld	r22, Y
 562:	79 81       	ldd	r23, Y+1	; 0x01
 564:	8a 81       	ldd	r24, Y+2	; 0x02
 566:	9b 81       	ldd	r25, Y+3	; 0x03
 568:	61 15       	cp	r22, r1
 56a:	71 05       	cpc	r23, r1
 56c:	81 05       	cpc	r24, r1
 56e:	91 05       	cpc	r25, r1
 570:	21 f4       	brne	.+8      	; 0x57a <do_rand+0x30>
 572:	64 e2       	ldi	r22, 0x24	; 36
 574:	79 ed       	ldi	r23, 0xD9	; 217
 576:	8b e5       	ldi	r24, 0x5B	; 91
 578:	97 e0       	ldi	r25, 0x07	; 7
 57a:	2d e1       	ldi	r18, 0x1D	; 29
 57c:	33 ef       	ldi	r19, 0xF3	; 243
 57e:	41 e0       	ldi	r20, 0x01	; 1
 580:	50 e0       	ldi	r21, 0x00	; 0
 582:	38 d0       	rcall	.+112    	; 0x5f4 <__divmodsi4>
 584:	49 01       	movw	r8, r18
 586:	5a 01       	movw	r10, r20
 588:	9b 01       	movw	r18, r22
 58a:	ac 01       	movw	r20, r24
 58c:	a7 ea       	ldi	r26, 0xA7	; 167
 58e:	b1 e4       	ldi	r27, 0x41	; 65
 590:	4d d0       	rcall	.+154    	; 0x62c <__muluhisi3>
 592:	6b 01       	movw	r12, r22
 594:	7c 01       	movw	r14, r24
 596:	ac ee       	ldi	r26, 0xEC	; 236
 598:	b4 ef       	ldi	r27, 0xF4	; 244
 59a:	a5 01       	movw	r20, r10
 59c:	94 01       	movw	r18, r8
 59e:	52 d0       	rcall	.+164    	; 0x644 <__mulohisi3>
 5a0:	dc 01       	movw	r26, r24
 5a2:	cb 01       	movw	r24, r22
 5a4:	8c 0d       	add	r24, r12
 5a6:	9d 1d       	adc	r25, r13
 5a8:	ae 1d       	adc	r26, r14
 5aa:	bf 1d       	adc	r27, r15
 5ac:	b7 ff       	sbrs	r27, 7
 5ae:	03 c0       	rjmp	.+6      	; 0x5b6 <do_rand+0x6c>
 5b0:	01 97       	sbiw	r24, 0x01	; 1
 5b2:	a1 09       	sbc	r26, r1
 5b4:	b0 48       	sbci	r27, 0x80	; 128
 5b6:	88 83       	st	Y, r24
 5b8:	99 83       	std	Y+1, r25	; 0x01
 5ba:	aa 83       	std	Y+2, r26	; 0x02
 5bc:	bb 83       	std	Y+3, r27	; 0x03
 5be:	9f 77       	andi	r25, 0x7F	; 127
 5c0:	df 91       	pop	r29
 5c2:	cf 91       	pop	r28
 5c4:	ff 90       	pop	r15
 5c6:	ef 90       	pop	r14
 5c8:	df 90       	pop	r13
 5ca:	cf 90       	pop	r12
 5cc:	bf 90       	pop	r11
 5ce:	af 90       	pop	r10
 5d0:	9f 90       	pop	r9
 5d2:	8f 90       	pop	r8
 5d4:	08 95       	ret

000005d6 <rand_r>:
 5d6:	b9 cf       	rjmp	.-142    	; 0x54a <do_rand>

000005d8 <rand>:
 5d8:	80 e0       	ldi	r24, 0x00	; 0
 5da:	91 e0       	ldi	r25, 0x01	; 1
 5dc:	b6 cf       	rjmp	.-148    	; 0x54a <do_rand>

000005de <srand>:
 5de:	a0 e0       	ldi	r26, 0x00	; 0
 5e0:	b0 e0       	ldi	r27, 0x00	; 0
 5e2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 5e6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 5ea:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 5ee:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
 5f2:	08 95       	ret

000005f4 <__divmodsi4>:
 5f4:	05 2e       	mov	r0, r21
 5f6:	97 fb       	bst	r25, 7
 5f8:	16 f4       	brtc	.+4      	; 0x5fe <__divmodsi4+0xa>
 5fa:	00 94       	com	r0
 5fc:	0f d0       	rcall	.+30     	; 0x61c <__negsi2>
 5fe:	57 fd       	sbrc	r21, 7
 600:	05 d0       	rcall	.+10     	; 0x60c <__divmodsi4_neg2>
 602:	24 d0       	rcall	.+72     	; 0x64c <__udivmodsi4>
 604:	07 fc       	sbrc	r0, 7
 606:	02 d0       	rcall	.+4      	; 0x60c <__divmodsi4_neg2>
 608:	46 f4       	brtc	.+16     	; 0x61a <__divmodsi4_exit>
 60a:	08 c0       	rjmp	.+16     	; 0x61c <__negsi2>

0000060c <__divmodsi4_neg2>:
 60c:	50 95       	com	r21
 60e:	40 95       	com	r20
 610:	30 95       	com	r19
 612:	21 95       	neg	r18
 614:	3f 4f       	sbci	r19, 0xFF	; 255
 616:	4f 4f       	sbci	r20, 0xFF	; 255
 618:	5f 4f       	sbci	r21, 0xFF	; 255

0000061a <__divmodsi4_exit>:
 61a:	08 95       	ret

0000061c <__negsi2>:
 61c:	90 95       	com	r25
 61e:	80 95       	com	r24
 620:	70 95       	com	r23
 622:	61 95       	neg	r22
 624:	7f 4f       	sbci	r23, 0xFF	; 255
 626:	8f 4f       	sbci	r24, 0xFF	; 255
 628:	9f 4f       	sbci	r25, 0xFF	; 255
 62a:	08 95       	ret

0000062c <__muluhisi3>:
 62c:	31 d0       	rcall	.+98     	; 0x690 <__umulhisi3>
 62e:	a5 9f       	mul	r26, r21
 630:	90 0d       	add	r25, r0
 632:	b4 9f       	mul	r27, r20
 634:	90 0d       	add	r25, r0
 636:	a4 9f       	mul	r26, r20
 638:	80 0d       	add	r24, r0
 63a:	91 1d       	adc	r25, r1
 63c:	11 24       	eor	r1, r1
 63e:	08 95       	ret

00000640 <__mulshisi3>:
 640:	b7 ff       	sbrs	r27, 7
 642:	f4 cf       	rjmp	.-24     	; 0x62c <__muluhisi3>

00000644 <__mulohisi3>:
 644:	f3 df       	rcall	.-26     	; 0x62c <__muluhisi3>
 646:	82 1b       	sub	r24, r18
 648:	93 0b       	sbc	r25, r19
 64a:	08 95       	ret

0000064c <__udivmodsi4>:
 64c:	a1 e2       	ldi	r26, 0x21	; 33
 64e:	1a 2e       	mov	r1, r26
 650:	aa 1b       	sub	r26, r26
 652:	bb 1b       	sub	r27, r27
 654:	fd 01       	movw	r30, r26
 656:	0d c0       	rjmp	.+26     	; 0x672 <__udivmodsi4_ep>

00000658 <__udivmodsi4_loop>:
 658:	aa 1f       	adc	r26, r26
 65a:	bb 1f       	adc	r27, r27
 65c:	ee 1f       	adc	r30, r30
 65e:	ff 1f       	adc	r31, r31
 660:	a2 17       	cp	r26, r18
 662:	b3 07       	cpc	r27, r19
 664:	e4 07       	cpc	r30, r20
 666:	f5 07       	cpc	r31, r21
 668:	20 f0       	brcs	.+8      	; 0x672 <__udivmodsi4_ep>
 66a:	a2 1b       	sub	r26, r18
 66c:	b3 0b       	sbc	r27, r19
 66e:	e4 0b       	sbc	r30, r20
 670:	f5 0b       	sbc	r31, r21

00000672 <__udivmodsi4_ep>:
 672:	66 1f       	adc	r22, r22
 674:	77 1f       	adc	r23, r23
 676:	88 1f       	adc	r24, r24
 678:	99 1f       	adc	r25, r25
 67a:	1a 94       	dec	r1
 67c:	69 f7       	brne	.-38     	; 0x658 <__udivmodsi4_loop>
 67e:	60 95       	com	r22
 680:	70 95       	com	r23
 682:	80 95       	com	r24
 684:	90 95       	com	r25
 686:	9b 01       	movw	r18, r22
 688:	ac 01       	movw	r20, r24
 68a:	bd 01       	movw	r22, r26
 68c:	cf 01       	movw	r24, r30
 68e:	08 95       	ret

00000690 <__umulhisi3>:
 690:	a2 9f       	mul	r26, r18
 692:	b0 01       	movw	r22, r0
 694:	b3 9f       	mul	r27, r19
 696:	c0 01       	movw	r24, r0
 698:	a3 9f       	mul	r26, r19
 69a:	70 0d       	add	r23, r0
 69c:	81 1d       	adc	r24, r1
 69e:	11 24       	eor	r1, r1
 6a0:	91 1d       	adc	r25, r1
 6a2:	b2 9f       	mul	r27, r18
 6a4:	70 0d       	add	r23, r0
 6a6:	81 1d       	adc	r24, r1
 6a8:	11 24       	eor	r1, r1
 6aa:	91 1d       	adc	r25, r1
 6ac:	08 95       	ret

000006ae <_exit>:
 6ae:	f8 94       	cli

000006b0 <__stop_program>:
 6b0:	ff cf       	rjmp	.-2      	; 0x6b0 <__stop_program>
