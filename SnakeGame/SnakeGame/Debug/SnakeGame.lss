
SnakeGame.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000005ba  00800100  0000217a  0000220e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000217a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000161  008006ba  008006ba  000027c8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000027c8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000027f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  00002838  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001665  00000000  00000000  00002998  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a5e  00000000  00000000  00003ffd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000012f9  00000000  00000000  00004a5b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004fc  00000000  00000000  00005d54  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000068f  00000000  00000000  00006250  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009dc  00000000  00000000  000068df  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000140  00000000  00000000  000072bb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	90 c0       	rjmp	.+288    	; 0x122 <__ctors_end>
       2:	00 00       	nop
       4:	ac c0       	rjmp	.+344    	; 0x15e <__bad_interrupt>
       6:	00 00       	nop
       8:	aa c0       	rjmp	.+340    	; 0x15e <__bad_interrupt>
       a:	00 00       	nop
       c:	a8 c0       	rjmp	.+336    	; 0x15e <__bad_interrupt>
       e:	00 00       	nop
      10:	a6 c0       	rjmp	.+332    	; 0x15e <__bad_interrupt>
      12:	00 00       	nop
      14:	a4 c0       	rjmp	.+328    	; 0x15e <__bad_interrupt>
      16:	00 00       	nop
      18:	a2 c0       	rjmp	.+324    	; 0x15e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	a0 c0       	rjmp	.+320    	; 0x15e <__bad_interrupt>
      1e:	00 00       	nop
      20:	9e c0       	rjmp	.+316    	; 0x15e <__bad_interrupt>
      22:	00 00       	nop
      24:	9c c0       	rjmp	.+312    	; 0x15e <__bad_interrupt>
      26:	00 00       	nop
      28:	9a c0       	rjmp	.+308    	; 0x15e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	98 c0       	rjmp	.+304    	; 0x15e <__bad_interrupt>
      2e:	00 00       	nop
      30:	96 c0       	rjmp	.+300    	; 0x15e <__bad_interrupt>
      32:	00 00       	nop
      34:	94 c0       	rjmp	.+296    	; 0x15e <__bad_interrupt>
      36:	00 00       	nop
      38:	92 c0       	rjmp	.+292    	; 0x15e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	90 c0       	rjmp	.+288    	; 0x15e <__bad_interrupt>
      3e:	00 00       	nop
      40:	8e c0       	rjmp	.+284    	; 0x15e <__bad_interrupt>
      42:	00 00       	nop
      44:	8c c0       	rjmp	.+280    	; 0x15e <__bad_interrupt>
      46:	00 00       	nop
      48:	8a c0       	rjmp	.+276    	; 0x15e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	88 c0       	rjmp	.+272    	; 0x15e <__bad_interrupt>
      4e:	00 00       	nop
      50:	86 c0       	rjmp	.+268    	; 0x15e <__bad_interrupt>
      52:	00 00       	nop
      54:	84 c0       	rjmp	.+264    	; 0x15e <__bad_interrupt>
      56:	00 00       	nop
      58:	82 c0       	rjmp	.+260    	; 0x15e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	80 c0       	rjmp	.+256    	; 0x15e <__bad_interrupt>
      5e:	00 00       	nop
      60:	7e c0       	rjmp	.+252    	; 0x15e <__bad_interrupt>
      62:	00 00       	nop
      64:	7c c0       	rjmp	.+248    	; 0x15e <__bad_interrupt>
      66:	00 00       	nop
      68:	7a c0       	rjmp	.+244    	; 0x15e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	78 c0       	rjmp	.+240    	; 0x15e <__bad_interrupt>
      6e:	00 00       	nop
      70:	76 c0       	rjmp	.+236    	; 0x15e <__bad_interrupt>
      72:	00 00       	nop
      74:	74 c0       	rjmp	.+232    	; 0x15e <__bad_interrupt>
      76:	00 00       	nop
      78:	72 c0       	rjmp	.+228    	; 0x15e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	70 c0       	rjmp	.+224    	; 0x15e <__bad_interrupt>
      7e:	00 00       	nop
      80:	6e c0       	rjmp	.+220    	; 0x15e <__bad_interrupt>
      82:	00 00       	nop
      84:	6c c0       	rjmp	.+216    	; 0x15e <__bad_interrupt>
      86:	00 00       	nop
      88:	6a c0       	rjmp	.+212    	; 0x15e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	77 07       	cpc	r23, r23
      8e:	b0 07       	cpc	r27, r16
      90:	e9 07       	cpc	r30, r25
      92:	22 08       	sbc	r2, r2
      94:	5b 08       	sbc	r5, r11
      96:	94 08       	sbc	r9, r4
      98:	cd 08       	sbc	r12, r13
      9a:	06 09       	sbc	r16, r6
      9c:	3f 09       	sbc	r19, r15
      9e:	78 09       	sbc	r23, r8
      a0:	07 63       	ori	r16, 0x37	; 55
      a2:	42 36       	cpi	r20, 0x62	; 98
      a4:	b7 9b       	sbis	0x16, 7	; 22
      a6:	d8 a7       	std	Y+40, r29	; 0x28
      a8:	1a 39       	cpi	r17, 0x9A	; 154
      aa:	68 56       	subi	r22, 0x68	; 104
      ac:	18 ae       	std	Y+56, r1	; 0x38
      ae:	ba ab       	std	Y+50, r27	; 0x32
      b0:	55 8c       	ldd	r5, Z+29	; 0x1d
      b2:	1d 3c       	cpi	r17, 0xCD	; 205
      b4:	b7 cc       	rjmp	.-1682   	; 0xfffffa24 <__eeprom_end+0xff7efa24>
      b6:	57 63       	ori	r21, 0x37	; 55
      b8:	bd 6d       	ori	r27, 0xDD	; 221
      ba:	ed fd       	.word	0xfded	; ????
      bc:	75 3e       	cpi	r23, 0xE5	; 229
      be:	f6 17       	cp	r31, r22
      c0:	72 31       	cpi	r23, 0x12	; 18
      c2:	bf 00       	.word	0x00bf	; ????
      c4:	00 00       	nop
      c6:	80 3f       	cpi	r24, 0xF0	; 240
      c8:	08 00       	.word	0x0008	; ????
      ca:	00 00       	nop
      cc:	be 92       	st	-X, r11
      ce:	24 49       	sbci	r18, 0x94	; 148
      d0:	12 3e       	cpi	r17, 0xE2	; 226
      d2:	ab aa       	std	Y+51, r10	; 0x33
      d4:	aa 2a       	or	r10, r26
      d6:	be cd       	rjmp	.-1156   	; 0xfffffc54 <__eeprom_end+0xff7efc54>
      d8:	cc cc       	rjmp	.-1640   	; 0xfffffa72 <__eeprom_end+0xff7efa72>
      da:	4c 3e       	cpi	r20, 0xEC	; 236
      dc:	00 00       	nop
      de:	00 80       	ld	r0, Z
      e0:	be ab       	std	Y+54, r27	; 0x36
      e2:	aa aa       	std	Y+50, r10	; 0x32
      e4:	aa 3e       	cpi	r26, 0xEA	; 234
      e6:	00 00       	nop
      e8:	00 00       	nop
      ea:	bf 00       	.word	0x00bf	; ????
      ec:	00 00       	nop
      ee:	80 3f       	cpi	r24, 0xF0	; 240
      f0:	00 00       	nop
      f2:	00 00       	nop
      f4:	00 08       	sbc	r0, r0
      f6:	41 78       	andi	r20, 0x81	; 129
      f8:	d3 bb       	out	0x13, r29	; 19
      fa:	43 87       	std	Z+11, r20	; 0x0b
      fc:	d1 13       	cpse	r29, r17
      fe:	3d 19       	sub	r19, r13
     100:	0e 3c       	cpi	r16, 0xCE	; 206
     102:	c3 bd       	out	0x23, r28	; 35
     104:	42 82       	std	Z+2, r4	; 0x02
     106:	ad 2b       	or	r26, r29
     108:	3e 68       	ori	r19, 0x8E	; 142
     10a:	ec 82       	std	Y+4, r14	; 0x04
     10c:	76 be       	out	0x36, r7	; 54
     10e:	d9 8f       	std	Y+25, r29	; 0x19
     110:	e1 a9       	ldd	r30, Z+49	; 0x31
     112:	3e 4c       	sbci	r19, 0xCE	; 206
     114:	80 ef       	ldi	r24, 0xF0	; 240
     116:	ff be       	out	0x3f, r15	; 63
     118:	01 c4       	rjmp	.+2050   	; 0x91c <GetRotation+0x94>
     11a:	ff 7f       	andi	r31, 0xFF	; 255
     11c:	3f 00       	.word	0x003f	; ????
     11e:	00 00       	nop
	...

00000122 <__ctors_end>:
     122:	11 24       	eor	r1, r1
     124:	1f be       	out	0x3f, r1	; 63
     126:	cf ef       	ldi	r28, 0xFF	; 255
     128:	d0 e4       	ldi	r29, 0x40	; 64
     12a:	de bf       	out	0x3e, r29	; 62
     12c:	cd bf       	out	0x3d, r28	; 61

0000012e <__do_copy_data>:
     12e:	16 e0       	ldi	r17, 0x06	; 6
     130:	a0 e0       	ldi	r26, 0x00	; 0
     132:	b1 e0       	ldi	r27, 0x01	; 1
     134:	ea e7       	ldi	r30, 0x7A	; 122
     136:	f1 e2       	ldi	r31, 0x21	; 33
     138:	00 e0       	ldi	r16, 0x00	; 0
     13a:	0b bf       	out	0x3b, r16	; 59
     13c:	02 c0       	rjmp	.+4      	; 0x142 <__do_copy_data+0x14>
     13e:	07 90       	elpm	r0, Z+
     140:	0d 92       	st	X+, r0
     142:	aa 3b       	cpi	r26, 0xBA	; 186
     144:	b1 07       	cpc	r27, r17
     146:	d9 f7       	brne	.-10     	; 0x13e <__do_copy_data+0x10>

00000148 <__do_clear_bss>:
     148:	28 e0       	ldi	r18, 0x08	; 8
     14a:	aa eb       	ldi	r26, 0xBA	; 186
     14c:	b6 e0       	ldi	r27, 0x06	; 6
     14e:	01 c0       	rjmp	.+2      	; 0x152 <.do_clear_bss_start>

00000150 <.do_clear_bss_loop>:
     150:	1d 92       	st	X+, r1

00000152 <.do_clear_bss_start>:
     152:	ab 31       	cpi	r26, 0x1B	; 27
     154:	b2 07       	cpc	r27, r18
     156:	e1 f7       	brne	.-8      	; 0x150 <.do_clear_bss_loop>
     158:	52 d1       	rcall	.+676    	; 0x3fe <main>
     15a:	0c 94 bb 10 	jmp	0x2176	; 0x2176 <_exit>

0000015e <__bad_interrupt>:
     15e:	50 cf       	rjmp	.-352    	; 0x0 <__vectors>

00000160 <StartDisplay>:
}

void rwHigh()
{
	PORTD |= 0b00001000;
}
     160:	cf 93       	push	r28
     162:	df 93       	push	r29
     164:	cd b7       	in	r28, 0x3d	; 61
     166:	de b7       	in	r29, 0x3e	; 62
     168:	85 e2       	ldi	r24, 0x25	; 37
     16a:	90 e0       	ldi	r25, 0x00	; 0
     16c:	2f e3       	ldi	r18, 0x3F	; 63
     16e:	fc 01       	movw	r30, r24
     170:	20 83       	st	Z, r18
     172:	81 d0       	rcall	.+258    	; 0x276 <rsLow>
     174:	5e d0       	rcall	.+188    	; 0x232 <rwLow>
     176:	4c d0       	rcall	.+152    	; 0x210 <ResetHigh>
     178:	8f d0       	rcall	.+286    	; 0x298 <eHigh>
     17a:	28 d0       	rcall	.+80     	; 0x1cc <cs1High>
     17c:	05 d0       	rcall	.+10     	; 0x188 <cs2High>
     17e:	ae d0       	rcall	.+348    	; 0x2dc <WriteData>
     180:	00 00       	nop
     182:	df 91       	pop	r29
     184:	cf 91       	pop	r28
     186:	08 95       	ret

00000188 <cs2High>:
     188:	cf 93       	push	r28
     18a:	df 93       	push	r29
     18c:	cd b7       	in	r28, 0x3d	; 61
     18e:	de b7       	in	r29, 0x3e	; 62
     190:	8b e2       	ldi	r24, 0x2B	; 43
     192:	90 e0       	ldi	r25, 0x00	; 0
     194:	2b e2       	ldi	r18, 0x2B	; 43
     196:	30 e0       	ldi	r19, 0x00	; 0
     198:	f9 01       	movw	r30, r18
     19a:	20 81       	ld	r18, Z
     19c:	21 60       	ori	r18, 0x01	; 1
     19e:	fc 01       	movw	r30, r24
     1a0:	20 83       	st	Z, r18
     1a2:	00 00       	nop
     1a4:	df 91       	pop	r29
     1a6:	cf 91       	pop	r28
     1a8:	08 95       	ret

000001aa <cs2Low>:
     1aa:	cf 93       	push	r28
     1ac:	df 93       	push	r29
     1ae:	cd b7       	in	r28, 0x3d	; 61
     1b0:	de b7       	in	r29, 0x3e	; 62
     1b2:	8b e2       	ldi	r24, 0x2B	; 43
     1b4:	90 e0       	ldi	r25, 0x00	; 0
     1b6:	2b e2       	ldi	r18, 0x2B	; 43
     1b8:	30 e0       	ldi	r19, 0x00	; 0
     1ba:	f9 01       	movw	r30, r18
     1bc:	20 81       	ld	r18, Z
     1be:	2e 7f       	andi	r18, 0xFE	; 254
     1c0:	fc 01       	movw	r30, r24
     1c2:	20 83       	st	Z, r18
     1c4:	00 00       	nop
     1c6:	df 91       	pop	r29
     1c8:	cf 91       	pop	r28
     1ca:	08 95       	ret

000001cc <cs1High>:
     1cc:	cf 93       	push	r28
     1ce:	df 93       	push	r29
     1d0:	cd b7       	in	r28, 0x3d	; 61
     1d2:	de b7       	in	r29, 0x3e	; 62
     1d4:	8b e2       	ldi	r24, 0x2B	; 43
     1d6:	90 e0       	ldi	r25, 0x00	; 0
     1d8:	2b e2       	ldi	r18, 0x2B	; 43
     1da:	30 e0       	ldi	r19, 0x00	; 0
     1dc:	f9 01       	movw	r30, r18
     1de:	20 81       	ld	r18, Z
     1e0:	22 60       	ori	r18, 0x02	; 2
     1e2:	fc 01       	movw	r30, r24
     1e4:	20 83       	st	Z, r18
     1e6:	00 00       	nop
     1e8:	df 91       	pop	r29
     1ea:	cf 91       	pop	r28
     1ec:	08 95       	ret

000001ee <cs1Low>:
     1ee:	cf 93       	push	r28
     1f0:	df 93       	push	r29
     1f2:	cd b7       	in	r28, 0x3d	; 61
     1f4:	de b7       	in	r29, 0x3e	; 62
     1f6:	8b e2       	ldi	r24, 0x2B	; 43
     1f8:	90 e0       	ldi	r25, 0x00	; 0
     1fa:	2b e2       	ldi	r18, 0x2B	; 43
     1fc:	30 e0       	ldi	r19, 0x00	; 0
     1fe:	f9 01       	movw	r30, r18
     200:	20 81       	ld	r18, Z
     202:	2d 7f       	andi	r18, 0xFD	; 253
     204:	fc 01       	movw	r30, r24
     206:	20 83       	st	Z, r18
     208:	00 00       	nop
     20a:	df 91       	pop	r29
     20c:	cf 91       	pop	r28
     20e:	08 95       	ret

00000210 <ResetHigh>:
     210:	cf 93       	push	r28
     212:	df 93       	push	r29
     214:	cd b7       	in	r28, 0x3d	; 61
     216:	de b7       	in	r29, 0x3e	; 62
     218:	8b e2       	ldi	r24, 0x2B	; 43
     21a:	90 e0       	ldi	r25, 0x00	; 0
     21c:	2b e2       	ldi	r18, 0x2B	; 43
     21e:	30 e0       	ldi	r19, 0x00	; 0
     220:	f9 01       	movw	r30, r18
     222:	20 81       	ld	r18, Z
     224:	24 60       	ori	r18, 0x04	; 4
     226:	fc 01       	movw	r30, r24
     228:	20 83       	st	Z, r18
     22a:	00 00       	nop
     22c:	df 91       	pop	r29
     22e:	cf 91       	pop	r28
     230:	08 95       	ret

00000232 <rwLow>:

void rwLow()
{
     232:	cf 93       	push	r28
     234:	df 93       	push	r29
     236:	cd b7       	in	r28, 0x3d	; 61
     238:	de b7       	in	r29, 0x3e	; 62
	PORTD &= 0b11110111;
     23a:	8b e2       	ldi	r24, 0x2B	; 43
     23c:	90 e0       	ldi	r25, 0x00	; 0
     23e:	2b e2       	ldi	r18, 0x2B	; 43
     240:	30 e0       	ldi	r19, 0x00	; 0
     242:	f9 01       	movw	r30, r18
     244:	20 81       	ld	r18, Z
     246:	27 7f       	andi	r18, 0xF7	; 247
     248:	fc 01       	movw	r30, r24
     24a:	20 83       	st	Z, r18
}
     24c:	00 00       	nop
     24e:	df 91       	pop	r29
     250:	cf 91       	pop	r28
     252:	08 95       	ret

00000254 <rsHigh>:

void rsHigh()
{
     254:	cf 93       	push	r28
     256:	df 93       	push	r29
     258:	cd b7       	in	r28, 0x3d	; 61
     25a:	de b7       	in	r29, 0x3e	; 62
	PORTD |= 0b00010000;
     25c:	8b e2       	ldi	r24, 0x2B	; 43
     25e:	90 e0       	ldi	r25, 0x00	; 0
     260:	2b e2       	ldi	r18, 0x2B	; 43
     262:	30 e0       	ldi	r19, 0x00	; 0
     264:	f9 01       	movw	r30, r18
     266:	20 81       	ld	r18, Z
     268:	20 61       	ori	r18, 0x10	; 16
     26a:	fc 01       	movw	r30, r24
     26c:	20 83       	st	Z, r18
}
     26e:	00 00       	nop
     270:	df 91       	pop	r29
     272:	cf 91       	pop	r28
     274:	08 95       	ret

00000276 <rsLow>:

void rsLow()
{
     276:	cf 93       	push	r28
     278:	df 93       	push	r29
     27a:	cd b7       	in	r28, 0x3d	; 61
     27c:	de b7       	in	r29, 0x3e	; 62
	PORTD &= 0b11101111;
     27e:	8b e2       	ldi	r24, 0x2B	; 43
     280:	90 e0       	ldi	r25, 0x00	; 0
     282:	2b e2       	ldi	r18, 0x2B	; 43
     284:	30 e0       	ldi	r19, 0x00	; 0
     286:	f9 01       	movw	r30, r18
     288:	20 81       	ld	r18, Z
     28a:	2f 7e       	andi	r18, 0xEF	; 239
     28c:	fc 01       	movw	r30, r24
     28e:	20 83       	st	Z, r18
}
     290:	00 00       	nop
     292:	df 91       	pop	r29
     294:	cf 91       	pop	r28
     296:	08 95       	ret

00000298 <eHigh>:

void eHigh()
{
     298:	cf 93       	push	r28
     29a:	df 93       	push	r29
     29c:	cd b7       	in	r28, 0x3d	; 61
     29e:	de b7       	in	r29, 0x3e	; 62
	PORTD |= 0b00100000;
     2a0:	8b e2       	ldi	r24, 0x2B	; 43
     2a2:	90 e0       	ldi	r25, 0x00	; 0
     2a4:	2b e2       	ldi	r18, 0x2B	; 43
     2a6:	30 e0       	ldi	r19, 0x00	; 0
     2a8:	f9 01       	movw	r30, r18
     2aa:	20 81       	ld	r18, Z
     2ac:	20 62       	ori	r18, 0x20	; 32
     2ae:	fc 01       	movw	r30, r24
     2b0:	20 83       	st	Z, r18
}
     2b2:	00 00       	nop
     2b4:	df 91       	pop	r29
     2b6:	cf 91       	pop	r28
     2b8:	08 95       	ret

000002ba <eLow>:

void eLow()
{
     2ba:	cf 93       	push	r28
     2bc:	df 93       	push	r29
     2be:	cd b7       	in	r28, 0x3d	; 61
     2c0:	de b7       	in	r29, 0x3e	; 62
	PORTD &= 0b11011111;
     2c2:	8b e2       	ldi	r24, 0x2B	; 43
     2c4:	90 e0       	ldi	r25, 0x00	; 0
     2c6:	2b e2       	ldi	r18, 0x2B	; 43
     2c8:	30 e0       	ldi	r19, 0x00	; 0
     2ca:	f9 01       	movw	r30, r18
     2cc:	20 81       	ld	r18, Z
     2ce:	2f 7d       	andi	r18, 0xDF	; 223
     2d0:	fc 01       	movw	r30, r24
     2d2:	20 83       	st	Z, r18
}
     2d4:	00 00       	nop
     2d6:	df 91       	pop	r29
     2d8:	cf 91       	pop	r28
     2da:	08 95       	ret

000002dc <WriteData>:

void WriteData()
{
     2dc:	cf 93       	push	r28
     2de:	df 93       	push	r29
     2e0:	cd b7       	in	r28, 0x3d	; 61
     2e2:	de b7       	in	r29, 0x3e	; 62
	eLow();
     2e4:	ea df       	rcall	.-44     	; 0x2ba <eLow>
	eHigh();
     2e6:	d8 df       	rcall	.-80     	; 0x298 <eHigh>
     2e8:	00 00       	nop
}
     2ea:	df 91       	pop	r29
     2ec:	cf 91       	pop	r28
     2ee:	08 95       	ret

000002f0 <Screen1>:
     2f0:	cf 93       	push	r28

void Screen1()
{
     2f2:	df 93       	push	r29
     2f4:	cd b7       	in	r28, 0x3d	; 61
     2f6:	de b7       	in	r29, 0x3e	; 62
	cs1Low();
     2f8:	7a df       	rcall	.-268    	; 0x1ee <cs1Low>
	cs2High();
     2fa:	46 df       	rcall	.-372    	; 0x188 <cs2High>
     2fc:	00 00       	nop
}
     2fe:	df 91       	pop	r29
     300:	cf 91       	pop	r28
     302:	08 95       	ret

00000304 <Screen2>:
     304:	cf 93       	push	r28

void Screen2()
{
     306:	df 93       	push	r29
     308:	cd b7       	in	r28, 0x3d	; 61
     30a:	de b7       	in	r29, 0x3e	; 62
	cs1High();
     30c:	5f df       	rcall	.-322    	; 0x1cc <cs1High>
	cs2Low();
     30e:	4d df       	rcall	.-358    	; 0x1aa <cs2Low>
     310:	00 00       	nop
}
     312:	df 91       	pop	r29
     314:	cf 91       	pop	r28
     316:	08 95       	ret

00000318 <SetPixel>:
     318:	cf 93       	push	r28

void SetPixel(char in)
{
     31a:	df 93       	push	r29
     31c:	1f 92       	push	r1
     31e:	cd b7       	in	r28, 0x3d	; 61
     320:	de b7       	in	r29, 0x3e	; 62
     322:	89 83       	std	Y+1, r24	; 0x01
	rsHigh();
     324:	97 df       	rcall	.-210    	; 0x254 <rsHigh>
	rwLow();
     326:	85 df       	rcall	.-246    	; 0x232 <rwLow>
     328:	85 e2       	ldi	r24, 0x25	; 37
	PORTB = in;
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	29 81       	ldd	r18, Y+1	; 0x01
     32e:	fc 01       	movw	r30, r24
     330:	20 83       	st	Z, r18
	WriteData();
     332:	d4 df       	rcall	.-88     	; 0x2dc <WriteData>
     334:	00 00       	nop
}
     336:	0f 90       	pop	r0
     338:	df 91       	pop	r29
     33a:	cf 91       	pop	r28
     33c:	08 95       	ret

0000033e <WipeScreen>:
     33e:	cf 93       	push	r28

void WipeScreen()
{
     340:	df 93       	push	r29
     342:	00 d0       	rcall	.+0      	; 0x344 <WipeScreen+0x6>
     344:	00 d0       	rcall	.+0      	; 0x346 <WipeScreen+0x8>
     346:	cd b7       	in	r28, 0x3d	; 61
     348:	de b7       	in	r29, 0x3e	; 62
	for (int i = 0; i < 8; i++)
     34a:	1a 82       	std	Y+2, r1	; 0x02
     34c:	19 82       	std	Y+1, r1	; 0x01
     34e:	1f c0       	rjmp	.+62     	; 0x38e <WipeScreen+0x50>
	{
		for (int j = 0; j < 64; j++)
     350:	1c 82       	std	Y+4, r1	; 0x04
     352:	1b 82       	std	Y+3, r1	; 0x03
     354:	12 c0       	rjmp	.+36     	; 0x37a <WipeScreen+0x3c>
		{
			SetX(i);
     356:	89 81       	ldd	r24, Y+1	; 0x01
     358:	9a 81       	ldd	r25, Y+2	; 0x02
     35a:	25 d0       	rcall	.+74     	; 0x3a6 <SetX>
			SetY(j);
     35c:	8b 81       	ldd	r24, Y+3	; 0x03
     35e:	9c 81       	ldd	r25, Y+4	; 0x04
			rsHigh();
     360:	38 d0       	rcall	.+112    	; 0x3d2 <SetY>
     362:	78 df       	rcall	.-272    	; 0x254 <rsHigh>
			rwLow();
     364:	66 df       	rcall	.-308    	; 0x232 <rwLow>
     366:	85 e2       	ldi	r24, 0x25	; 37
			
			PORTB = 0b00000000;
     368:	90 e0       	ldi	r25, 0x00	; 0
     36a:	fc 01       	movw	r30, r24
     36c:	10 82       	st	Z, r1
			WriteData();
     36e:	b6 df       	rcall	.-148    	; 0x2dc <WriteData>
     370:	8b 81       	ldd	r24, Y+3	; 0x03

void WipeScreen()
{
	for (int i = 0; i < 8; i++)
	{
		for (int j = 0; j < 64; j++)
     372:	9c 81       	ldd	r25, Y+4	; 0x04
     374:	01 96       	adiw	r24, 0x01	; 1
     376:	9c 83       	std	Y+4, r25	; 0x04
     378:	8b 83       	std	Y+3, r24	; 0x03
     37a:	8b 81       	ldd	r24, Y+3	; 0x03
     37c:	9c 81       	ldd	r25, Y+4	; 0x04
     37e:	80 34       	cpi	r24, 0x40	; 64
     380:	91 05       	cpc	r25, r1
     382:	4c f3       	brlt	.-46     	; 0x356 <WipeScreen+0x18>
     384:	89 81       	ldd	r24, Y+1	; 0x01
	WriteData();
}

void WipeScreen()
{
	for (int i = 0; i < 8; i++)
     386:	9a 81       	ldd	r25, Y+2	; 0x02
     388:	01 96       	adiw	r24, 0x01	; 1
     38a:	9a 83       	std	Y+2, r25	; 0x02
     38c:	89 83       	std	Y+1, r24	; 0x01
     38e:	89 81       	ldd	r24, Y+1	; 0x01
     390:	9a 81       	ldd	r25, Y+2	; 0x02
     392:	08 97       	sbiw	r24, 0x08	; 8
     394:	ec f2       	brlt	.-70     	; 0x350 <WipeScreen+0x12>
     396:	00 00       	nop
			
			PORTB = 0b00000000;
			WriteData();
		}
	}
}
     398:	0f 90       	pop	r0
     39a:	0f 90       	pop	r0
     39c:	0f 90       	pop	r0
     39e:	0f 90       	pop	r0
     3a0:	df 91       	pop	r29
     3a2:	cf 91       	pop	r28
     3a4:	08 95       	ret

000003a6 <SetX>:
     3a6:	cf 93       	push	r28

void SetX(int x)
{
     3a8:	df 93       	push	r29
     3aa:	00 d0       	rcall	.+0      	; 0x3ac <SetX+0x6>
     3ac:	cd b7       	in	r28, 0x3d	; 61
     3ae:	de b7       	in	r29, 0x3e	; 62
     3b0:	9a 83       	std	Y+2, r25	; 0x02
     3b2:	89 83       	std	Y+1, r24	; 0x01
	rsLow();
     3b4:	60 df       	rcall	.-320    	; 0x276 <rsLow>
	rwLow();
     3b6:	3d df       	rcall	.-390    	; 0x232 <rwLow>
     3b8:	85 e2       	ldi	r24, 0x25	; 37
	PORTB = 0b10111000 | x;
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	29 81       	ldd	r18, Y+1	; 0x01
     3be:	28 6b       	ori	r18, 0xB8	; 184
     3c0:	fc 01       	movw	r30, r24
     3c2:	20 83       	st	Z, r18
	WriteData();
     3c4:	8b df       	rcall	.-234    	; 0x2dc <WriteData>
     3c6:	00 00       	nop
}
     3c8:	0f 90       	pop	r0
     3ca:	0f 90       	pop	r0
     3cc:	df 91       	pop	r29
     3ce:	cf 91       	pop	r28
     3d0:	08 95       	ret

000003d2 <SetY>:
     3d2:	cf 93       	push	r28

void SetY(int y)
{
     3d4:	df 93       	push	r29
     3d6:	00 d0       	rcall	.+0      	; 0x3d8 <SetY+0x6>
     3d8:	cd b7       	in	r28, 0x3d	; 61
     3da:	de b7       	in	r29, 0x3e	; 62
     3dc:	9a 83       	std	Y+2, r25	; 0x02
     3de:	89 83       	std	Y+1, r24	; 0x01
	rwLow();
     3e0:	28 df       	rcall	.-432    	; 0x232 <rwLow>
	rsLow();
     3e2:	49 df       	rcall	.-366    	; 0x276 <rsLow>
     3e4:	85 e2       	ldi	r24, 0x25	; 37
	PORTB = 0b01000000 | y;
     3e6:	90 e0       	ldi	r25, 0x00	; 0
     3e8:	29 81       	ldd	r18, Y+1	; 0x01
     3ea:	20 64       	ori	r18, 0x40	; 64
     3ec:	fc 01       	movw	r30, r24
     3ee:	20 83       	st	Z, r18
	WriteData();
     3f0:	75 df       	rcall	.-278    	; 0x2dc <WriteData>
     3f2:	00 00       	nop
}
     3f4:	0f 90       	pop	r0
     3f6:	0f 90       	pop	r0
     3f8:	df 91       	pop	r29
     3fa:	cf 91       	pop	r28
     3fc:	08 95       	ret

000003fe <main>:
     3fe:	cf 93       	push	r28
int joystickX = 600;
int jsDeadZoneY = 150;
int jsDeadZoneX = 150;

int main(void)
{
     400:	df 93       	push	r29
     402:	cd b7       	in	r28, 0x3d	; 61
     404:	de b7       	in	r29, 0x3e	; 62
     406:	6e 97       	sbiw	r28, 0x1e	; 30
     408:	0f b6       	in	r0, 0x3f	; 63
     40a:	f8 94       	cli
     40c:	de bf       	out	0x3e, r29	; 62
     40e:	0f be       	out	0x3f, r0	; 63
     410:	cd bf       	out	0x3d, r28	; 61
	Init();
     412:	ec d7       	rcall	.+4056   	; 0x13ec <Init>
	StartDisplay();
     414:	a5 de       	rcall	.-694    	; 0x160 <StartDisplay>
	
	WipeScreen();
     416:	93 df       	rcall	.-218    	; 0x33e <WipeScreen>
	Screen2();
     418:	75 df       	rcall	.-278    	; 0x304 <Screen2>
	
	SnakeInit();
     41a:	2a d1       	rcall	.+596    	; 0x670 <SnakeInit>
	AddFood();
     41c:	be d1       	rcall	.+892    	; 0x79a <AddFood>
     41e:	4d d4       	rcall	.+2202   	; 0xcba <DrawScore>
	
	DrawScore();
     420:	c4 d4       	rcall	.+2440   	; 0xdaa <UpdateScore>
     422:	80 91 12 07 	lds	r24, 0x0712	; 0x800712 <lost>
	UpdateScore();
     426:	88 23       	and	r24, r24
	
	while (1)
	{
		if (lost == 0)
     428:	09 f0       	breq	.+2      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
     42a:	ae c0       	rjmp	.+348    	; 0x588 <__LOCK_REGION_LENGTH__+0x188>
     42c:	1a 82       	std	Y+2, r1	; 0x02
     42e:	19 82       	std	Y+1, r1	; 0x01
     430:	86 c0       	rjmp	.+268    	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
		{
			
			for (int i = 0; i < 5; i++)
     432:	80 e0       	ldi	r24, 0x00	; 0
     434:	90 e0       	ldi	r25, 0x00	; 0
     436:	a0 e8       	ldi	r26, 0x80	; 128
     438:	bf e3       	ldi	r27, 0x3F	; 63
     43a:	8f 83       	std	Y+7, r24	; 0x07
     43c:	98 87       	std	Y+8, r25	; 0x08
     43e:	a9 87       	std	Y+9, r26	; 0x09
     440:	ba 87       	std	Y+10, r27	; 0x0a
     442:	20 e0       	ldi	r18, 0x00	; 0
     444:	30 e0       	ldi	r19, 0x00	; 0
     446:	4a ef       	ldi	r20, 0xFA	; 250

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     448:	54 e4       	ldi	r21, 0x44	; 68
     44a:	6f 81       	ldd	r22, Y+7	; 0x07
     44c:	78 85       	ldd	r23, Y+8	; 0x08
     44e:	89 85       	ldd	r24, Y+9	; 0x09
     450:	9a 85       	ldd	r25, Y+10	; 0x0a
     452:	0e 94 65 0d 	call	0x1aca	; 0x1aca <__mulsf3>
     456:	dc 01       	movw	r26, r24
     458:	cb 01       	movw	r24, r22
     45a:	8b 87       	std	Y+11, r24	; 0x0b
     45c:	9c 87       	std	Y+12, r25	; 0x0c
     45e:	ad 87       	std	Y+13, r26	; 0x0d
     460:	be 87       	std	Y+14, r27	; 0x0e
     462:	20 e0       	ldi	r18, 0x00	; 0
     464:	30 e0       	ldi	r19, 0x00	; 0
     466:	40 e8       	ldi	r20, 0x80	; 128
	if (__tmp < 1.0)
     468:	5f e3       	ldi	r21, 0x3F	; 63
     46a:	6b 85       	ldd	r22, Y+11	; 0x0b
     46c:	7c 85       	ldd	r23, Y+12	; 0x0c
     46e:	8d 85       	ldd	r24, Y+13	; 0x0d
     470:	9e 85       	ldd	r25, Y+14	; 0x0e
     472:	0e 94 12 0c 	call	0x1824	; 0x1824 <__cmpsf2>
     476:	88 23       	and	r24, r24
     478:	2c f4       	brge	.+10     	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
     47a:	81 e0       	ldi	r24, 0x01	; 1
     47c:	90 e0       	ldi	r25, 0x00	; 0
     47e:	98 8b       	std	Y+16, r25	; 0x10
		__ticks = 1;
     480:	8f 87       	std	Y+15, r24	; 0x0f
     482:	3f c0       	rjmp	.+126    	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
     484:	20 e0       	ldi	r18, 0x00	; 0
     486:	3f ef       	ldi	r19, 0xFF	; 255
     488:	4f e7       	ldi	r20, 0x7F	; 127
	else if (__tmp > 65535)
     48a:	57 e4       	ldi	r21, 0x47	; 71
     48c:	6b 85       	ldd	r22, Y+11	; 0x0b
     48e:	7c 85       	ldd	r23, Y+12	; 0x0c
     490:	8d 85       	ldd	r24, Y+13	; 0x0d
     492:	9e 85       	ldd	r25, Y+14	; 0x0e
     494:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <__gesf2>
     498:	18 16       	cp	r1, r24
     49a:	4c f5       	brge	.+82     	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
     49c:	20 e0       	ldi	r18, 0x00	; 0
     49e:	30 e0       	ldi	r19, 0x00	; 0
     4a0:	40 e2       	ldi	r20, 0x20	; 32
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     4a2:	51 e4       	ldi	r21, 0x41	; 65
     4a4:	6f 81       	ldd	r22, Y+7	; 0x07
     4a6:	78 85       	ldd	r23, Y+8	; 0x08
     4a8:	89 85       	ldd	r24, Y+9	; 0x09
     4aa:	9a 85       	ldd	r25, Y+10	; 0x0a
     4ac:	0e 94 65 0d 	call	0x1aca	; 0x1aca <__mulsf3>
     4b0:	dc 01       	movw	r26, r24
     4b2:	cb 01       	movw	r24, r22
     4b4:	bc 01       	movw	r22, r24
     4b6:	cd 01       	movw	r24, r26
     4b8:	0e 94 83 0c 	call	0x1906	; 0x1906 <__fixunssfsi>
     4bc:	dc 01       	movw	r26, r24
     4be:	cb 01       	movw	r24, r22
     4c0:	98 8b       	std	Y+16, r25	; 0x10
     4c2:	8f 87       	std	Y+15, r24	; 0x0f
     4c4:	0f c0       	rjmp	.+30     	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
     4c6:	88 ec       	ldi	r24, 0xC8	; 200
     4c8:	90 e0       	ldi	r25, 0x00	; 0
     4ca:	9a 8b       	std	Y+18, r25	; 0x12
     4cc:	89 8b       	std	Y+17, r24	; 0x11
     4ce:	89 89       	ldd	r24, Y+17	; 0x11
     4d0:	9a 89       	ldd	r25, Y+18	; 0x12
     4d2:	01 97       	sbiw	r24, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     4d4:	f1 f7       	brne	.-4      	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
     4d6:	9a 8b       	std	Y+18, r25	; 0x12
     4d8:	89 8b       	std	Y+17, r24	; 0x11
     4da:	8f 85       	ldd	r24, Y+15	; 0x0f
     4dc:	98 89       	ldd	r25, Y+16	; 0x10
     4de:	01 97       	sbiw	r24, 0x01	; 1
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4e0:	98 8b       	std	Y+16, r25	; 0x10
     4e2:	8f 87       	std	Y+15, r24	; 0x0f
     4e4:	8f 85       	ldd	r24, Y+15	; 0x0f
     4e6:	98 89       	ldd	r25, Y+16	; 0x10
     4e8:	89 2b       	or	r24, r25
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4ea:	69 f7       	brne	.-38     	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
     4ec:	14 c0       	rjmp	.+40     	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
     4ee:	6b 85       	ldd	r22, Y+11	; 0x0b
     4f0:	7c 85       	ldd	r23, Y+12	; 0x0c
     4f2:	8d 85       	ldd	r24, Y+13	; 0x0d
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     4f4:	9e 85       	ldd	r25, Y+14	; 0x0e
     4f6:	0e 94 83 0c 	call	0x1906	; 0x1906 <__fixunssfsi>
     4fa:	dc 01       	movw	r26, r24
     4fc:	cb 01       	movw	r24, r22
     4fe:	98 8b       	std	Y+16, r25	; 0x10
     500:	8f 87       	std	Y+15, r24	; 0x0f
     502:	8f 85       	ldd	r24, Y+15	; 0x0f
     504:	98 89       	ldd	r25, Y+16	; 0x10
     506:	9c 8b       	std	Y+20, r25	; 0x14
     508:	8b 8b       	std	Y+19, r24	; 0x13
     50a:	8b 89       	ldd	r24, Y+19	; 0x13
     50c:	9c 89       	ldd	r25, Y+20	; 0x14
     50e:	01 97       	sbiw	r24, 0x01	; 1
     510:	f1 f7       	brne	.-4      	; 0x50e <__LOCK_REGION_LENGTH__+0x10e>
     512:	9c 8b       	std	Y+20, r25	; 0x14
     514:	8b 8b       	std	Y+19, r24	; 0x13
     516:	61 e0       	ldi	r22, 0x01	; 1
     518:	70 e0       	ldi	r23, 0x00	; 0
			{
				_delay_ms(1);
				GetRotation(0, 1);
     51a:	80 e0       	ldi	r24, 0x00	; 0
     51c:	90 e0       	ldi	r25, 0x00	; 0
     51e:	b4 d1       	rcall	.+872    	; 0x888 <GetRotation>
     520:	90 91 14 07 	lds	r25, 0x0714	; 0x800714 <rotation>
     524:	80 91 15 07 	lds	r24, 0x0715	; 0x800715 <lastRotation>
				if (rotation != lastRotation)
     528:	98 17       	cp	r25, r24
     52a:	21 f0       	breq	.+8      	; 0x534 <__LOCK_REGION_LENGTH__+0x134>
     52c:	80 91 14 07 	lds	r24, 0x0714	; 0x800714 <rotation>
     530:	80 93 16 07 	sts	0x0716, r24	; 0x800716 <nextRotation>
				{
					nextRotation = rotation;
     534:	89 81       	ldd	r24, Y+1	; 0x01
     536:	9a 81       	ldd	r25, Y+2	; 0x02
     538:	01 96       	adiw	r24, 0x01	; 1
	while (1)
	{
		if (lost == 0)
		{
			
			for (int i = 0; i < 5; i++)
     53a:	9a 83       	std	Y+2, r25	; 0x02
     53c:	89 83       	std	Y+1, r24	; 0x01
     53e:	89 81       	ldd	r24, Y+1	; 0x01
     540:	9a 81       	ldd	r25, Y+2	; 0x02
     542:	05 97       	sbiw	r24, 0x05	; 5
     544:	0c f4       	brge	.+2      	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
     546:	75 cf       	rjmp	.-278    	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
     548:	80 91 14 07 	lds	r24, 0x0714	; 0x800714 <rotation>
     54c:	88 2f       	mov	r24, r24
				{
					nextRotation = rotation;
				}
			}
			
			if (((rotation + 2) % 4) == lastRotation)
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	02 96       	adiw	r24, 0x02	; 2
     552:	83 70       	andi	r24, 0x03	; 3
     554:	90 78       	andi	r25, 0x80	; 128
     556:	99 23       	and	r25, r25
     558:	24 f4       	brge	.+8      	; 0x562 <__LOCK_REGION_LENGTH__+0x162>
     55a:	01 97       	sbiw	r24, 0x01	; 1
     55c:	8c 6f       	ori	r24, 0xFC	; 252
     55e:	9f 6f       	ori	r25, 0xFF	; 255
     560:	01 96       	adiw	r24, 0x01	; 1
     562:	9c 01       	movw	r18, r24
     564:	80 91 15 07 	lds	r24, 0x0715	; 0x800715 <lastRotation>
     568:	88 2f       	mov	r24, r24
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	28 17       	cp	r18, r24
     56e:	39 07       	cpc	r19, r25
     570:	21 f4       	brne	.+8      	; 0x57a <__LOCK_REGION_LENGTH__+0x17a>
     572:	80 91 15 07 	lds	r24, 0x0715	; 0x800715 <lastRotation>
     576:	80 93 14 07 	sts	0x0714, r24	; 0x800714 <rotation>
			{
				rotation = lastRotation;
     57a:	80 91 14 07 	lds	r24, 0x0714	; 0x800714 <rotation>
			}
			lastRotation = rotation;
     57e:	80 93 15 07 	sts	0x0715, r24	; 0x800715 <lastRotation>
     582:	ec d1       	rcall	.+984    	; 0x95c <Update>
			Update();
     584:	2d d3       	rcall	.+1626   	; 0xbe0 <Draw>
     586:	4d cf       	rjmp	.-358    	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
			Draw();
     588:	80 e0       	ldi	r24, 0x00	; 0
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	a8 ec       	ldi	r26, 0xC8	; 200
     58e:	b2 e4       	ldi	r27, 0x42	; 66
     590:	8b 83       	std	Y+3, r24	; 0x03
     592:	9c 83       	std	Y+4, r25	; 0x04
     594:	ad 83       	std	Y+5, r26	; 0x05
     596:	be 83       	std	Y+6, r27	; 0x06
     598:	20 e0       	ldi	r18, 0x00	; 0
     59a:	30 e0       	ldi	r19, 0x00	; 0
     59c:	4a ef       	ldi	r20, 0xFA	; 250

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     59e:	54 e4       	ldi	r21, 0x44	; 68
     5a0:	6b 81       	ldd	r22, Y+3	; 0x03
     5a2:	7c 81       	ldd	r23, Y+4	; 0x04
     5a4:	8d 81       	ldd	r24, Y+5	; 0x05
     5a6:	9e 81       	ldd	r25, Y+6	; 0x06
     5a8:	0e 94 65 0d 	call	0x1aca	; 0x1aca <__mulsf3>
     5ac:	dc 01       	movw	r26, r24
     5ae:	cb 01       	movw	r24, r22
     5b0:	8d 8b       	std	Y+21, r24	; 0x15
     5b2:	9e 8b       	std	Y+22, r25	; 0x16
     5b4:	af 8b       	std	Y+23, r26	; 0x17
     5b6:	b8 8f       	std	Y+24, r27	; 0x18
     5b8:	20 e0       	ldi	r18, 0x00	; 0
     5ba:	30 e0       	ldi	r19, 0x00	; 0
     5bc:	40 e8       	ldi	r20, 0x80	; 128
	if (__tmp < 1.0)
     5be:	5f e3       	ldi	r21, 0x3F	; 63
     5c0:	6d 89       	ldd	r22, Y+21	; 0x15
     5c2:	7e 89       	ldd	r23, Y+22	; 0x16
     5c4:	8f 89       	ldd	r24, Y+23	; 0x17
     5c6:	98 8d       	ldd	r25, Y+24	; 0x18
     5c8:	0e 94 12 0c 	call	0x1824	; 0x1824 <__cmpsf2>
     5cc:	88 23       	and	r24, r24
     5ce:	2c f4       	brge	.+10     	; 0x5da <__LOCK_REGION_LENGTH__+0x1da>
     5d0:	81 e0       	ldi	r24, 0x01	; 1
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	9a 8f       	std	Y+26, r25	; 0x1a
		__ticks = 1;
     5d6:	89 8f       	std	Y+25, r24	; 0x19
     5d8:	3f c0       	rjmp	.+126    	; 0x658 <__LOCK_REGION_LENGTH__+0x258>
     5da:	20 e0       	ldi	r18, 0x00	; 0
     5dc:	3f ef       	ldi	r19, 0xFF	; 255
     5de:	4f e7       	ldi	r20, 0x7F	; 127
	else if (__tmp > 65535)
     5e0:	57 e4       	ldi	r21, 0x47	; 71
     5e2:	6d 89       	ldd	r22, Y+21	; 0x15
     5e4:	7e 89       	ldd	r23, Y+22	; 0x16
     5e6:	8f 89       	ldd	r24, Y+23	; 0x17
     5e8:	98 8d       	ldd	r25, Y+24	; 0x18
     5ea:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <__gesf2>
     5ee:	18 16       	cp	r1, r24
     5f0:	4c f5       	brge	.+82     	; 0x644 <__LOCK_REGION_LENGTH__+0x244>
     5f2:	20 e0       	ldi	r18, 0x00	; 0
     5f4:	30 e0       	ldi	r19, 0x00	; 0
     5f6:	40 e2       	ldi	r20, 0x20	; 32
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     5f8:	51 e4       	ldi	r21, 0x41	; 65
     5fa:	6b 81       	ldd	r22, Y+3	; 0x03
     5fc:	7c 81       	ldd	r23, Y+4	; 0x04
     5fe:	8d 81       	ldd	r24, Y+5	; 0x05
     600:	9e 81       	ldd	r25, Y+6	; 0x06
     602:	0e 94 65 0d 	call	0x1aca	; 0x1aca <__mulsf3>
     606:	dc 01       	movw	r26, r24
     608:	cb 01       	movw	r24, r22
     60a:	bc 01       	movw	r22, r24
     60c:	cd 01       	movw	r24, r26
     60e:	0e 94 83 0c 	call	0x1906	; 0x1906 <__fixunssfsi>
     612:	dc 01       	movw	r26, r24
     614:	cb 01       	movw	r24, r22
     616:	9a 8f       	std	Y+26, r25	; 0x1a
     618:	89 8f       	std	Y+25, r24	; 0x19
     61a:	0f c0       	rjmp	.+30     	; 0x63a <__LOCK_REGION_LENGTH__+0x23a>
     61c:	88 ec       	ldi	r24, 0xC8	; 200
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	9c 8f       	std	Y+28, r25	; 0x1c
     622:	8b 8f       	std	Y+27, r24	; 0x1b
     624:	8b 8d       	ldd	r24, Y+27	; 0x1b
     626:	9c 8d       	ldd	r25, Y+28	; 0x1c
     628:	01 97       	sbiw	r24, 0x01	; 1
     62a:	f1 f7       	brne	.-4      	; 0x628 <__LOCK_REGION_LENGTH__+0x228>
     62c:	9c 8f       	std	Y+28, r25	; 0x1c
     62e:	8b 8f       	std	Y+27, r24	; 0x1b
     630:	89 8d       	ldd	r24, Y+25	; 0x19
     632:	9a 8d       	ldd	r25, Y+26	; 0x1a
     634:	01 97       	sbiw	r24, 0x01	; 1
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     636:	9a 8f       	std	Y+26, r25	; 0x1a
     638:	89 8f       	std	Y+25, r24	; 0x19
     63a:	89 8d       	ldd	r24, Y+25	; 0x19
     63c:	9a 8d       	ldd	r25, Y+26	; 0x1a
     63e:	89 2b       	or	r24, r25
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     640:	69 f7       	brne	.-38     	; 0x61c <__LOCK_REGION_LENGTH__+0x21c>
     642:	14 c0       	rjmp	.+40     	; 0x66c <__LOCK_REGION_LENGTH__+0x26c>
     644:	6d 89       	ldd	r22, Y+21	; 0x15
     646:	7e 89       	ldd	r23, Y+22	; 0x16
     648:	8f 89       	ldd	r24, Y+23	; 0x17
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     64a:	98 8d       	ldd	r25, Y+24	; 0x18
     64c:	0e 94 83 0c 	call	0x1906	; 0x1906 <__fixunssfsi>
     650:	dc 01       	movw	r26, r24
     652:	cb 01       	movw	r24, r22
     654:	9a 8f       	std	Y+26, r25	; 0x1a
     656:	89 8f       	std	Y+25, r24	; 0x19
     658:	89 8d       	ldd	r24, Y+25	; 0x19
     65a:	9a 8d       	ldd	r25, Y+26	; 0x1a
     65c:	9e 8f       	std	Y+30, r25	; 0x1e
     65e:	8d 8f       	std	Y+29, r24	; 0x1d
     660:	8d 8d       	ldd	r24, Y+29	; 0x1d
     662:	9e 8d       	ldd	r25, Y+30	; 0x1e
     664:	01 97       	sbiw	r24, 0x01	; 1
     666:	f1 f7       	brne	.-4      	; 0x664 <__LOCK_REGION_LENGTH__+0x264>
     668:	9e 8f       	std	Y+30, r25	; 0x1e
     66a:	8d 8f       	std	Y+29, r24	; 0x1d
     66c:	b9 d2       	rcall	.+1394   	; 0xbe0 <Draw>
     66e:	d9 ce       	rjmp	.-590    	; 0x422 <__LOCK_REGION_LENGTH__+0x22>

00000670 <SnakeInit>:
		}
		else
		{
			_delay_ms(100);
			Draw();
     670:	cf 93       	push	r28
     672:	df 93       	push	r29
		}
	}
     674:	00 d0       	rcall	.+0      	; 0x676 <SnakeInit+0x6>
}

void SnakeInit()
{
     676:	cd b7       	in	r28, 0x3d	; 61
     678:	de b7       	in	r29, 0x3e	; 62
	for (int i = 0; i < 3; i++)
     67a:	1a 82       	std	Y+2, r1	; 0x02
     67c:	19 82       	std	Y+1, r1	; 0x01
     67e:	26 c0       	rjmp	.+76     	; 0x6cc <SnakeInit+0x5c>
	{
		game[posX - i][posY] = ttl - i;
     680:	80 91 ad 06 	lds	r24, 0x06AD	; 0x8006ad <posX>
     684:	28 2f       	mov	r18, r24
     686:	30 e0       	ldi	r19, 0x00	; 0
     688:	89 81       	ldd	r24, Y+1	; 0x01
     68a:	9a 81       	ldd	r25, Y+2	; 0x02
     68c:	28 1b       	sub	r18, r24
     68e:	39 0b       	sbc	r19, r25
     690:	80 91 ae 06 	lds	r24, 0x06AE	; 0x8006ae <posY>
     694:	88 2f       	mov	r24, r24
     696:	90 e0       	ldi	r25, 0x00	; 0
     698:	40 91 af 06 	lds	r20, 0x06AF	; 0x8006af <ttl>
     69c:	50 91 b0 06 	lds	r21, 0x06B0	; 0x8006b0 <ttl+0x1>
     6a0:	54 2f       	mov	r21, r20
     6a2:	49 81       	ldd	r20, Y+1	; 0x01
     6a4:	65 2f       	mov	r22, r21
     6a6:	64 1b       	sub	r22, r20
     6a8:	46 2f       	mov	r20, r22
     6aa:	22 95       	swap	r18
     6ac:	32 95       	swap	r19
     6ae:	30 7f       	andi	r19, 0xF0	; 240
     6b0:	32 27       	eor	r19, r18
     6b2:	20 7f       	andi	r18, 0xF0	; 240
     6b4:	32 27       	eor	r19, r18
     6b6:	82 0f       	add	r24, r18
     6b8:	93 1f       	adc	r25, r19
     6ba:	87 5e       	subi	r24, 0xE7	; 231
     6bc:	98 4f       	sbci	r25, 0xF8	; 248
     6be:	fc 01       	movw	r30, r24
     6c0:	40 83       	st	Z, r20
	}
}

void SnakeInit()
{
	for (int i = 0; i < 3; i++)
     6c2:	89 81       	ldd	r24, Y+1	; 0x01
     6c4:	9a 81       	ldd	r25, Y+2	; 0x02
     6c6:	01 96       	adiw	r24, 0x01	; 1
     6c8:	9a 83       	std	Y+2, r25	; 0x02
     6ca:	89 83       	std	Y+1, r24	; 0x01
     6cc:	89 81       	ldd	r24, Y+1	; 0x01
     6ce:	9a 81       	ldd	r25, Y+2	; 0x02
     6d0:	03 97       	sbiw	r24, 0x03	; 3
     6d2:	b4 f2       	brlt	.-84     	; 0x680 <SnakeInit+0x10>
	{
		game[posX - i][posY] = ttl - i;
	}
}
     6d4:	00 00       	nop
     6d6:	0f 90       	pop	r0
     6d8:	0f 90       	pop	r0
     6da:	df 91       	pop	r29
     6dc:	cf 91       	pop	r28
     6de:	08 95       	ret

000006e0 <AddPart>:

void AddPart()
{
     6e0:	cf 93       	push	r28
     6e2:	df 93       	push	r29
     6e4:	00 d0       	rcall	.+0      	; 0x6e6 <AddPart+0x6>
     6e6:	00 d0       	rcall	.+0      	; 0x6e8 <AddPart+0x8>
     6e8:	cd b7       	in	r28, 0x3d	; 61
     6ea:	de b7       	in	r29, 0x3e	; 62
	for (int i = 0; i < 16; i++)
     6ec:	1a 82       	std	Y+2, r1	; 0x02
     6ee:	19 82       	std	Y+1, r1	; 0x01
     6f0:	35 c0       	rjmp	.+106    	; 0x75c <AddPart+0x7c>
	{
		for (int j = 0; j < 16; j++)
     6f2:	1c 82       	std	Y+4, r1	; 0x04
     6f4:	1b 82       	std	Y+3, r1	; 0x03
     6f6:	29 c0       	rjmp	.+82     	; 0x74a <AddPart+0x6a>
		{
			game[i][j]++;
     6f8:	89 81       	ldd	r24, Y+1	; 0x01
     6fa:	9a 81       	ldd	r25, Y+2	; 0x02
     6fc:	9c 01       	movw	r18, r24
     6fe:	22 95       	swap	r18
     700:	32 95       	swap	r19
     702:	30 7f       	andi	r19, 0xF0	; 240
     704:	32 27       	eor	r19, r18
     706:	20 7f       	andi	r18, 0xF0	; 240
     708:	32 27       	eor	r19, r18
     70a:	8b 81       	ldd	r24, Y+3	; 0x03
     70c:	9c 81       	ldd	r25, Y+4	; 0x04
     70e:	82 0f       	add	r24, r18
     710:	93 1f       	adc	r25, r19
     712:	87 5e       	subi	r24, 0xE7	; 231
     714:	98 4f       	sbci	r25, 0xF8	; 248
     716:	fc 01       	movw	r30, r24
     718:	80 81       	ld	r24, Z
     71a:	41 e0       	ldi	r20, 0x01	; 1
     71c:	48 0f       	add	r20, r24
     71e:	89 81       	ldd	r24, Y+1	; 0x01
     720:	9a 81       	ldd	r25, Y+2	; 0x02
     722:	9c 01       	movw	r18, r24
     724:	22 95       	swap	r18
     726:	32 95       	swap	r19
     728:	30 7f       	andi	r19, 0xF0	; 240
     72a:	32 27       	eor	r19, r18
     72c:	20 7f       	andi	r18, 0xF0	; 240
     72e:	32 27       	eor	r19, r18
     730:	8b 81       	ldd	r24, Y+3	; 0x03
     732:	9c 81       	ldd	r25, Y+4	; 0x04
     734:	82 0f       	add	r24, r18
     736:	93 1f       	adc	r25, r19
     738:	87 5e       	subi	r24, 0xE7	; 231
     73a:	98 4f       	sbci	r25, 0xF8	; 248
     73c:	fc 01       	movw	r30, r24
     73e:	40 83       	st	Z, r20

void AddPart()
{
	for (int i = 0; i < 16; i++)
	{
		for (int j = 0; j < 16; j++)
     740:	8b 81       	ldd	r24, Y+3	; 0x03
     742:	9c 81       	ldd	r25, Y+4	; 0x04
     744:	01 96       	adiw	r24, 0x01	; 1
     746:	9c 83       	std	Y+4, r25	; 0x04
     748:	8b 83       	std	Y+3, r24	; 0x03
     74a:	8b 81       	ldd	r24, Y+3	; 0x03
     74c:	9c 81       	ldd	r25, Y+4	; 0x04
     74e:	40 97       	sbiw	r24, 0x10	; 16
     750:	9c f2       	brlt	.-90     	; 0x6f8 <AddPart+0x18>
	}
}

void AddPart()
{
	for (int i = 0; i < 16; i++)
     752:	89 81       	ldd	r24, Y+1	; 0x01
     754:	9a 81       	ldd	r25, Y+2	; 0x02
     756:	01 96       	adiw	r24, 0x01	; 1
     758:	9a 83       	std	Y+2, r25	; 0x02
     75a:	89 83       	std	Y+1, r24	; 0x01
     75c:	89 81       	ldd	r24, Y+1	; 0x01
     75e:	9a 81       	ldd	r25, Y+2	; 0x02
     760:	40 97       	sbiw	r24, 0x10	; 16
     762:	3c f2       	brlt	.-114    	; 0x6f2 <AddPart+0x12>
		{
			game[i][j]++;
		}
	}
	
	ttl++;
     764:	80 91 af 06 	lds	r24, 0x06AF	; 0x8006af <ttl>
     768:	90 91 b0 06 	lds	r25, 0x06B0	; 0x8006b0 <ttl+0x1>
     76c:	01 96       	adiw	r24, 0x01	; 1
     76e:	90 93 b0 06 	sts	0x06B0, r25	; 0x8006b0 <ttl+0x1>
     772:	80 93 af 06 	sts	0x06AF, r24	; 0x8006af <ttl>
	
	points++;
     776:	80 91 17 07 	lds	r24, 0x0717	; 0x800717 <points>
     77a:	90 91 18 07 	lds	r25, 0x0718	; 0x800718 <points+0x1>
     77e:	01 96       	adiw	r24, 0x01	; 1
     780:	90 93 18 07 	sts	0x0718, r25	; 0x800718 <points+0x1>
     784:	80 93 17 07 	sts	0x0717, r24	; 0x800717 <points>
	UpdateScore();
     788:	10 d3       	rcall	.+1568   	; 0xdaa <UpdateScore>
}
     78a:	00 00       	nop
     78c:	0f 90       	pop	r0
     78e:	0f 90       	pop	r0
     790:	0f 90       	pop	r0
     792:	0f 90       	pop	r0
     794:	df 91       	pop	r29
     796:	cf 91       	pop	r28
     798:	08 95       	ret

0000079a <AddFood>:

void AddFood()
{
     79a:	cf 93       	push	r28
     79c:	df 93       	push	r29
     79e:	00 d0       	rcall	.+0      	; 0x7a0 <AddFood+0x6>
     7a0:	cd b7       	in	r28, 0x3d	; 61
     7a2:	de b7       	in	r29, 0x3e	; 62
	char xSpawn = random() % 16;
     7a4:	0e 94 0a 10 	call	0x2014	; 0x2014 <random>
     7a8:	dc 01       	movw	r26, r24
     7aa:	cb 01       	movw	r24, r22
     7ac:	8f 70       	andi	r24, 0x0F	; 15
     7ae:	99 27       	eor	r25, r25
     7b0:	aa 27       	eor	r26, r26
     7b2:	b0 78       	andi	r27, 0x80	; 128
     7b4:	bb 23       	and	r27, r27
     7b6:	54 f4       	brge	.+20     	; 0x7cc <AddFood+0x32>
     7b8:	01 97       	sbiw	r24, 0x01	; 1
     7ba:	a1 09       	sbc	r26, r1
     7bc:	b1 09       	sbc	r27, r1
     7be:	80 6f       	ori	r24, 0xF0	; 240
     7c0:	9f 6f       	ori	r25, 0xFF	; 255
     7c2:	af 6f       	ori	r26, 0xFF	; 255
     7c4:	bf 6f       	ori	r27, 0xFF	; 255
     7c6:	01 96       	adiw	r24, 0x01	; 1
     7c8:	a1 1d       	adc	r26, r1
     7ca:	b1 1d       	adc	r27, r1
     7cc:	89 83       	std	Y+1, r24	; 0x01
	char ySpawn = random() % 16;
     7ce:	0e 94 0a 10 	call	0x2014	; 0x2014 <random>
     7d2:	dc 01       	movw	r26, r24
     7d4:	cb 01       	movw	r24, r22
     7d6:	8f 70       	andi	r24, 0x0F	; 15
     7d8:	99 27       	eor	r25, r25
     7da:	aa 27       	eor	r26, r26
     7dc:	b0 78       	andi	r27, 0x80	; 128
     7de:	bb 23       	and	r27, r27
     7e0:	54 f4       	brge	.+20     	; 0x7f6 <AddFood+0x5c>
     7e2:	01 97       	sbiw	r24, 0x01	; 1
     7e4:	a1 09       	sbc	r26, r1
     7e6:	b1 09       	sbc	r27, r1
     7e8:	80 6f       	ori	r24, 0xF0	; 240
     7ea:	9f 6f       	ori	r25, 0xFF	; 255
     7ec:	af 6f       	ori	r26, 0xFF	; 255
     7ee:	bf 6f       	ori	r27, 0xFF	; 255
     7f0:	01 96       	adiw	r24, 0x01	; 1
     7f2:	a1 1d       	adc	r26, r1
     7f4:	b1 1d       	adc	r27, r1
     7f6:	8a 83       	std	Y+2, r24	; 0x02
	game[xSpawn][ySpawn] = 241;
     7f8:	89 81       	ldd	r24, Y+1	; 0x01
     7fa:	28 2f       	mov	r18, r24
     7fc:	30 e0       	ldi	r19, 0x00	; 0
     7fe:	8a 81       	ldd	r24, Y+2	; 0x02
     800:	88 2f       	mov	r24, r24
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	22 95       	swap	r18
     806:	32 95       	swap	r19
     808:	30 7f       	andi	r19, 0xF0	; 240
     80a:	32 27       	eor	r19, r18
     80c:	20 7f       	andi	r18, 0xF0	; 240
     80e:	32 27       	eor	r19, r18
     810:	82 0f       	add	r24, r18
     812:	93 1f       	adc	r25, r19
     814:	87 5e       	subi	r24, 0xE7	; 231
     816:	98 4f       	sbci	r25, 0xF8	; 248
     818:	21 ef       	ldi	r18, 0xF1	; 241
     81a:	fc 01       	movw	r30, r24
     81c:	20 83       	st	Z, r18
}
     81e:	00 00       	nop
     820:	0f 90       	pop	r0
     822:	0f 90       	pop	r0
     824:	df 91       	pop	r29
     826:	cf 91       	pop	r28
     828:	08 95       	ret

0000082a <ADCRead>:

uint16_t ADCRead(uint8_t direction)
{
     82a:	cf 93       	push	r28
     82c:	df 93       	push	r29
     82e:	1f 92       	push	r1
     830:	cd b7       	in	r28, 0x3d	; 61
     832:	de b7       	in	r29, 0x3e	; 62
     834:	89 83       	std	Y+1, r24	; 0x01
	ADMUX = (ADMUX & 0b11111000) | direction;
     836:	8c e7       	ldi	r24, 0x7C	; 124
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	2c e7       	ldi	r18, 0x7C	; 124
     83c:	30 e0       	ldi	r19, 0x00	; 0
     83e:	f9 01       	movw	r30, r18
     840:	20 81       	ld	r18, Z
     842:	32 2f       	mov	r19, r18
     844:	38 7f       	andi	r19, 0xF8	; 248
     846:	29 81       	ldd	r18, Y+1	; 0x01
     848:	23 2b       	or	r18, r19
     84a:	fc 01       	movw	r30, r24
     84c:	20 83       	st	Z, r18
	
	ADCSRA |= 1 << ADSC;
     84e:	8a e7       	ldi	r24, 0x7A	; 122
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	2a e7       	ldi	r18, 0x7A	; 122
     854:	30 e0       	ldi	r19, 0x00	; 0
     856:	f9 01       	movw	r30, r18
     858:	20 81       	ld	r18, Z
     85a:	20 64       	ori	r18, 0x40	; 64
     85c:	fc 01       	movw	r30, r24
     85e:	20 83       	st	Z, r18
	while (ADCSRA & (1 << ADSC))
     860:	00 00       	nop
     862:	8a e7       	ldi	r24, 0x7A	; 122
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	fc 01       	movw	r30, r24
     868:	80 81       	ld	r24, Z
     86a:	88 2f       	mov	r24, r24
     86c:	90 e0       	ldi	r25, 0x00	; 0
     86e:	80 74       	andi	r24, 0x40	; 64
     870:	99 27       	eor	r25, r25
     872:	89 2b       	or	r24, r25
     874:	b1 f7       	brne	.-20     	; 0x862 <ADCRead+0x38>
	{}
	return ADC;
     876:	88 e7       	ldi	r24, 0x78	; 120
     878:	90 e0       	ldi	r25, 0x00	; 0
     87a:	fc 01       	movw	r30, r24
     87c:	80 81       	ld	r24, Z
     87e:	91 81       	ldd	r25, Z+1	; 0x01
}
     880:	0f 90       	pop	r0
     882:	df 91       	pop	r29
     884:	cf 91       	pop	r28
     886:	08 95       	ret

00000888 <GetRotation>:

void GetRotation(int x, int y)
{
     888:	cf 93       	push	r28
     88a:	df 93       	push	r29
     88c:	cd b7       	in	r28, 0x3d	; 61
     88e:	de b7       	in	r29, 0x3e	; 62
     890:	28 97       	sbiw	r28, 0x08	; 8
     892:	0f b6       	in	r0, 0x3f	; 63
     894:	f8 94       	cli
     896:	de bf       	out	0x3e, r29	; 62
     898:	0f be       	out	0x3f, r0	; 63
     89a:	cd bf       	out	0x3d, r28	; 61
     89c:	9e 83       	std	Y+6, r25	; 0x06
     89e:	8d 83       	std	Y+5, r24	; 0x05
     8a0:	78 87       	std	Y+8, r23	; 0x08
     8a2:	6f 83       	std	Y+7, r22	; 0x07
	int currentX = ADCRead(x);
     8a4:	8d 81       	ldd	r24, Y+5	; 0x05
     8a6:	c1 df       	rcall	.-126    	; 0x82a <ADCRead>
     8a8:	9a 83       	std	Y+2, r25	; 0x02
     8aa:	89 83       	std	Y+1, r24	; 0x01
	int currentY = ADCRead(y);
     8ac:	8f 81       	ldd	r24, Y+7	; 0x07
     8ae:	bd df       	rcall	.-134    	; 0x82a <ADCRead>
     8b0:	9c 83       	std	Y+4, r25	; 0x04
     8b2:	8b 83       	std	Y+3, r24	; 0x03
	
	if (currentX > joystickX + jsDeadZoneX)
     8b4:	20 91 b3 06 	lds	r18, 0x06B3	; 0x8006b3 <joystickX>
     8b8:	30 91 b4 06 	lds	r19, 0x06B4	; 0x8006b4 <joystickX+0x1>
     8bc:	80 91 b7 06 	lds	r24, 0x06B7	; 0x8006b7 <jsDeadZoneX>
     8c0:	90 91 b8 06 	lds	r25, 0x06B8	; 0x8006b8 <jsDeadZoneX+0x1>
     8c4:	28 0f       	add	r18, r24
     8c6:	39 1f       	adc	r19, r25
     8c8:	89 81       	ldd	r24, Y+1	; 0x01
     8ca:	9a 81       	ldd	r25, Y+2	; 0x02
     8cc:	28 17       	cp	r18, r24
     8ce:	39 07       	cpc	r19, r25
     8d0:	24 f4       	brge	.+8      	; 0x8da <GetRotation+0x52>
	{
		rotation = 3;
     8d2:	83 e0       	ldi	r24, 0x03	; 3
     8d4:	80 93 14 07 	sts	0x0714, r24	; 0x800714 <rotation>
	}
	else if (currentY > joystickY + jsDeadZoneY)
	{
		rotation = 2;
	}
}
     8d8:	37 c0       	rjmp	.+110    	; 0x948 <GetRotation+0xc0>
	
	if (currentX > joystickX + jsDeadZoneX)
	{
		rotation = 3;
	}
	else if (currentY < joystickX - jsDeadZoneX)
     8da:	20 91 b3 06 	lds	r18, 0x06B3	; 0x8006b3 <joystickX>
     8de:	30 91 b4 06 	lds	r19, 0x06B4	; 0x8006b4 <joystickX+0x1>
     8e2:	80 91 b7 06 	lds	r24, 0x06B7	; 0x8006b7 <jsDeadZoneX>
     8e6:	90 91 b8 06 	lds	r25, 0x06B8	; 0x8006b8 <jsDeadZoneX+0x1>
     8ea:	28 1b       	sub	r18, r24
     8ec:	39 0b       	sbc	r19, r25
     8ee:	8b 81       	ldd	r24, Y+3	; 0x03
     8f0:	9c 81       	ldd	r25, Y+4	; 0x04
     8f2:	82 17       	cp	r24, r18
     8f4:	93 07       	cpc	r25, r19
     8f6:	1c f4       	brge	.+6      	; 0x8fe <GetRotation+0x76>
	{
		rotation = 0;
     8f8:	10 92 14 07 	sts	0x0714, r1	; 0x800714 <rotation>
	}
	else if (currentY > joystickY + jsDeadZoneY)
	{
		rotation = 2;
	}
}
     8fc:	25 c0       	rjmp	.+74     	; 0x948 <GetRotation+0xc0>
	}
	else if (currentY < joystickX - jsDeadZoneX)
	{
		rotation = 0;
	}
	else if (currentX < joystickY - jsDeadZoneY)
     8fe:	20 91 b1 06 	lds	r18, 0x06B1	; 0x8006b1 <joystickY>
     902:	30 91 b2 06 	lds	r19, 0x06B2	; 0x8006b2 <joystickY+0x1>
     906:	80 91 b5 06 	lds	r24, 0x06B5	; 0x8006b5 <jsDeadZoneY>
     90a:	90 91 b6 06 	lds	r25, 0x06B6	; 0x8006b6 <jsDeadZoneY+0x1>
     90e:	28 1b       	sub	r18, r24
     910:	39 0b       	sbc	r19, r25
     912:	89 81       	ldd	r24, Y+1	; 0x01
     914:	9a 81       	ldd	r25, Y+2	; 0x02
     916:	82 17       	cp	r24, r18
     918:	93 07       	cpc	r25, r19
     91a:	24 f4       	brge	.+8      	; 0x924 <GetRotation+0x9c>
	{
		rotation = 1;
     91c:	81 e0       	ldi	r24, 0x01	; 1
     91e:	80 93 14 07 	sts	0x0714, r24	; 0x800714 <rotation>
	}
	else if (currentY > joystickY + jsDeadZoneY)
	{
		rotation = 2;
	}
}
     922:	12 c0       	rjmp	.+36     	; 0x948 <GetRotation+0xc0>
	}
	else if (currentX < joystickY - jsDeadZoneY)
	{
		rotation = 1;
	}
	else if (currentY > joystickY + jsDeadZoneY)
     924:	20 91 b1 06 	lds	r18, 0x06B1	; 0x8006b1 <joystickY>
     928:	30 91 b2 06 	lds	r19, 0x06B2	; 0x8006b2 <joystickY+0x1>
     92c:	80 91 b5 06 	lds	r24, 0x06B5	; 0x8006b5 <jsDeadZoneY>
     930:	90 91 b6 06 	lds	r25, 0x06B6	; 0x8006b6 <jsDeadZoneY+0x1>
     934:	28 0f       	add	r18, r24
     936:	39 1f       	adc	r19, r25
     938:	8b 81       	ldd	r24, Y+3	; 0x03
     93a:	9c 81       	ldd	r25, Y+4	; 0x04
     93c:	28 17       	cp	r18, r24
     93e:	39 07       	cpc	r19, r25
     940:	1c f4       	brge	.+6      	; 0x948 <GetRotation+0xc0>
	{
		rotation = 2;
     942:	82 e0       	ldi	r24, 0x02	; 2
     944:	80 93 14 07 	sts	0x0714, r24	; 0x800714 <rotation>
	}
}
     948:	00 00       	nop
     94a:	28 96       	adiw	r28, 0x08	; 8
     94c:	0f b6       	in	r0, 0x3f	; 63
     94e:	f8 94       	cli
     950:	de bf       	out	0x3e, r29	; 62
     952:	0f be       	out	0x3f, r0	; 63
     954:	cd bf       	out	0x3d, r28	; 61
     956:	df 91       	pop	r29
     958:	cf 91       	pop	r28
     95a:	08 95       	ret

0000095c <Update>:

void Update()
{	
     95c:	cf 93       	push	r28
     95e:	df 93       	push	r29
     960:	00 d0       	rcall	.+0      	; 0x962 <Update+0x6>
     962:	00 d0       	rcall	.+0      	; 0x964 <Update+0x8>
     964:	cd b7       	in	r28, 0x3d	; 61
     966:	de b7       	in	r29, 0x3e	; 62
	switch (rotation)
     968:	80 91 14 07 	lds	r24, 0x0714	; 0x800714 <rotation>
     96c:	88 2f       	mov	r24, r24
     96e:	90 e0       	ldi	r25, 0x00	; 0
     970:	81 30       	cpi	r24, 0x01	; 1
     972:	91 05       	cpc	r25, r1
     974:	91 f0       	breq	.+36     	; 0x99a <Update+0x3e>
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	91 05       	cpc	r25, r1
     97a:	1c f4       	brge	.+6      	; 0x982 <Update+0x26>
     97c:	89 2b       	or	r24, r25
     97e:	39 f0       	breq	.+14     	; 0x98e <Update+0x32>
     980:	1e c0       	rjmp	.+60     	; 0x9be <Update+0x62>
     982:	82 30       	cpi	r24, 0x02	; 2
     984:	91 05       	cpc	r25, r1
     986:	79 f0       	breq	.+30     	; 0x9a6 <Update+0x4a>
     988:	03 97       	sbiw	r24, 0x03	; 3
     98a:	99 f0       	breq	.+38     	; 0x9b2 <Update+0x56>
     98c:	18 c0       	rjmp	.+48     	; 0x9be <Update+0x62>
	{
		case 0:
			x = 1;
     98e:	81 e0       	ldi	r24, 0x01	; 1
     990:	80 93 ac 06 	sts	0x06AC, r24	; 0x8006ac <x>
			y = 0;
     994:	10 92 13 07 	sts	0x0713, r1	; 0x800713 <y>
		break;
     998:	18 c0       	rjmp	.+48     	; 0x9ca <Update+0x6e>
		case 1:
			x = 0;
     99a:	10 92 ac 06 	sts	0x06AC, r1	; 0x8006ac <x>
			y = 1;
     99e:	81 e0       	ldi	r24, 0x01	; 1
     9a0:	80 93 13 07 	sts	0x0713, r24	; 0x800713 <y>
		break;
     9a4:	12 c0       	rjmp	.+36     	; 0x9ca <Update+0x6e>
		case 2:
			x = -1;
     9a6:	8f ef       	ldi	r24, 0xFF	; 255
     9a8:	80 93 ac 06 	sts	0x06AC, r24	; 0x8006ac <x>
			y = 0;
     9ac:	10 92 13 07 	sts	0x0713, r1	; 0x800713 <y>
		break;
     9b0:	0c c0       	rjmp	.+24     	; 0x9ca <Update+0x6e>
		case 3:
			x = 0;
     9b2:	10 92 ac 06 	sts	0x06AC, r1	; 0x8006ac <x>
			y = -1;
     9b6:	8f ef       	ldi	r24, 0xFF	; 255
     9b8:	80 93 13 07 	sts	0x0713, r24	; 0x800713 <y>
		break;
     9bc:	06 c0       	rjmp	.+12     	; 0x9ca <Update+0x6e>
		default:
			x = 1;
     9be:	81 e0       	ldi	r24, 0x01	; 1
     9c0:	80 93 ac 06 	sts	0x06AC, r24	; 0x8006ac <x>
			y = 0;
     9c4:	10 92 13 07 	sts	0x0713, r1	; 0x800713 <y>
		break;
     9c8:	00 00       	nop
	}
	
	lastPosX = posX;
     9ca:	80 91 ad 06 	lds	r24, 0x06AD	; 0x8006ad <posX>
     9ce:	80 93 1a 08 	sts	0x081A, r24	; 0x80081a <lastPosX>
	lastPosY = posY;
     9d2:	80 91 ae 06 	lds	r24, 0x06AE	; 0x8006ae <posY>
     9d6:	80 93 19 08 	sts	0x0819, r24	; 0x800819 <lastPosY>
	posX += x;
     9da:	90 91 ad 06 	lds	r25, 0x06AD	; 0x8006ad <posX>
     9de:	80 91 ac 06 	lds	r24, 0x06AC	; 0x8006ac <x>
     9e2:	89 0f       	add	r24, r25
     9e4:	80 93 ad 06 	sts	0x06AD, r24	; 0x8006ad <posX>
	posY += y;
     9e8:	90 91 ae 06 	lds	r25, 0x06AE	; 0x8006ae <posY>
     9ec:	80 91 13 07 	lds	r24, 0x0713	; 0x800713 <y>
     9f0:	89 0f       	add	r24, r25
     9f2:	80 93 ae 06 	sts	0x06AE, r24	; 0x8006ae <posY>
	
	if (posX >= 16 || posX < 0 || posY >= 16 || posY < 0) //out of bounds
     9f6:	80 91 ad 06 	lds	r24, 0x06AD	; 0x8006ad <posX>
     9fa:	80 31       	cpi	r24, 0x10	; 16
     9fc:	20 f4       	brcc	.+8      	; 0xa06 <Update+0xaa>
     9fe:	80 91 ae 06 	lds	r24, 0x06AE	; 0x8006ae <posY>
     a02:	80 31       	cpi	r24, 0x10	; 16
     a04:	08 f0       	brcs	.+2      	; 0xa08 <Update+0xac>
	{
		GameOver();
     a06:	c3 d6       	rcall	.+3462   	; 0x178e <GameOver>
	}
	
	if (game[posX][posY] > 0 && game[posX][posY] <= ttl) //ran into self
     a08:	80 91 ad 06 	lds	r24, 0x06AD	; 0x8006ad <posX>
     a0c:	28 2f       	mov	r18, r24
     a0e:	30 e0       	ldi	r19, 0x00	; 0
     a10:	80 91 ae 06 	lds	r24, 0x06AE	; 0x8006ae <posY>
     a14:	88 2f       	mov	r24, r24
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	22 95       	swap	r18
     a1a:	32 95       	swap	r19
     a1c:	30 7f       	andi	r19, 0xF0	; 240
     a1e:	32 27       	eor	r19, r18
     a20:	20 7f       	andi	r18, 0xF0	; 240
     a22:	32 27       	eor	r19, r18
     a24:	82 0f       	add	r24, r18
     a26:	93 1f       	adc	r25, r19
     a28:	87 5e       	subi	r24, 0xE7	; 231
     a2a:	98 4f       	sbci	r25, 0xF8	; 248
     a2c:	fc 01       	movw	r30, r24
     a2e:	80 81       	ld	r24, Z
     a30:	88 23       	and	r24, r24
     a32:	f1 f0       	breq	.+60     	; 0xa70 <Update+0x114>
     a34:	80 91 ad 06 	lds	r24, 0x06AD	; 0x8006ad <posX>
     a38:	28 2f       	mov	r18, r24
     a3a:	30 e0       	ldi	r19, 0x00	; 0
     a3c:	80 91 ae 06 	lds	r24, 0x06AE	; 0x8006ae <posY>
     a40:	88 2f       	mov	r24, r24
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	22 95       	swap	r18
     a46:	32 95       	swap	r19
     a48:	30 7f       	andi	r19, 0xF0	; 240
     a4a:	32 27       	eor	r19, r18
     a4c:	20 7f       	andi	r18, 0xF0	; 240
     a4e:	32 27       	eor	r19, r18
     a50:	82 0f       	add	r24, r18
     a52:	93 1f       	adc	r25, r19
     a54:	87 5e       	subi	r24, 0xE7	; 231
     a56:	98 4f       	sbci	r25, 0xF8	; 248
     a58:	fc 01       	movw	r30, r24
     a5a:	80 81       	ld	r24, Z
     a5c:	28 2f       	mov	r18, r24
     a5e:	30 e0       	ldi	r19, 0x00	; 0
     a60:	80 91 af 06 	lds	r24, 0x06AF	; 0x8006af <ttl>
     a64:	90 91 b0 06 	lds	r25, 0x06B0	; 0x8006b0 <ttl+0x1>
     a68:	82 17       	cp	r24, r18
     a6a:	93 07       	cpc	r25, r19
	{
		GameOver();
     a6c:	0c f0       	brlt	.+2      	; 0xa70 <Update+0x114>
     a6e:	8f d6       	rcall	.+3358   	; 0x178e <GameOver>
	}
	
	
	if ((game[posX][posY] == 241))	//add food
     a70:	80 91 ad 06 	lds	r24, 0x06AD	; 0x8006ad <posX>
     a74:	28 2f       	mov	r18, r24
     a76:	30 e0       	ldi	r19, 0x00	; 0
     a78:	80 91 ae 06 	lds	r24, 0x06AE	; 0x8006ae <posY>
     a7c:	88 2f       	mov	r24, r24
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	22 95       	swap	r18
     a82:	32 95       	swap	r19
     a84:	30 7f       	andi	r19, 0xF0	; 240
     a86:	32 27       	eor	r19, r18
     a88:	20 7f       	andi	r18, 0xF0	; 240
     a8a:	32 27       	eor	r19, r18
     a8c:	82 0f       	add	r24, r18
     a8e:	93 1f       	adc	r25, r19
     a90:	87 5e       	subi	r24, 0xE7	; 231
     a92:	98 4f       	sbci	r25, 0xF8	; 248
     a94:	fc 01       	movw	r30, r24
     a96:	80 81       	ld	r24, Z
     a98:	81 3f       	cpi	r24, 0xF1	; 241
	{
		AddPart();
     a9a:	11 f4       	brne	.+4      	; 0xaa0 <Update+0x144>
     a9c:	21 de       	rcall	.-958    	; 0x6e0 <AddPart>
		AddFood();
     a9e:	7d de       	rcall	.-774    	; 0x79a <AddFood>
     aa0:	80 91 12 07 	lds	r24, 0x0712	; 0x800712 <lost>
	}
	if (lost == 0)
     aa4:	88 23       	and	r24, r24
     aa6:	09 f0       	breq	.+2      	; 0xaaa <Update+0x14e>
     aa8:	93 c0       	rjmp	.+294    	; 0xbd0 <Update+0x274>
     aaa:	1a 82       	std	Y+2, r1	; 0x02
	{
		for (int x = 0; x < 16; x++)
     aac:	19 82       	std	Y+1, r1	; 0x01
     aae:	8b c0       	rjmp	.+278    	; 0xbc6 <Update+0x26a>
     ab0:	1c 82       	std	Y+4, r1	; 0x04
		{
			for (int y = 0; y < 16; y++)
     ab2:	1b 82       	std	Y+3, r1	; 0x03
     ab4:	7e c0       	rjmp	.+252    	; 0xbb2 <Update+0x256>
     ab6:	89 81       	ldd	r24, Y+1	; 0x01
			{
				if ((game[x][y] > 0 && game[x][y] <= 240) )
     ab8:	9a 81       	ldd	r25, Y+2	; 0x02
     aba:	9c 01       	movw	r18, r24
     abc:	22 95       	swap	r18
     abe:	32 95       	swap	r19
     ac0:	30 7f       	andi	r19, 0xF0	; 240
     ac2:	32 27       	eor	r19, r18
     ac4:	20 7f       	andi	r18, 0xF0	; 240
     ac6:	32 27       	eor	r19, r18
     ac8:	8b 81       	ldd	r24, Y+3	; 0x03
     aca:	9c 81       	ldd	r25, Y+4	; 0x04
     acc:	82 0f       	add	r24, r18
     ace:	93 1f       	adc	r25, r19
     ad0:	87 5e       	subi	r24, 0xE7	; 231
     ad2:	98 4f       	sbci	r25, 0xF8	; 248
     ad4:	fc 01       	movw	r30, r24
     ad6:	80 81       	ld	r24, Z
     ad8:	88 23       	and	r24, r24
     ada:	b9 f1       	breq	.+110    	; 0xb4a <Update+0x1ee>
     adc:	89 81       	ldd	r24, Y+1	; 0x01
     ade:	9a 81       	ldd	r25, Y+2	; 0x02
     ae0:	9c 01       	movw	r18, r24
     ae2:	22 95       	swap	r18
     ae4:	32 95       	swap	r19
     ae6:	30 7f       	andi	r19, 0xF0	; 240
     ae8:	32 27       	eor	r19, r18
     aea:	20 7f       	andi	r18, 0xF0	; 240
     aec:	32 27       	eor	r19, r18
     aee:	8b 81       	ldd	r24, Y+3	; 0x03
     af0:	9c 81       	ldd	r25, Y+4	; 0x04
     af2:	82 0f       	add	r24, r18
     af4:	93 1f       	adc	r25, r19
     af6:	87 5e       	subi	r24, 0xE7	; 231
     af8:	98 4f       	sbci	r25, 0xF8	; 248
     afa:	fc 01       	movw	r30, r24
     afc:	80 81       	ld	r24, Z
     afe:	81 3f       	cpi	r24, 0xF1	; 241
     b00:	20 f5       	brcc	.+72     	; 0xb4a <Update+0x1ee>
     b02:	89 81       	ldd	r24, Y+1	; 0x01
				{
					game[x][y]--;
     b04:	9a 81       	ldd	r25, Y+2	; 0x02
     b06:	9c 01       	movw	r18, r24
     b08:	22 95       	swap	r18
     b0a:	32 95       	swap	r19
     b0c:	30 7f       	andi	r19, 0xF0	; 240
     b0e:	32 27       	eor	r19, r18
     b10:	20 7f       	andi	r18, 0xF0	; 240
     b12:	32 27       	eor	r19, r18
     b14:	8b 81       	ldd	r24, Y+3	; 0x03
     b16:	9c 81       	ldd	r25, Y+4	; 0x04
     b18:	82 0f       	add	r24, r18
     b1a:	93 1f       	adc	r25, r19
     b1c:	87 5e       	subi	r24, 0xE7	; 231
     b1e:	98 4f       	sbci	r25, 0xF8	; 248
     b20:	fc 01       	movw	r30, r24
     b22:	80 81       	ld	r24, Z
     b24:	4f ef       	ldi	r20, 0xFF	; 255
     b26:	48 0f       	add	r20, r24
     b28:	89 81       	ldd	r24, Y+1	; 0x01
     b2a:	9a 81       	ldd	r25, Y+2	; 0x02
     b2c:	9c 01       	movw	r18, r24
     b2e:	22 95       	swap	r18
     b30:	32 95       	swap	r19
     b32:	30 7f       	andi	r19, 0xF0	; 240
     b34:	32 27       	eor	r19, r18
     b36:	20 7f       	andi	r18, 0xF0	; 240
     b38:	32 27       	eor	r19, r18
     b3a:	8b 81       	ldd	r24, Y+3	; 0x03
     b3c:	9c 81       	ldd	r25, Y+4	; 0x04
     b3e:	82 0f       	add	r24, r18
     b40:	93 1f       	adc	r25, r19
     b42:	87 5e       	subi	r24, 0xE7	; 231
     b44:	98 4f       	sbci	r25, 0xF8	; 248
     b46:	fc 01       	movw	r30, r24
     b48:	40 83       	st	Z, r20
     b4a:	80 91 1a 08 	lds	r24, 0x081A	; 0x80081a <lastPosX>
				}
				
				game[lastPosX][lastPosY] = ttl;
     b4e:	28 2f       	mov	r18, r24
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	80 91 19 08 	lds	r24, 0x0819	; 0x800819 <lastPosY>
     b56:	88 2f       	mov	r24, r24
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	40 91 af 06 	lds	r20, 0x06AF	; 0x8006af <ttl>
     b5e:	50 91 b0 06 	lds	r21, 0x06B0	; 0x8006b0 <ttl+0x1>
     b62:	22 95       	swap	r18
     b64:	32 95       	swap	r19
     b66:	30 7f       	andi	r19, 0xF0	; 240
     b68:	32 27       	eor	r19, r18
     b6a:	20 7f       	andi	r18, 0xF0	; 240
     b6c:	32 27       	eor	r19, r18
     b6e:	82 0f       	add	r24, r18
     b70:	93 1f       	adc	r25, r19
     b72:	87 5e       	subi	r24, 0xE7	; 231
     b74:	98 4f       	sbci	r25, 0xF8	; 248
     b76:	fc 01       	movw	r30, r24
     b78:	40 83       	st	Z, r20
     b7a:	80 91 ad 06 	lds	r24, 0x06AD	; 0x8006ad <posX>
				game[posX][posY] = 250 + rotation;
     b7e:	28 2f       	mov	r18, r24
     b80:	30 e0       	ldi	r19, 0x00	; 0
     b82:	80 91 ae 06 	lds	r24, 0x06AE	; 0x8006ae <posY>
     b86:	88 2f       	mov	r24, r24
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	40 91 14 07 	lds	r20, 0x0714	; 0x800714 <rotation>
     b8e:	46 50       	subi	r20, 0x06	; 6
     b90:	22 95       	swap	r18
     b92:	32 95       	swap	r19
     b94:	30 7f       	andi	r19, 0xF0	; 240
     b96:	32 27       	eor	r19, r18
     b98:	20 7f       	andi	r18, 0xF0	; 240
     b9a:	32 27       	eor	r19, r18
     b9c:	82 0f       	add	r24, r18
     b9e:	93 1f       	adc	r25, r19
     ba0:	87 5e       	subi	r24, 0xE7	; 231
     ba2:	98 4f       	sbci	r25, 0xF8	; 248
     ba4:	fc 01       	movw	r30, r24
     ba6:	40 83       	st	Z, r20
     ba8:	8b 81       	ldd	r24, Y+3	; 0x03
	}
	if (lost == 0)
	{
		for (int x = 0; x < 16; x++)
		{
			for (int y = 0; y < 16; y++)
     baa:	9c 81       	ldd	r25, Y+4	; 0x04
     bac:	01 96       	adiw	r24, 0x01	; 1
     bae:	9c 83       	std	Y+4, r25	; 0x04
     bb0:	8b 83       	std	Y+3, r24	; 0x03
     bb2:	8b 81       	ldd	r24, Y+3	; 0x03
     bb4:	9c 81       	ldd	r25, Y+4	; 0x04
     bb6:	40 97       	sbiw	r24, 0x10	; 16
     bb8:	0c f4       	brge	.+2      	; 0xbbc <Update+0x260>
     bba:	7d cf       	rjmp	.-262    	; 0xab6 <Update+0x15a>
     bbc:	89 81       	ldd	r24, Y+1	; 0x01
		AddPart();
		AddFood();
	}
	if (lost == 0)
	{
		for (int x = 0; x < 16; x++)
     bbe:	9a 81       	ldd	r25, Y+2	; 0x02
     bc0:	01 96       	adiw	r24, 0x01	; 1
     bc2:	9a 83       	std	Y+2, r25	; 0x02
     bc4:	89 83       	std	Y+1, r24	; 0x01
     bc6:	89 81       	ldd	r24, Y+1	; 0x01
     bc8:	9a 81       	ldd	r25, Y+2	; 0x02
     bca:	40 97       	sbiw	r24, 0x10	; 16
     bcc:	0c f4       	brge	.+2      	; 0xbd0 <Update+0x274>
     bce:	70 cf       	rjmp	.-288    	; 0xab0 <Update+0x154>
     bd0:	00 00       	nop
				game[lastPosX][lastPosY] = ttl;
				game[posX][posY] = 250 + rotation;
			}
		}
	}
}
     bd2:	0f 90       	pop	r0
     bd4:	0f 90       	pop	r0
     bd6:	0f 90       	pop	r0
     bd8:	0f 90       	pop	r0
     bda:	df 91       	pop	r29
     bdc:	cf 91       	pop	r28
     bde:	08 95       	ret

00000be0 <Draw>:
     be0:	cf 93       	push	r28

void Draw()
{
     be2:	df 93       	push	r29
     be4:	00 d0       	rcall	.+0      	; 0xbe6 <Draw+0x6>
     be6:	00 d0       	rcall	.+0      	; 0xbe8 <Draw+0x8>
     be8:	1f 92       	push	r1
     bea:	cd b7       	in	r28, 0x3d	; 61
     bec:	de b7       	in	r29, 0x3e	; 62
	Screen1();
     bee:	80 db       	rcall	.-2304   	; 0x2f0 <Screen1>
	
	for (char x = 0; x < 8; x++)
     bf0:	19 82       	std	Y+1, r1	; 0x01
     bf2:	56 c0       	rjmp	.+172    	; 0xca0 <Draw+0xc0>
	{
		SetX(x);
     bf4:	89 81       	ldd	r24, Y+1	; 0x01
     bf6:	88 2f       	mov	r24, r24
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	d5 db       	rcall	.-2134   	; 0x3a6 <SetX>
		SetY(0);
     bfc:	80 e0       	ldi	r24, 0x00	; 0
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	e8 db       	rcall	.-2096   	; 0x3d2 <SetY>
		for (char y = 0; y < 16; y++)
     c02:	1a 82       	std	Y+2, r1	; 0x02
     c04:	46 c0       	rjmp	.+140    	; 0xc92 <Draw+0xb2>
		{
			for (char i = 0; i < 4; i++)
     c06:	1b 82       	std	Y+3, r1	; 0x03
     c08:	3d c0       	rjmp	.+122    	; 0xc84 <Draw+0xa4>
			{
				char toWrite = ReadPix(game[x * 2][y], i);
     c0a:	89 81       	ldd	r24, Y+1	; 0x01
     c0c:	88 2f       	mov	r24, r24
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	9c 01       	movw	r18, r24
     c12:	22 0f       	add	r18, r18
     c14:	33 1f       	adc	r19, r19
     c16:	8a 81       	ldd	r24, Y+2	; 0x02
     c18:	88 2f       	mov	r24, r24
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	22 95       	swap	r18
     c1e:	32 95       	swap	r19
     c20:	30 7f       	andi	r19, 0xF0	; 240
     c22:	32 27       	eor	r19, r18
     c24:	20 7f       	andi	r18, 0xF0	; 240
     c26:	32 27       	eor	r19, r18
     c28:	82 0f       	add	r24, r18
     c2a:	93 1f       	adc	r25, r19
     c2c:	87 5e       	subi	r24, 0xE7	; 231
     c2e:	98 4f       	sbci	r25, 0xF8	; 248
     c30:	fc 01       	movw	r30, r24
     c32:	80 81       	ld	r24, Z
     c34:	6b 81       	ldd	r22, Y+3	; 0x03
     c36:	52 d4       	rcall	.+2212   	; 0x14dc <ReadPix>
     c38:	8c 83       	std	Y+4, r24	; 0x04
				char add = ReadPix(game[(x * 2) + 1][y], i) << 4;
     c3a:	89 81       	ldd	r24, Y+1	; 0x01
     c3c:	88 2f       	mov	r24, r24
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	88 0f       	add	r24, r24
     c42:	99 1f       	adc	r25, r25
     c44:	9c 01       	movw	r18, r24
     c46:	2f 5f       	subi	r18, 0xFF	; 255
     c48:	3f 4f       	sbci	r19, 0xFF	; 255
     c4a:	8a 81       	ldd	r24, Y+2	; 0x02
     c4c:	88 2f       	mov	r24, r24
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	22 95       	swap	r18
     c52:	32 95       	swap	r19
     c54:	30 7f       	andi	r19, 0xF0	; 240
     c56:	32 27       	eor	r19, r18
     c58:	20 7f       	andi	r18, 0xF0	; 240
     c5a:	32 27       	eor	r19, r18
     c5c:	82 0f       	add	r24, r18
     c5e:	93 1f       	adc	r25, r19
     c60:	87 5e       	subi	r24, 0xE7	; 231
     c62:	98 4f       	sbci	r25, 0xF8	; 248
     c64:	fc 01       	movw	r30, r24
     c66:	80 81       	ld	r24, Z
     c68:	6b 81       	ldd	r22, Y+3	; 0x03
     c6a:	38 d4       	rcall	.+2160   	; 0x14dc <ReadPix>
     c6c:	82 95       	swap	r24
     c6e:	80 7f       	andi	r24, 0xF0	; 240
     c70:	8d 83       	std	Y+5, r24	; 0x05
				toWrite += add;
     c72:	9c 81       	ldd	r25, Y+4	; 0x04
     c74:	8d 81       	ldd	r24, Y+5	; 0x05
     c76:	89 0f       	add	r24, r25
				
				SetPixel(toWrite);
     c78:	8c 83       	std	Y+4, r24	; 0x04
     c7a:	8c 81       	ldd	r24, Y+4	; 0x04
     c7c:	4d db       	rcall	.-2406   	; 0x318 <SetPixel>
	{
		SetX(x);
		SetY(0);
		for (char y = 0; y < 16; y++)
		{
			for (char i = 0; i < 4; i++)
     c7e:	8b 81       	ldd	r24, Y+3	; 0x03
     c80:	8f 5f       	subi	r24, 0xFF	; 255
     c82:	8b 83       	std	Y+3, r24	; 0x03
     c84:	8b 81       	ldd	r24, Y+3	; 0x03
     c86:	84 30       	cpi	r24, 0x04	; 4
     c88:	08 f4       	brcc	.+2      	; 0xc8c <Draw+0xac>
     c8a:	bf cf       	rjmp	.-130    	; 0xc0a <Draw+0x2a>
	
	for (char x = 0; x < 8; x++)
	{
		SetX(x);
		SetY(0);
		for (char y = 0; y < 16; y++)
     c8c:	8a 81       	ldd	r24, Y+2	; 0x02
     c8e:	8f 5f       	subi	r24, 0xFF	; 255
     c90:	8a 83       	std	Y+2, r24	; 0x02
     c92:	8a 81       	ldd	r24, Y+2	; 0x02
     c94:	80 31       	cpi	r24, 0x10	; 16
     c96:	08 f4       	brcc	.+2      	; 0xc9a <Draw+0xba>
     c98:	b6 cf       	rjmp	.-148    	; 0xc06 <Draw+0x26>

void Draw()
{
	Screen1();
	
	for (char x = 0; x < 8; x++)
     c9a:	89 81       	ldd	r24, Y+1	; 0x01
     c9c:	8f 5f       	subi	r24, 0xFF	; 255
     c9e:	89 83       	std	Y+1, r24	; 0x01
     ca0:	89 81       	ldd	r24, Y+1	; 0x01
     ca2:	88 30       	cpi	r24, 0x08	; 8
     ca4:	08 f4       	brcc	.+2      	; 0xca8 <Draw+0xc8>
     ca6:	a6 cf       	rjmp	.-180    	; 0xbf4 <Draw+0x14>
				
				SetPixel(toWrite);
			}			
		}
	}
}
     ca8:	00 00       	nop
     caa:	0f 90       	pop	r0
     cac:	0f 90       	pop	r0
     cae:	0f 90       	pop	r0
     cb0:	0f 90       	pop	r0
     cb2:	0f 90       	pop	r0
     cb4:	df 91       	pop	r29
     cb6:	cf 91       	pop	r28
     cb8:	08 95       	ret

00000cba <DrawScore>:

void DrawScore()
{
     cba:	cf 93       	push	r28
     cbc:	df 93       	push	r29
     cbe:	00 d0       	rcall	.+0      	; 0xcc0 <DrawScore+0x6>
     cc0:	00 d0       	rcall	.+0      	; 0xcc2 <DrawScore+0x8>
     cc2:	00 d0       	rcall	.+0      	; 0xcc4 <DrawScore+0xa>
     cc4:	cd b7       	in	r28, 0x3d	; 61
     cc6:	de b7       	in	r29, 0x3e	; 62
	Screen2();
     cc8:	1d db       	rcall	.-2502   	; 0x304 <Screen2>
			
			SetPixel(toWrite);
		}
	}*/
	
	for (char x = 0; x < 5; x++)
     cca:	19 82       	std	Y+1, r1	; 0x01
     ccc:	4f c0       	rjmp	.+158    	; 0xd6c <DrawScore+0xb2>
	{
		SetX(x);
     cce:	89 81       	ldd	r24, Y+1	; 0x01
     cd0:	88 2f       	mov	r24, r24
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	68 db       	rcall	.-2352   	; 0x3a6 <SetX>
		SetY(20);
     cd6:	84 e1       	ldi	r24, 0x14	; 20
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	7b db       	rcall	.-2314   	; 0x3d2 <SetY>
		
		for (int y = 8; y >= 0; y--)
     cdc:	88 e0       	ldi	r24, 0x08	; 8
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	9b 83       	std	Y+3, r25	; 0x03
     ce2:	8a 83       	std	Y+2, r24	; 0x02
     ce4:	3b c0       	rjmp	.+118    	; 0xd5c <DrawScore+0xa2>
		{
			char toWrite = 0;
     ce6:	1c 82       	std	Y+4, r1	; 0x04
			for (char i = 0; i < 8; i++)
     ce8:	1d 82       	std	Y+5, r1	; 0x05
     cea:	2e c0       	rjmp	.+92     	; 0xd48 <DrawScore+0x8e>
			{
				toWrite += (score[y][x*8 + i] << i);
     cec:	89 81       	ldd	r24, Y+1	; 0x01
     cee:	88 2f       	mov	r24, r24
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	9c 01       	movw	r18, r24
     cf4:	22 0f       	add	r18, r18
     cf6:	33 1f       	adc	r19, r19
     cf8:	22 0f       	add	r18, r18
     cfa:	33 1f       	adc	r19, r19
     cfc:	22 0f       	add	r18, r18
     cfe:	33 1f       	adc	r19, r19
     d00:	8d 81       	ldd	r24, Y+5	; 0x05
     d02:	88 2f       	mov	r24, r24
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	82 0f       	add	r24, r18
     d08:	93 1f       	adc	r25, r19
     d0a:	4a 81       	ldd	r20, Y+2	; 0x02
     d0c:	5b 81       	ldd	r21, Y+3	; 0x03
     d0e:	68 e2       	ldi	r22, 0x28	; 40
     d10:	64 9f       	mul	r22, r20
     d12:	90 01       	movw	r18, r0
     d14:	65 9f       	mul	r22, r21
     d16:	30 0d       	add	r19, r0
     d18:	11 24       	eor	r1, r1
     d1a:	82 0f       	add	r24, r18
     d1c:	93 1f       	adc	r25, r19
     d1e:	8c 58       	subi	r24, 0x8C	; 140
     d20:	9d 4f       	sbci	r25, 0xFD	; 253
     d22:	fc 01       	movw	r30, r24
     d24:	80 81       	ld	r24, Z
     d26:	88 2f       	mov	r24, r24
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	2d 81       	ldd	r18, Y+5	; 0x05
     d2c:	22 2f       	mov	r18, r18
     d2e:	30 e0       	ldi	r19, 0x00	; 0
     d30:	02 c0       	rjmp	.+4      	; 0xd36 <DrawScore+0x7c>
     d32:	88 0f       	add	r24, r24
     d34:	99 1f       	adc	r25, r25
     d36:	2a 95       	dec	r18
     d38:	e2 f7       	brpl	.-8      	; 0xd32 <DrawScore+0x78>
     d3a:	98 2f       	mov	r25, r24
     d3c:	8c 81       	ldd	r24, Y+4	; 0x04
     d3e:	89 0f       	add	r24, r25
     d40:	8c 83       	std	Y+4, r24	; 0x04
		SetY(20);
		
		for (int y = 8; y >= 0; y--)
		{
			char toWrite = 0;
			for (char i = 0; i < 8; i++)
     d42:	8d 81       	ldd	r24, Y+5	; 0x05
     d44:	8f 5f       	subi	r24, 0xFF	; 255
     d46:	8d 83       	std	Y+5, r24	; 0x05
     d48:	8d 81       	ldd	r24, Y+5	; 0x05
     d4a:	88 30       	cpi	r24, 0x08	; 8
			{
				toWrite += (score[y][x*8 + i] << i);
			}
			
			SetPixel(toWrite);
     d4c:	78 f2       	brcs	.-98     	; 0xcec <DrawScore+0x32>
     d4e:	8c 81       	ldd	r24, Y+4	; 0x04
     d50:	e3 da       	rcall	.-2618   	; 0x318 <SetPixel>
	for (char x = 0; x < 5; x++)
	{
		SetX(x);
		SetY(20);
		
		for (int y = 8; y >= 0; y--)
     d52:	8a 81       	ldd	r24, Y+2	; 0x02
     d54:	9b 81       	ldd	r25, Y+3	; 0x03
     d56:	01 97       	sbiw	r24, 0x01	; 1
     d58:	9b 83       	std	Y+3, r25	; 0x03
     d5a:	8a 83       	std	Y+2, r24	; 0x02
     d5c:	8a 81       	ldd	r24, Y+2	; 0x02
     d5e:	9b 81       	ldd	r25, Y+3	; 0x03
     d60:	99 23       	and	r25, r25
     d62:	0c f0       	brlt	.+2      	; 0xd66 <DrawScore+0xac>
     d64:	c0 cf       	rjmp	.-128    	; 0xce6 <DrawScore+0x2c>
			
			SetPixel(toWrite);
		}
	}*/
	
	for (char x = 0; x < 5; x++)
     d66:	89 81       	ldd	r24, Y+1	; 0x01
     d68:	8f 5f       	subi	r24, 0xFF	; 255
     d6a:	89 83       	std	Y+1, r24	; 0x01
     d6c:	89 81       	ldd	r24, Y+1	; 0x01
     d6e:	85 30       	cpi	r24, 0x05	; 5
     d70:	08 f4       	brcc	.+2      	; 0xd74 <DrawScore+0xba>
     d72:	ad cf       	rjmp	.-166    	; 0xcce <DrawScore+0x14>
			
			SetPixel(toWrite);
		}
	}
	
	for (char x = 0; x < 8; x++)
     d74:	1e 82       	std	Y+6, r1	; 0x06
	{
		SetX(x);
     d76:	0c c0       	rjmp	.+24     	; 0xd90 <DrawScore+0xd6>
     d78:	8e 81       	ldd	r24, Y+6	; 0x06
     d7a:	88 2f       	mov	r24, r24
     d7c:	90 e0       	ldi	r25, 0x00	; 0
		SetY(0);
     d7e:	13 db       	rcall	.-2522   	; 0x3a6 <SetX>
     d80:	80 e0       	ldi	r24, 0x00	; 0
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	26 db       	rcall	.-2484   	; 0x3d2 <SetY>
		SetPixel(0xFF);
     d86:	8f ef       	ldi	r24, 0xFF	; 255
     d88:	c7 da       	rcall	.-2674   	; 0x318 <SetPixel>
     d8a:	8e 81       	ldd	r24, Y+6	; 0x06
			
			SetPixel(toWrite);
		}
	}
	
	for (char x = 0; x < 8; x++)
     d8c:	8f 5f       	subi	r24, 0xFF	; 255
     d8e:	8e 83       	std	Y+6, r24	; 0x06
     d90:	8e 81       	ldd	r24, Y+6	; 0x06
     d92:	88 30       	cpi	r24, 0x08	; 8
     d94:	88 f3       	brcs	.-30     	; 0xd78 <DrawScore+0xbe>
     d96:	00 00       	nop
	{
		SetX(x);
		SetY(0);
		SetPixel(0xFF);
	}
}
     d98:	26 96       	adiw	r28, 0x06	; 6
     d9a:	0f b6       	in	r0, 0x3f	; 63
     d9c:	f8 94       	cli
     d9e:	de bf       	out	0x3e, r29	; 62
     da0:	0f be       	out	0x3f, r0	; 63
     da2:	cd bf       	out	0x3d, r28	; 61
     da4:	df 91       	pop	r29
     da6:	cf 91       	pop	r28
     da8:	08 95       	ret

00000daa <UpdateScore>:
     daa:	cf 92       	push	r12

void UpdateScore()
{
     dac:	df 92       	push	r13
     dae:	ef 92       	push	r14
     db0:	ff 92       	push	r15
     db2:	cf 93       	push	r28
     db4:	df 93       	push	r29
     db6:	00 d0       	rcall	.+0      	; 0xdb8 <UpdateScore+0xe>
     db8:	00 d0       	rcall	.+0      	; 0xdba <UpdateScore+0x10>
     dba:	00 d0       	rcall	.+0      	; 0xdbc <UpdateScore+0x12>
     dbc:	cd b7       	in	r28, 0x3d	; 61
     dbe:	de b7       	in	r29, 0x3e	; 62
	Screen2();
     dc0:	a1 da       	rcall	.-2750   	; 0x304 <Screen2>
	int temp = points;
     dc2:	80 91 17 07 	lds	r24, 0x0717	; 0x800717 <points>
     dc6:	90 91 18 07 	lds	r25, 0x0718	; 0x800718 <points+0x1>
     dca:	9c 83       	std	Y+4, r25	; 0x04
     dcc:	8b 83       	std	Y+3, r24	; 0x03
	
	for (int x = 6; x >= 0; x--)
     dce:	86 e0       	ldi	r24, 0x06	; 6
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	9a 83       	std	Y+2, r25	; 0x02
     dd4:	89 83       	std	Y+1, r24	; 0x01
     dd6:	56 c0       	rjmp	.+172    	; 0xe84 <UpdateScore+0xda>
	{
		SetX(x);
     dd8:	89 81       	ldd	r24, Y+1	; 0x01
     dda:	9a 81       	ldd	r25, Y+2	; 0x02
     ddc:	e4 da       	rcall	.-2616   	; 0x3a6 <SetX>
		SetY(7);
     dde:	87 e0       	ldi	r24, 0x07	; 7
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	f7 da       	rcall	.-2578   	; 0x3d2 <SetY>
		
		if (x == 6 || x == 5)
     de4:	89 81       	ldd	r24, Y+1	; 0x01
     de6:	9a 81       	ldd	r25, Y+2	; 0x02
     de8:	06 97       	sbiw	r24, 0x06	; 6
     dea:	21 f0       	breq	.+8      	; 0xdf4 <UpdateScore+0x4a>
     dec:	89 81       	ldd	r24, Y+1	; 0x01
     dee:	9a 81       	ldd	r25, Y+2	; 0x02
     df0:	05 97       	sbiw	r24, 0x05	; 5
		{
			DrawNumber(0);
     df2:	19 f4       	brne	.+6      	; 0xdfa <UpdateScore+0x50>
     df4:	80 e0       	ldi	r24, 0x00	; 0
     df6:	59 d0       	rcall	.+178    	; 0xeaa <DrawNumber>
     df8:	40 c0       	rjmp	.+128    	; 0xe7a <UpdateScore+0xd0>
		}
		else{
			int r = points / pow(10, 4-x);
     dfa:	80 91 17 07 	lds	r24, 0x0717	; 0x800717 <points>
     dfe:	90 91 18 07 	lds	r25, 0x0718	; 0x800718 <points+0x1>
     e02:	09 2e       	mov	r0, r25
     e04:	00 0c       	add	r0, r0
     e06:	aa 0b       	sbc	r26, r26
     e08:	bb 0b       	sbc	r27, r27
     e0a:	bc 01       	movw	r22, r24
     e0c:	cd 01       	movw	r24, r26
     e0e:	a9 d5       	rcall	.+2898   	; 0x1962 <__floatsisf>
     e10:	6b 01       	movw	r12, r22
     e12:	7c 01       	movw	r14, r24
     e14:	24 e0       	ldi	r18, 0x04	; 4
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	89 81       	ldd	r24, Y+1	; 0x01
     e1a:	9a 81       	ldd	r25, Y+2	; 0x02
     e1c:	a9 01       	movw	r20, r18
     e1e:	48 1b       	sub	r20, r24
     e20:	59 0b       	sbc	r21, r25
     e22:	ca 01       	movw	r24, r20
     e24:	09 2e       	mov	r0, r25
     e26:	00 0c       	add	r0, r0
     e28:	aa 0b       	sbc	r26, r26
     e2a:	bb 0b       	sbc	r27, r27
     e2c:	bc 01       	movw	r22, r24
     e2e:	cd 01       	movw	r24, r26
     e30:	98 d5       	rcall	.+2864   	; 0x1962 <__floatsisf>
     e32:	dc 01       	movw	r26, r24
     e34:	cb 01       	movw	r24, r22
     e36:	9c 01       	movw	r18, r24
     e38:	ad 01       	movw	r20, r26
     e3a:	60 e0       	ldi	r22, 0x00	; 0
     e3c:	70 e0       	ldi	r23, 0x00	; 0
     e3e:	80 e2       	ldi	r24, 0x20	; 32
     e40:	91 e4       	ldi	r25, 0x41	; 65
     e42:	a6 d6       	rcall	.+3404   	; 0x1b90 <pow>
     e44:	dc 01       	movw	r26, r24
     e46:	cb 01       	movw	r24, r22
     e48:	9c 01       	movw	r18, r24
     e4a:	ad 01       	movw	r20, r26
     e4c:	c7 01       	movw	r24, r14
     e4e:	b6 01       	movw	r22, r12
     e50:	ed d4       	rcall	.+2522   	; 0x182c <__divsf3>
     e52:	dc 01       	movw	r26, r24
     e54:	cb 01       	movw	r24, r22
     e56:	bc 01       	movw	r22, r24
     e58:	cd 01       	movw	r24, r26
     e5a:	50 d5       	rcall	.+2720   	; 0x18fc <__fixsfsi>
     e5c:	dc 01       	movw	r26, r24
     e5e:	cb 01       	movw	r24, r22
     e60:	9e 83       	std	Y+6, r25	; 0x06
     e62:	8d 83       	std	Y+5, r24	; 0x05
			r = r % 10;
     e64:	8d 81       	ldd	r24, Y+5	; 0x05
     e66:	9e 81       	ldd	r25, Y+6	; 0x06
     e68:	2a e0       	ldi	r18, 0x0A	; 10
     e6a:	30 e0       	ldi	r19, 0x00	; 0
     e6c:	b9 01       	movw	r22, r18
     e6e:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <__divmodhi4>
     e72:	9e 83       	std	Y+6, r25	; 0x06
			
			DrawNumber(r);
     e74:	8d 83       	std	Y+5, r24	; 0x05
     e76:	8d 81       	ldd	r24, Y+5	; 0x05
     e78:	18 d0       	rcall	.+48     	; 0xeaa <DrawNumber>
void UpdateScore()
{
	Screen2();
	int temp = points;
	
	for (int x = 6; x >= 0; x--)
     e7a:	89 81       	ldd	r24, Y+1	; 0x01
     e7c:	9a 81       	ldd	r25, Y+2	; 0x02
     e7e:	01 97       	sbiw	r24, 0x01	; 1
     e80:	9a 83       	std	Y+2, r25	; 0x02
     e82:	89 83       	std	Y+1, r24	; 0x01
     e84:	89 81       	ldd	r24, Y+1	; 0x01
     e86:	9a 81       	ldd	r25, Y+2	; 0x02
     e88:	99 23       	and	r25, r25
     e8a:	0c f0       	brlt	.+2      	; 0xe8e <UpdateScore+0xe4>
     e8c:	a5 cf       	rjmp	.-182    	; 0xdd8 <UpdateScore+0x2e>
			
			DrawNumber(r);
		}
		
	}
}
     e8e:	00 00       	nop
     e90:	26 96       	adiw	r28, 0x06	; 6
     e92:	0f b6       	in	r0, 0x3f	; 63
     e94:	f8 94       	cli
     e96:	de bf       	out	0x3e, r29	; 62
     e98:	0f be       	out	0x3f, r0	; 63
     e9a:	cd bf       	out	0x3d, r28	; 61
     e9c:	df 91       	pop	r29
     e9e:	cf 91       	pop	r28
     ea0:	ff 90       	pop	r15
     ea2:	ef 90       	pop	r14
     ea4:	df 90       	pop	r13
     ea6:	cf 90       	pop	r12
     ea8:	08 95       	ret

00000eaa <DrawNumber>:

void DrawNumber(char in)
{
     eaa:	cf 93       	push	r28
     eac:	df 93       	push	r29
     eae:	cd b7       	in	r28, 0x3d	; 61
     eb0:	de b7       	in	r29, 0x3e	; 62
     eb2:	a3 97       	sbiw	r28, 0x23	; 35
     eb4:	0f b6       	in	r0, 0x3f	; 63
     eb6:	f8 94       	cli
     eb8:	de bf       	out	0x3e, r29	; 62
     eba:	0f be       	out	0x3f, r0	; 63
     ebc:	cd bf       	out	0x3d, r28	; 61
     ebe:	8b a3       	std	Y+35, r24	; 0x23
	char toWrite = 0;
     ec0:	19 82       	std	Y+1, r1	; 0x01
	switch(in)
     ec2:	8b a1       	ldd	r24, Y+35	; 0x23
     ec4:	88 2f       	mov	r24, r24
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	09 2e       	mov	r0, r25
     eca:	00 0c       	add	r0, r0
     ecc:	aa 0b       	sbc	r26, r26
     ece:	bb 0b       	sbc	r27, r27
     ed0:	40 e0       	ldi	r20, 0x00	; 0
     ed2:	50 e0       	ldi	r21, 0x00	; 0
     ed4:	29 e0       	ldi	r18, 0x09	; 9
     ed6:	30 e0       	ldi	r19, 0x00	; 0
     ed8:	84 1b       	sub	r24, r20
     eda:	95 0b       	sbc	r25, r21
     edc:	28 17       	cp	r18, r24
     ede:	39 07       	cpc	r19, r25
     ee0:	08 f4       	brcc	.+2      	; 0xee4 <DrawNumber+0x3a>
     ee2:	40 c2       	rjmp	.+1152   	; 0x1364 <DrawNumber+0x4ba>
     ee4:	8a 5b       	subi	r24, 0xBA	; 186
     ee6:	9f 4f       	sbci	r25, 0xFF	; 255
     ee8:	fc 01       	movw	r30, r24
     eea:	0c 94 a5 0f 	jmp	0x1f4a	; 0x1f4a <__tablejump2__>
	{
		case 0:
			for (int y = 8; y >= 0; y--)
     eee:	88 e0       	ldi	r24, 0x08	; 8
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	9b 83       	std	Y+3, r25	; 0x03
     ef4:	8a 83       	std	Y+2, r24	; 0x02
     ef6:	2f c0       	rjmp	.+94     	; 0xf56 <DrawNumber+0xac>
			{
				toWrite = 0;
     ef8:	19 82       	std	Y+1, r1	; 0x01
				for (char i = 0; i < 8; i++)
     efa:	1c 82       	std	Y+4, r1	; 0x04
     efc:	22 c0       	rjmp	.+68     	; 0xf42 <DrawNumber+0x98>
				{
					toWrite += (zero[y][i] << i);
     efe:	8c 81       	ldd	r24, Y+4	; 0x04
     f00:	88 2f       	mov	r24, r24
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	2a 81       	ldd	r18, Y+2	; 0x02
     f06:	3b 81       	ldd	r19, Y+3	; 0x03
     f08:	22 0f       	add	r18, r18
     f0a:	33 1f       	adc	r19, r19
     f0c:	22 0f       	add	r18, r18
     f0e:	33 1f       	adc	r19, r19
     f10:	22 0f       	add	r18, r18
     f12:	33 1f       	adc	r19, r19
     f14:	82 0f       	add	r24, r18
     f16:	93 1f       	adc	r25, r19
     f18:	84 52       	subi	r24, 0x24	; 36
     f1a:	9c 4f       	sbci	r25, 0xFC	; 252
     f1c:	fc 01       	movw	r30, r24
     f1e:	80 81       	ld	r24, Z
     f20:	88 2f       	mov	r24, r24
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	2c 81       	ldd	r18, Y+4	; 0x04
     f26:	22 2f       	mov	r18, r18
     f28:	30 e0       	ldi	r19, 0x00	; 0
     f2a:	02 c0       	rjmp	.+4      	; 0xf30 <DrawNumber+0x86>
     f2c:	88 0f       	add	r24, r24
     f2e:	99 1f       	adc	r25, r25
     f30:	2a 95       	dec	r18
     f32:	e2 f7       	brpl	.-8      	; 0xf2c <DrawNumber+0x82>
     f34:	98 2f       	mov	r25, r24
     f36:	89 81       	ldd	r24, Y+1	; 0x01
     f38:	89 0f       	add	r24, r25
     f3a:	89 83       	std	Y+1, r24	; 0x01
	{
		case 0:
			for (int y = 8; y >= 0; y--)
			{
				toWrite = 0;
				for (char i = 0; i < 8; i++)
     f3c:	8c 81       	ldd	r24, Y+4	; 0x04
     f3e:	8f 5f       	subi	r24, 0xFF	; 255
     f40:	8c 83       	std	Y+4, r24	; 0x04
     f42:	8c 81       	ldd	r24, Y+4	; 0x04
     f44:	88 30       	cpi	r24, 0x08	; 8
     f46:	d8 f2       	brcs	.-74     	; 0xefe <DrawNumber+0x54>
				{
					toWrite += (zero[y][i] << i);
				}
				
				SetPixel(toWrite);
     f48:	89 81       	ldd	r24, Y+1	; 0x01
     f4a:	e6 d9       	rcall	.-3124   	; 0x318 <SetPixel>
{
	char toWrite = 0;
	switch(in)
	{
		case 0:
			for (int y = 8; y >= 0; y--)
     f4c:	8a 81       	ldd	r24, Y+2	; 0x02
     f4e:	9b 81       	ldd	r25, Y+3	; 0x03
     f50:	01 97       	sbiw	r24, 0x01	; 1
     f52:	9b 83       	std	Y+3, r25	; 0x03
     f54:	8a 83       	std	Y+2, r24	; 0x02
     f56:	8a 81       	ldd	r24, Y+2	; 0x02
     f58:	9b 81       	ldd	r25, Y+3	; 0x03
     f5a:	99 23       	and	r25, r25
     f5c:	6c f6       	brge	.-102    	; 0xef8 <DrawNumber+0x4e>
					toWrite += (zero[y][i] << i);
				}
				
				SetPixel(toWrite);
			}
			break;
     f5e:	3c c2       	rjmp	.+1144   	; 0x13d8 <DrawNumber+0x52e>
		case 1:
			for (int y = 8; y >= 0; y--)
     f60:	88 e0       	ldi	r24, 0x08	; 8
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	9e 83       	std	Y+6, r25	; 0x06
     f66:	8d 83       	std	Y+5, r24	; 0x05
     f68:	2f c0       	rjmp	.+94     	; 0xfc8 <DrawNumber+0x11e>
			{
				toWrite = 0;
     f6a:	19 82       	std	Y+1, r1	; 0x01
				for (char i = 0; i < 8; i++)
     f6c:	1f 82       	std	Y+7, r1	; 0x07
     f6e:	22 c0       	rjmp	.+68     	; 0xfb4 <DrawNumber+0x10a>
				{
					toWrite += (one[y][i] << i);
     f70:	8f 81       	ldd	r24, Y+7	; 0x07
     f72:	88 2f       	mov	r24, r24
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	2d 81       	ldd	r18, Y+5	; 0x05
     f78:	3e 81       	ldd	r19, Y+6	; 0x06
     f7a:	22 0f       	add	r18, r18
     f7c:	33 1f       	adc	r19, r19
     f7e:	22 0f       	add	r18, r18
     f80:	33 1f       	adc	r19, r19
     f82:	22 0f       	add	r18, r18
     f84:	33 1f       	adc	r19, r19
     f86:	82 0f       	add	r24, r18
     f88:	93 1f       	adc	r25, r19
     f8a:	8c 5d       	subi	r24, 0xDC	; 220
     f8c:	9b 4f       	sbci	r25, 0xFB	; 251
     f8e:	fc 01       	movw	r30, r24
     f90:	80 81       	ld	r24, Z
     f92:	88 2f       	mov	r24, r24
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	2f 81       	ldd	r18, Y+7	; 0x07
     f98:	22 2f       	mov	r18, r18
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	02 c0       	rjmp	.+4      	; 0xfa2 <DrawNumber+0xf8>
     f9e:	88 0f       	add	r24, r24
     fa0:	99 1f       	adc	r25, r25
     fa2:	2a 95       	dec	r18
     fa4:	e2 f7       	brpl	.-8      	; 0xf9e <DrawNumber+0xf4>
     fa6:	98 2f       	mov	r25, r24
     fa8:	89 81       	ldd	r24, Y+1	; 0x01
     faa:	89 0f       	add	r24, r25
     fac:	89 83       	std	Y+1, r24	; 0x01
			break;
		case 1:
			for (int y = 8; y >= 0; y--)
			{
				toWrite = 0;
				for (char i = 0; i < 8; i++)
     fae:	8f 81       	ldd	r24, Y+7	; 0x07
     fb0:	8f 5f       	subi	r24, 0xFF	; 255
     fb2:	8f 83       	std	Y+7, r24	; 0x07
     fb4:	8f 81       	ldd	r24, Y+7	; 0x07
     fb6:	88 30       	cpi	r24, 0x08	; 8
     fb8:	d8 f2       	brcs	.-74     	; 0xf70 <DrawNumber+0xc6>
				{
					toWrite += (one[y][i] << i);
				}
				
				SetPixel(toWrite);
     fba:	89 81       	ldd	r24, Y+1	; 0x01
     fbc:	ad d9       	rcall	.-3238   	; 0x318 <SetPixel>
				
				SetPixel(toWrite);
			}
			break;
		case 1:
			for (int y = 8; y >= 0; y--)
     fbe:	8d 81       	ldd	r24, Y+5	; 0x05
     fc0:	9e 81       	ldd	r25, Y+6	; 0x06
     fc2:	01 97       	sbiw	r24, 0x01	; 1
     fc4:	9e 83       	std	Y+6, r25	; 0x06
     fc6:	8d 83       	std	Y+5, r24	; 0x05
     fc8:	8d 81       	ldd	r24, Y+5	; 0x05
     fca:	9e 81       	ldd	r25, Y+6	; 0x06
     fcc:	99 23       	and	r25, r25
     fce:	6c f6       	brge	.-102    	; 0xf6a <DrawNumber+0xc0>
					toWrite += (one[y][i] << i);
				}
				
				SetPixel(toWrite);
			}
			break;
     fd0:	03 c2       	rjmp	.+1030   	; 0x13d8 <DrawNumber+0x52e>
		case 2:
			for (int y = 8; y >= 0; y--)
     fd2:	88 e0       	ldi	r24, 0x08	; 8
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	99 87       	std	Y+9, r25	; 0x09
     fd8:	88 87       	std	Y+8, r24	; 0x08
     fda:	2f c0       	rjmp	.+94     	; 0x103a <DrawNumber+0x190>
			{
				toWrite = 0;
     fdc:	19 82       	std	Y+1, r1	; 0x01
				for (char i = 0; i < 8; i++)
     fde:	1a 86       	std	Y+10, r1	; 0x0a
     fe0:	22 c0       	rjmp	.+68     	; 0x1026 <DrawNumber+0x17c>
				{
					toWrite += (two[y][i] << i);
     fe2:	8a 85       	ldd	r24, Y+10	; 0x0a
     fe4:	88 2f       	mov	r24, r24
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	28 85       	ldd	r18, Y+8	; 0x08
     fea:	39 85       	ldd	r19, Y+9	; 0x09
     fec:	22 0f       	add	r18, r18
     fee:	33 1f       	adc	r19, r19
     ff0:	22 0f       	add	r18, r18
     ff2:	33 1f       	adc	r19, r19
     ff4:	22 0f       	add	r18, r18
     ff6:	33 1f       	adc	r19, r19
     ff8:	82 0f       	add	r24, r18
     ffa:	93 1f       	adc	r25, r19
     ffc:	84 59       	subi	r24, 0x94	; 148
     ffe:	9b 4f       	sbci	r25, 0xFB	; 251
    1000:	fc 01       	movw	r30, r24
    1002:	80 81       	ld	r24, Z
    1004:	88 2f       	mov	r24, r24
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	2a 85       	ldd	r18, Y+10	; 0x0a
    100a:	22 2f       	mov	r18, r18
    100c:	30 e0       	ldi	r19, 0x00	; 0
    100e:	02 c0       	rjmp	.+4      	; 0x1014 <DrawNumber+0x16a>
    1010:	88 0f       	add	r24, r24
    1012:	99 1f       	adc	r25, r25
    1014:	2a 95       	dec	r18
    1016:	e2 f7       	brpl	.-8      	; 0x1010 <DrawNumber+0x166>
    1018:	98 2f       	mov	r25, r24
    101a:	89 81       	ldd	r24, Y+1	; 0x01
    101c:	89 0f       	add	r24, r25
    101e:	89 83       	std	Y+1, r24	; 0x01
			break;
		case 2:
			for (int y = 8; y >= 0; y--)
			{
				toWrite = 0;
				for (char i = 0; i < 8; i++)
    1020:	8a 85       	ldd	r24, Y+10	; 0x0a
    1022:	8f 5f       	subi	r24, 0xFF	; 255
    1024:	8a 87       	std	Y+10, r24	; 0x0a
    1026:	8a 85       	ldd	r24, Y+10	; 0x0a
    1028:	88 30       	cpi	r24, 0x08	; 8
				{
					toWrite += (two[y][i] << i);
				}
				
				SetPixel(toWrite);
    102a:	d8 f2       	brcs	.-74     	; 0xfe2 <DrawNumber+0x138>
    102c:	89 81       	ldd	r24, Y+1	; 0x01
    102e:	74 d9       	rcall	.-3352   	; 0x318 <SetPixel>
				
				SetPixel(toWrite);
			}
			break;
		case 2:
			for (int y = 8; y >= 0; y--)
    1030:	88 85       	ldd	r24, Y+8	; 0x08
    1032:	99 85       	ldd	r25, Y+9	; 0x09
    1034:	01 97       	sbiw	r24, 0x01	; 1
    1036:	99 87       	std	Y+9, r25	; 0x09
    1038:	88 87       	std	Y+8, r24	; 0x08
    103a:	88 85       	ldd	r24, Y+8	; 0x08
    103c:	99 85       	ldd	r25, Y+9	; 0x09
    103e:	99 23       	and	r25, r25
    1040:	6c f6       	brge	.-102    	; 0xfdc <DrawNumber+0x132>
					toWrite += (two[y][i] << i);
				}
				
				SetPixel(toWrite);
			}
			break;
    1042:	ca c1       	rjmp	.+916    	; 0x13d8 <DrawNumber+0x52e>
		case 3:
			for (int y = 8; y >= 0; y--)
    1044:	88 e0       	ldi	r24, 0x08	; 8
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	9c 87       	std	Y+12, r25	; 0x0c
    104a:	8b 87       	std	Y+11, r24	; 0x0b
    104c:	2f c0       	rjmp	.+94     	; 0x10ac <DrawNumber+0x202>
			{
				toWrite = 0;
    104e:	19 82       	std	Y+1, r1	; 0x01
				for (char i = 0; i < 8; i++)
    1050:	1d 86       	std	Y+13, r1	; 0x0d
    1052:	22 c0       	rjmp	.+68     	; 0x1098 <DrawNumber+0x1ee>
				{
					toWrite += (three[y][i] << i);
    1054:	8d 85       	ldd	r24, Y+13	; 0x0d
    1056:	88 2f       	mov	r24, r24
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	2b 85       	ldd	r18, Y+11	; 0x0b
    105c:	3c 85       	ldd	r19, Y+12	; 0x0c
    105e:	22 0f       	add	r18, r18
    1060:	33 1f       	adc	r19, r19
    1062:	22 0f       	add	r18, r18
    1064:	33 1f       	adc	r19, r19
    1066:	22 0f       	add	r18, r18
    1068:	33 1f       	adc	r19, r19
    106a:	82 0f       	add	r24, r18
    106c:	93 1f       	adc	r25, r19
    106e:	8c 54       	subi	r24, 0x4C	; 76
    1070:	9b 4f       	sbci	r25, 0xFB	; 251
    1072:	fc 01       	movw	r30, r24
    1074:	80 81       	ld	r24, Z
    1076:	88 2f       	mov	r24, r24
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	2d 85       	ldd	r18, Y+13	; 0x0d
    107c:	22 2f       	mov	r18, r18
    107e:	30 e0       	ldi	r19, 0x00	; 0
    1080:	02 c0       	rjmp	.+4      	; 0x1086 <DrawNumber+0x1dc>
    1082:	88 0f       	add	r24, r24
    1084:	99 1f       	adc	r25, r25
    1086:	2a 95       	dec	r18
    1088:	e2 f7       	brpl	.-8      	; 0x1082 <DrawNumber+0x1d8>
    108a:	98 2f       	mov	r25, r24
    108c:	89 81       	ldd	r24, Y+1	; 0x01
    108e:	89 0f       	add	r24, r25
    1090:	89 83       	std	Y+1, r24	; 0x01
			break;
		case 3:
			for (int y = 8; y >= 0; y--)
			{
				toWrite = 0;
				for (char i = 0; i < 8; i++)
    1092:	8d 85       	ldd	r24, Y+13	; 0x0d
    1094:	8f 5f       	subi	r24, 0xFF	; 255
    1096:	8d 87       	std	Y+13, r24	; 0x0d
    1098:	8d 85       	ldd	r24, Y+13	; 0x0d
    109a:	88 30       	cpi	r24, 0x08	; 8
				{
					toWrite += (three[y][i] << i);
				}
				
				SetPixel(toWrite);
    109c:	d8 f2       	brcs	.-74     	; 0x1054 <DrawNumber+0x1aa>
    109e:	89 81       	ldd	r24, Y+1	; 0x01
    10a0:	3b d9       	rcall	.-3466   	; 0x318 <SetPixel>
				
				SetPixel(toWrite);
			}
			break;
		case 3:
			for (int y = 8; y >= 0; y--)
    10a2:	8b 85       	ldd	r24, Y+11	; 0x0b
    10a4:	9c 85       	ldd	r25, Y+12	; 0x0c
    10a6:	01 97       	sbiw	r24, 0x01	; 1
    10a8:	9c 87       	std	Y+12, r25	; 0x0c
    10aa:	8b 87       	std	Y+11, r24	; 0x0b
    10ac:	8b 85       	ldd	r24, Y+11	; 0x0b
    10ae:	9c 85       	ldd	r25, Y+12	; 0x0c
    10b0:	99 23       	and	r25, r25
    10b2:	6c f6       	brge	.-102    	; 0x104e <DrawNumber+0x1a4>
					toWrite += (three[y][i] << i);
				}
				
				SetPixel(toWrite);
			}
			break;
    10b4:	91 c1       	rjmp	.+802    	; 0x13d8 <DrawNumber+0x52e>
		case 4:
			for (int y = 8; y >= 0; y--)
    10b6:	88 e0       	ldi	r24, 0x08	; 8
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	9f 87       	std	Y+15, r25	; 0x0f
    10bc:	8e 87       	std	Y+14, r24	; 0x0e
    10be:	2f c0       	rjmp	.+94     	; 0x111e <DrawNumber+0x274>
			{
				toWrite = 0;
    10c0:	19 82       	std	Y+1, r1	; 0x01
				for (char i = 0; i < 8; i++)
    10c2:	18 8a       	std	Y+16, r1	; 0x10
    10c4:	22 c0       	rjmp	.+68     	; 0x110a <DrawNumber+0x260>
				{
					toWrite += (four[y][i] << i);
    10c6:	88 89       	ldd	r24, Y+16	; 0x10
    10c8:	88 2f       	mov	r24, r24
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	2e 85       	ldd	r18, Y+14	; 0x0e
    10ce:	3f 85       	ldd	r19, Y+15	; 0x0f
    10d0:	22 0f       	add	r18, r18
    10d2:	33 1f       	adc	r19, r19
    10d4:	22 0f       	add	r18, r18
    10d6:	33 1f       	adc	r19, r19
    10d8:	22 0f       	add	r18, r18
    10da:	33 1f       	adc	r19, r19
    10dc:	82 0f       	add	r24, r18
    10de:	93 1f       	adc	r25, r19
    10e0:	84 50       	subi	r24, 0x04	; 4
    10e2:	9b 4f       	sbci	r25, 0xFB	; 251
    10e4:	fc 01       	movw	r30, r24
    10e6:	80 81       	ld	r24, Z
    10e8:	88 2f       	mov	r24, r24
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	28 89       	ldd	r18, Y+16	; 0x10
    10ee:	22 2f       	mov	r18, r18
    10f0:	30 e0       	ldi	r19, 0x00	; 0
    10f2:	02 c0       	rjmp	.+4      	; 0x10f8 <DrawNumber+0x24e>
    10f4:	88 0f       	add	r24, r24
    10f6:	99 1f       	adc	r25, r25
    10f8:	2a 95       	dec	r18
    10fa:	e2 f7       	brpl	.-8      	; 0x10f4 <DrawNumber+0x24a>
    10fc:	98 2f       	mov	r25, r24
    10fe:	89 81       	ldd	r24, Y+1	; 0x01
    1100:	89 0f       	add	r24, r25
    1102:	89 83       	std	Y+1, r24	; 0x01
			break;
		case 4:
			for (int y = 8; y >= 0; y--)
			{
				toWrite = 0;
				for (char i = 0; i < 8; i++)
    1104:	88 89       	ldd	r24, Y+16	; 0x10
    1106:	8f 5f       	subi	r24, 0xFF	; 255
    1108:	88 8b       	std	Y+16, r24	; 0x10
    110a:	88 89       	ldd	r24, Y+16	; 0x10
    110c:	88 30       	cpi	r24, 0x08	; 8
				{
					toWrite += (four[y][i] << i);
				}
				
				SetPixel(toWrite);
    110e:	d8 f2       	brcs	.-74     	; 0x10c6 <DrawNumber+0x21c>
    1110:	89 81       	ldd	r24, Y+1	; 0x01
    1112:	02 d9       	rcall	.-3580   	; 0x318 <SetPixel>
				
				SetPixel(toWrite);
			}
			break;
		case 4:
			for (int y = 8; y >= 0; y--)
    1114:	8e 85       	ldd	r24, Y+14	; 0x0e
    1116:	9f 85       	ldd	r25, Y+15	; 0x0f
    1118:	01 97       	sbiw	r24, 0x01	; 1
    111a:	9f 87       	std	Y+15, r25	; 0x0f
    111c:	8e 87       	std	Y+14, r24	; 0x0e
    111e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1120:	9f 85       	ldd	r25, Y+15	; 0x0f
    1122:	99 23       	and	r25, r25
    1124:	6c f6       	brge	.-102    	; 0x10c0 <DrawNumber+0x216>
					toWrite += (four[y][i] << i);
				}
				
				SetPixel(toWrite);
			}
			break;
    1126:	58 c1       	rjmp	.+688    	; 0x13d8 <DrawNumber+0x52e>
		case 5:
			for (int y = 8; y >= 0; y--)
    1128:	88 e0       	ldi	r24, 0x08	; 8
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	9a 8b       	std	Y+18, r25	; 0x12
    112e:	89 8b       	std	Y+17, r24	; 0x11
    1130:	2f c0       	rjmp	.+94     	; 0x1190 <DrawNumber+0x2e6>
			{
				toWrite = 0;
    1132:	19 82       	std	Y+1, r1	; 0x01
				for (char i = 0; i < 8; i++)
    1134:	1b 8a       	std	Y+19, r1	; 0x13
    1136:	22 c0       	rjmp	.+68     	; 0x117c <DrawNumber+0x2d2>
				{
					toWrite += (five[y][i] << i);
    1138:	8b 89       	ldd	r24, Y+19	; 0x13
    113a:	88 2f       	mov	r24, r24
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	29 89       	ldd	r18, Y+17	; 0x11
    1140:	3a 89       	ldd	r19, Y+18	; 0x12
    1142:	22 0f       	add	r18, r18
    1144:	33 1f       	adc	r19, r19
    1146:	22 0f       	add	r18, r18
    1148:	33 1f       	adc	r19, r19
    114a:	22 0f       	add	r18, r18
    114c:	33 1f       	adc	r19, r19
    114e:	82 0f       	add	r24, r18
    1150:	93 1f       	adc	r25, r19
    1152:	8c 5b       	subi	r24, 0xBC	; 188
    1154:	9a 4f       	sbci	r25, 0xFA	; 250
    1156:	fc 01       	movw	r30, r24
    1158:	80 81       	ld	r24, Z
    115a:	88 2f       	mov	r24, r24
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	2b 89       	ldd	r18, Y+19	; 0x13
    1160:	22 2f       	mov	r18, r18
    1162:	30 e0       	ldi	r19, 0x00	; 0
    1164:	02 c0       	rjmp	.+4      	; 0x116a <DrawNumber+0x2c0>
    1166:	88 0f       	add	r24, r24
    1168:	99 1f       	adc	r25, r25
    116a:	2a 95       	dec	r18
    116c:	e2 f7       	brpl	.-8      	; 0x1166 <DrawNumber+0x2bc>
    116e:	98 2f       	mov	r25, r24
    1170:	89 81       	ldd	r24, Y+1	; 0x01
    1172:	89 0f       	add	r24, r25
    1174:	89 83       	std	Y+1, r24	; 0x01
			break;
		case 5:
			for (int y = 8; y >= 0; y--)
			{
				toWrite = 0;
				for (char i = 0; i < 8; i++)
    1176:	8b 89       	ldd	r24, Y+19	; 0x13
    1178:	8f 5f       	subi	r24, 0xFF	; 255
    117a:	8b 8b       	std	Y+19, r24	; 0x13
    117c:	8b 89       	ldd	r24, Y+19	; 0x13
    117e:	88 30       	cpi	r24, 0x08	; 8
				{
					toWrite += (five[y][i] << i);
				}
				
				SetPixel(toWrite);
    1180:	d8 f2       	brcs	.-74     	; 0x1138 <DrawNumber+0x28e>
    1182:	89 81       	ldd	r24, Y+1	; 0x01
    1184:	c9 d8       	rcall	.-3694   	; 0x318 <SetPixel>
				
				SetPixel(toWrite);
			}
			break;
		case 5:
			for (int y = 8; y >= 0; y--)
    1186:	89 89       	ldd	r24, Y+17	; 0x11
    1188:	9a 89       	ldd	r25, Y+18	; 0x12
    118a:	01 97       	sbiw	r24, 0x01	; 1
    118c:	9a 8b       	std	Y+18, r25	; 0x12
    118e:	89 8b       	std	Y+17, r24	; 0x11
    1190:	89 89       	ldd	r24, Y+17	; 0x11
    1192:	9a 89       	ldd	r25, Y+18	; 0x12
    1194:	99 23       	and	r25, r25
    1196:	6c f6       	brge	.-102    	; 0x1132 <DrawNumber+0x288>
					toWrite += (five[y][i] << i);
				}
				
				SetPixel(toWrite);
			}
			break;
    1198:	1f c1       	rjmp	.+574    	; 0x13d8 <DrawNumber+0x52e>
		case 6:
			for (int y = 8; y >= 0; y--)
    119a:	88 e0       	ldi	r24, 0x08	; 8
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	9d 8b       	std	Y+21, r25	; 0x15
    11a0:	8c 8b       	std	Y+20, r24	; 0x14
    11a2:	2f c0       	rjmp	.+94     	; 0x1202 <DrawNumber+0x358>
			{
				toWrite = 0;
    11a4:	19 82       	std	Y+1, r1	; 0x01
				for (char i = 0; i < 8; i++)
    11a6:	1e 8a       	std	Y+22, r1	; 0x16
    11a8:	22 c0       	rjmp	.+68     	; 0x11ee <DrawNumber+0x344>
				{
					toWrite += (six[y][i] << i);
    11aa:	8e 89       	ldd	r24, Y+22	; 0x16
    11ac:	88 2f       	mov	r24, r24
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	2c 89       	ldd	r18, Y+20	; 0x14
    11b2:	3d 89       	ldd	r19, Y+21	; 0x15
    11b4:	22 0f       	add	r18, r18
    11b6:	33 1f       	adc	r19, r19
    11b8:	22 0f       	add	r18, r18
    11ba:	33 1f       	adc	r19, r19
    11bc:	22 0f       	add	r18, r18
    11be:	33 1f       	adc	r19, r19
    11c0:	82 0f       	add	r24, r18
    11c2:	93 1f       	adc	r25, r19
    11c4:	84 57       	subi	r24, 0x74	; 116
    11c6:	9a 4f       	sbci	r25, 0xFA	; 250
    11c8:	fc 01       	movw	r30, r24
    11ca:	80 81       	ld	r24, Z
    11cc:	88 2f       	mov	r24, r24
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	2e 89       	ldd	r18, Y+22	; 0x16
    11d2:	22 2f       	mov	r18, r18
    11d4:	30 e0       	ldi	r19, 0x00	; 0
    11d6:	02 c0       	rjmp	.+4      	; 0x11dc <DrawNumber+0x332>
    11d8:	88 0f       	add	r24, r24
    11da:	99 1f       	adc	r25, r25
    11dc:	2a 95       	dec	r18
    11de:	e2 f7       	brpl	.-8      	; 0x11d8 <DrawNumber+0x32e>
    11e0:	98 2f       	mov	r25, r24
    11e2:	89 81       	ldd	r24, Y+1	; 0x01
    11e4:	89 0f       	add	r24, r25
    11e6:	89 83       	std	Y+1, r24	; 0x01
			break;
		case 6:
			for (int y = 8; y >= 0; y--)
			{
				toWrite = 0;
				for (char i = 0; i < 8; i++)
    11e8:	8e 89       	ldd	r24, Y+22	; 0x16
    11ea:	8f 5f       	subi	r24, 0xFF	; 255
    11ec:	8e 8b       	std	Y+22, r24	; 0x16
    11ee:	8e 89       	ldd	r24, Y+22	; 0x16
    11f0:	88 30       	cpi	r24, 0x08	; 8
				{
					toWrite += (six[y][i] << i);
				}
				
				SetPixel(toWrite);
    11f2:	d8 f2       	brcs	.-74     	; 0x11aa <DrawNumber+0x300>
    11f4:	89 81       	ldd	r24, Y+1	; 0x01
    11f6:	90 d8       	rcall	.-3808   	; 0x318 <SetPixel>
				
				SetPixel(toWrite);
			}
			break;
		case 6:
			for (int y = 8; y >= 0; y--)
    11f8:	8c 89       	ldd	r24, Y+20	; 0x14
    11fa:	9d 89       	ldd	r25, Y+21	; 0x15
    11fc:	01 97       	sbiw	r24, 0x01	; 1
    11fe:	9d 8b       	std	Y+21, r25	; 0x15
    1200:	8c 8b       	std	Y+20, r24	; 0x14
    1202:	8c 89       	ldd	r24, Y+20	; 0x14
    1204:	9d 89       	ldd	r25, Y+21	; 0x15
    1206:	99 23       	and	r25, r25
    1208:	6c f6       	brge	.-102    	; 0x11a4 <DrawNumber+0x2fa>
					toWrite += (six[y][i] << i);
				}
				
				SetPixel(toWrite);
			}
			break;
    120a:	e6 c0       	rjmp	.+460    	; 0x13d8 <DrawNumber+0x52e>
		case 7:
			for (int y = 8; y >= 0; y--)
    120c:	88 e0       	ldi	r24, 0x08	; 8
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	98 8f       	std	Y+24, r25	; 0x18
    1212:	8f 8b       	std	Y+23, r24	; 0x17
    1214:	2f c0       	rjmp	.+94     	; 0x1274 <DrawNumber+0x3ca>
			{
				toWrite = 0;
    1216:	19 82       	std	Y+1, r1	; 0x01
				for (char i = 0; i < 8; i++)
    1218:	19 8e       	std	Y+25, r1	; 0x19
    121a:	22 c0       	rjmp	.+68     	; 0x1260 <DrawNumber+0x3b6>
				{
					toWrite += (seven[y][i] << i);
    121c:	89 8d       	ldd	r24, Y+25	; 0x19
    121e:	88 2f       	mov	r24, r24
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	2f 89       	ldd	r18, Y+23	; 0x17
    1224:	38 8d       	ldd	r19, Y+24	; 0x18
    1226:	22 0f       	add	r18, r18
    1228:	33 1f       	adc	r19, r19
    122a:	22 0f       	add	r18, r18
    122c:	33 1f       	adc	r19, r19
    122e:	22 0f       	add	r18, r18
    1230:	33 1f       	adc	r19, r19
    1232:	82 0f       	add	r24, r18
    1234:	93 1f       	adc	r25, r19
    1236:	8c 52       	subi	r24, 0x2C	; 44
    1238:	9a 4f       	sbci	r25, 0xFA	; 250
    123a:	fc 01       	movw	r30, r24
    123c:	80 81       	ld	r24, Z
    123e:	88 2f       	mov	r24, r24
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	29 8d       	ldd	r18, Y+25	; 0x19
    1244:	22 2f       	mov	r18, r18
    1246:	30 e0       	ldi	r19, 0x00	; 0
    1248:	02 c0       	rjmp	.+4      	; 0x124e <DrawNumber+0x3a4>
    124a:	88 0f       	add	r24, r24
    124c:	99 1f       	adc	r25, r25
    124e:	2a 95       	dec	r18
    1250:	e2 f7       	brpl	.-8      	; 0x124a <DrawNumber+0x3a0>
    1252:	98 2f       	mov	r25, r24
    1254:	89 81       	ldd	r24, Y+1	; 0x01
    1256:	89 0f       	add	r24, r25
    1258:	89 83       	std	Y+1, r24	; 0x01
			break;
		case 7:
			for (int y = 8; y >= 0; y--)
			{
				toWrite = 0;
				for (char i = 0; i < 8; i++)
    125a:	89 8d       	ldd	r24, Y+25	; 0x19
    125c:	8f 5f       	subi	r24, 0xFF	; 255
    125e:	89 8f       	std	Y+25, r24	; 0x19
    1260:	89 8d       	ldd	r24, Y+25	; 0x19
    1262:	88 30       	cpi	r24, 0x08	; 8
				{
					toWrite += (seven[y][i] << i);
				}
				
				SetPixel(toWrite);
    1264:	d8 f2       	brcs	.-74     	; 0x121c <DrawNumber+0x372>
    1266:	89 81       	ldd	r24, Y+1	; 0x01
    1268:	57 d8       	rcall	.-3922   	; 0x318 <SetPixel>
				
				SetPixel(toWrite);
			}
			break;
		case 7:
			for (int y = 8; y >= 0; y--)
    126a:	8f 89       	ldd	r24, Y+23	; 0x17
    126c:	98 8d       	ldd	r25, Y+24	; 0x18
    126e:	01 97       	sbiw	r24, 0x01	; 1
    1270:	98 8f       	std	Y+24, r25	; 0x18
    1272:	8f 8b       	std	Y+23, r24	; 0x17
    1274:	8f 89       	ldd	r24, Y+23	; 0x17
    1276:	98 8d       	ldd	r25, Y+24	; 0x18
    1278:	99 23       	and	r25, r25
    127a:	6c f6       	brge	.-102    	; 0x1216 <DrawNumber+0x36c>
					toWrite += (seven[y][i] << i);
				}
				
				SetPixel(toWrite);
			}
			break;
    127c:	ad c0       	rjmp	.+346    	; 0x13d8 <DrawNumber+0x52e>
		case 8:
			for (int y = 8; y >= 0; y--)
    127e:	88 e0       	ldi	r24, 0x08	; 8
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	9b 8f       	std	Y+27, r25	; 0x1b
    1284:	8a 8f       	std	Y+26, r24	; 0x1a
    1286:	2f c0       	rjmp	.+94     	; 0x12e6 <DrawNumber+0x43c>
			{
				toWrite = 0;
    1288:	19 82       	std	Y+1, r1	; 0x01
				for (char i = 0; i < 8; i++)
    128a:	1c 8e       	std	Y+28, r1	; 0x1c
    128c:	22 c0       	rjmp	.+68     	; 0x12d2 <DrawNumber+0x428>
				{
					toWrite += (eight[y][i] << i);
    128e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1290:	88 2f       	mov	r24, r24
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	2a 8d       	ldd	r18, Y+26	; 0x1a
    1296:	3b 8d       	ldd	r19, Y+27	; 0x1b
    1298:	22 0f       	add	r18, r18
    129a:	33 1f       	adc	r19, r19
    129c:	22 0f       	add	r18, r18
    129e:	33 1f       	adc	r19, r19
    12a0:	22 0f       	add	r18, r18
    12a2:	33 1f       	adc	r19, r19
    12a4:	82 0f       	add	r24, r18
    12a6:	93 1f       	adc	r25, r19
    12a8:	84 5e       	subi	r24, 0xE4	; 228
    12aa:	99 4f       	sbci	r25, 0xF9	; 249
    12ac:	fc 01       	movw	r30, r24
    12ae:	80 81       	ld	r24, Z
    12b0:	88 2f       	mov	r24, r24
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	2c 8d       	ldd	r18, Y+28	; 0x1c
    12b6:	22 2f       	mov	r18, r18
    12b8:	30 e0       	ldi	r19, 0x00	; 0
    12ba:	02 c0       	rjmp	.+4      	; 0x12c0 <DrawNumber+0x416>
    12bc:	88 0f       	add	r24, r24
    12be:	99 1f       	adc	r25, r25
    12c0:	2a 95       	dec	r18
    12c2:	e2 f7       	brpl	.-8      	; 0x12bc <DrawNumber+0x412>
    12c4:	98 2f       	mov	r25, r24
    12c6:	89 81       	ldd	r24, Y+1	; 0x01
    12c8:	89 0f       	add	r24, r25
			break;
		case 8:
			for (int y = 8; y >= 0; y--)
			{
				toWrite = 0;
				for (char i = 0; i < 8; i++)
    12ca:	89 83       	std	Y+1, r24	; 0x01
    12cc:	8c 8d       	ldd	r24, Y+28	; 0x1c
    12ce:	8f 5f       	subi	r24, 0xFF	; 255
    12d0:	8c 8f       	std	Y+28, r24	; 0x1c
    12d2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    12d4:	88 30       	cpi	r24, 0x08	; 8
				{
					toWrite += (eight[y][i] << i);
				}
				
				SetPixel(toWrite);
    12d6:	d8 f2       	brcs	.-74     	; 0x128e <DrawNumber+0x3e4>
    12d8:	89 81       	ldd	r24, Y+1	; 0x01
    12da:	1e d8       	rcall	.-4036   	; 0x318 <SetPixel>
				
				SetPixel(toWrite);
			}
			break;
		case 8:
			for (int y = 8; y >= 0; y--)
    12dc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    12de:	9b 8d       	ldd	r25, Y+27	; 0x1b
    12e0:	01 97       	sbiw	r24, 0x01	; 1
    12e2:	9b 8f       	std	Y+27, r25	; 0x1b
    12e4:	8a 8f       	std	Y+26, r24	; 0x1a
    12e6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    12e8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    12ea:	99 23       	and	r25, r25
    12ec:	6c f6       	brge	.-102    	; 0x1288 <DrawNumber+0x3de>
					toWrite += (eight[y][i] << i);
				}
				
				SetPixel(toWrite);
			}
			break;
    12ee:	74 c0       	rjmp	.+232    	; 0x13d8 <DrawNumber+0x52e>
		case 9:
			for (int y = 8; y >= 0; y--)
    12f0:	88 e0       	ldi	r24, 0x08	; 8
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	9e 8f       	std	Y+30, r25	; 0x1e
    12f6:	8d 8f       	std	Y+29, r24	; 0x1d
    12f8:	30 c0       	rjmp	.+96     	; 0x135a <DrawNumber+0x4b0>
			{
				toWrite = 0;
    12fa:	19 82       	std	Y+1, r1	; 0x01
				for (char i = 0; i < 8; i++)
    12fc:	1f 8e       	std	Y+31, r1	; 0x1f
    12fe:	22 c0       	rjmp	.+68     	; 0x1344 <DrawNumber+0x49a>
				{
					toWrite += (nine[y][i] << i);
    1300:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1302:	88 2f       	mov	r24, r24
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	2d 8d       	ldd	r18, Y+29	; 0x1d
    1308:	3e 8d       	ldd	r19, Y+30	; 0x1e
    130a:	22 0f       	add	r18, r18
    130c:	33 1f       	adc	r19, r19
    130e:	22 0f       	add	r18, r18
    1310:	33 1f       	adc	r19, r19
    1312:	22 0f       	add	r18, r18
    1314:	33 1f       	adc	r19, r19
    1316:	82 0f       	add	r24, r18
    1318:	93 1f       	adc	r25, r19
    131a:	8c 59       	subi	r24, 0x9C	; 156
    131c:	99 4f       	sbci	r25, 0xF9	; 249
    131e:	fc 01       	movw	r30, r24
    1320:	80 81       	ld	r24, Z
    1322:	88 2f       	mov	r24, r24
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	2f 8d       	ldd	r18, Y+31	; 0x1f
    1328:	22 2f       	mov	r18, r18
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	02 c0       	rjmp	.+4      	; 0x1332 <DrawNumber+0x488>
    132e:	88 0f       	add	r24, r24
    1330:	99 1f       	adc	r25, r25
    1332:	2a 95       	dec	r18
    1334:	e2 f7       	brpl	.-8      	; 0x132e <DrawNumber+0x484>
    1336:	98 2f       	mov	r25, r24
    1338:	89 81       	ldd	r24, Y+1	; 0x01
    133a:	89 0f       	add	r24, r25
    133c:	89 83       	std	Y+1, r24	; 0x01
			break;
		case 9:
			for (int y = 8; y >= 0; y--)
			{
				toWrite = 0;
				for (char i = 0; i < 8; i++)
    133e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1340:	8f 5f       	subi	r24, 0xFF	; 255
    1342:	8f 8f       	std	Y+31, r24	; 0x1f
    1344:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1346:	88 30       	cpi	r24, 0x08	; 8
    1348:	d8 f2       	brcs	.-74     	; 0x1300 <DrawNumber+0x456>
				{
					toWrite += (nine[y][i] << i);
				}
				
				SetPixel(toWrite);
    134a:	89 81       	ldd	r24, Y+1	; 0x01
    134c:	0e 94 8c 01 	call	0x318	; 0x318 <SetPixel>
				
				SetPixel(toWrite);
			}
			break;
		case 9:
			for (int y = 8; y >= 0; y--)
    1350:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1352:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1354:	01 97       	sbiw	r24, 0x01	; 1
    1356:	9e 8f       	std	Y+30, r25	; 0x1e
    1358:	8d 8f       	std	Y+29, r24	; 0x1d
    135a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    135c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    135e:	99 23       	and	r25, r25
    1360:	64 f6       	brge	.-104    	; 0x12fa <DrawNumber+0x450>
					toWrite += (nine[y][i] << i);
				}
				
				SetPixel(toWrite);
			}
			break;
    1362:	3a c0       	rjmp	.+116    	; 0x13d8 <DrawNumber+0x52e>
		default:
			for (int y = 8; y >= 0; y--)
    1364:	88 e0       	ldi	r24, 0x08	; 8
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	99 a3       	std	Y+33, r25	; 0x21
    136a:	88 a3       	std	Y+32, r24	; 0x20
    136c:	30 c0       	rjmp	.+96     	; 0x13ce <DrawNumber+0x524>
			{
				toWrite = 0;
    136e:	19 82       	std	Y+1, r1	; 0x01
				for (char i = 0; i < 8; i++)
    1370:	1a a2       	std	Y+34, r1	; 0x22
    1372:	22 c0       	rjmp	.+68     	; 0x13b8 <DrawNumber+0x50e>
				{
					toWrite += (empty[y][i] << i);
    1374:	8a a1       	ldd	r24, Y+34	; 0x22
    1376:	88 2f       	mov	r24, r24
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	28 a1       	ldd	r18, Y+32	; 0x20
    137c:	39 a1       	ldd	r19, Y+33	; 0x21
    137e:	22 0f       	add	r18, r18
    1380:	33 1f       	adc	r19, r19
    1382:	22 0f       	add	r18, r18
    1384:	33 1f       	adc	r19, r19
    1386:	22 0f       	add	r18, r18
    1388:	33 1f       	adc	r19, r19
    138a:	82 0f       	add	r24, r18
    138c:	93 1f       	adc	r25, r19
    138e:	86 53       	subi	r24, 0x36	; 54
    1390:	99 4f       	sbci	r25, 0xF9	; 249
    1392:	fc 01       	movw	r30, r24
    1394:	80 81       	ld	r24, Z
    1396:	88 2f       	mov	r24, r24
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	2a a1       	ldd	r18, Y+34	; 0x22
    139c:	22 2f       	mov	r18, r18
    139e:	30 e0       	ldi	r19, 0x00	; 0
    13a0:	02 c0       	rjmp	.+4      	; 0x13a6 <DrawNumber+0x4fc>
    13a2:	88 0f       	add	r24, r24
    13a4:	99 1f       	adc	r25, r25
    13a6:	2a 95       	dec	r18
    13a8:	e2 f7       	brpl	.-8      	; 0x13a2 <DrawNumber+0x4f8>
    13aa:	98 2f       	mov	r25, r24
    13ac:	89 81       	ldd	r24, Y+1	; 0x01
    13ae:	89 0f       	add	r24, r25
    13b0:	89 83       	std	Y+1, r24	; 0x01
			break;
		default:
			for (int y = 8; y >= 0; y--)
			{
				toWrite = 0;
				for (char i = 0; i < 8; i++)
    13b2:	8a a1       	ldd	r24, Y+34	; 0x22
    13b4:	8f 5f       	subi	r24, 0xFF	; 255
    13b6:	8a a3       	std	Y+34, r24	; 0x22
    13b8:	8a a1       	ldd	r24, Y+34	; 0x22
    13ba:	88 30       	cpi	r24, 0x08	; 8
    13bc:	d8 f2       	brcs	.-74     	; 0x1374 <DrawNumber+0x4ca>
				{
					toWrite += (empty[y][i] << i);
				}
				
				SetPixel(toWrite);
    13be:	89 81       	ldd	r24, Y+1	; 0x01
    13c0:	0e 94 8c 01 	call	0x318	; 0x318 <SetPixel>
				
				SetPixel(toWrite);
			}
			break;
		default:
			for (int y = 8; y >= 0; y--)
    13c4:	88 a1       	ldd	r24, Y+32	; 0x20
    13c6:	99 a1       	ldd	r25, Y+33	; 0x21
    13c8:	01 97       	sbiw	r24, 0x01	; 1
    13ca:	99 a3       	std	Y+33, r25	; 0x21
    13cc:	88 a3       	std	Y+32, r24	; 0x20
    13ce:	88 a1       	ldd	r24, Y+32	; 0x20
    13d0:	99 a1       	ldd	r25, Y+33	; 0x21
    13d2:	99 23       	and	r25, r25
    13d4:	64 f6       	brge	.-104    	; 0x136e <DrawNumber+0x4c4>
					toWrite += (empty[y][i] << i);
				}
				
				SetPixel(toWrite);
			}
			break;
    13d6:	00 00       	nop
	}
}
    13d8:	00 00       	nop
    13da:	a3 96       	adiw	r28, 0x23	; 35
    13dc:	0f b6       	in	r0, 0x3f	; 63
    13de:	f8 94       	cli
    13e0:	de bf       	out	0x3e, r29	; 62
    13e2:	0f be       	out	0x3f, r0	; 63
    13e4:	cd bf       	out	0x3d, r28	; 61
    13e6:	df 91       	pop	r29
    13e8:	cf 91       	pop	r28
    13ea:	08 95       	ret

000013ec <Init>:

// 0b00101010 0b01010100

void Init()
{
    13ec:	cf 93       	push	r28
    13ee:	df 93       	push	r29
    13f0:	cd b7       	in	r28, 0x3d	; 61
    13f2:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0x0;
    13f4:	81 e2       	ldi	r24, 0x21	; 33
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	fc 01       	movw	r30, r24
    13fa:	10 82       	st	Z, r1
	DDRB |= 0b11111111;
    13fc:	84 e2       	ldi	r24, 0x24	; 36
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	fc 01       	movw	r30, r24
    1402:	80 81       	ld	r24, Z
    1404:	84 e2       	ldi	r24, 0x24	; 36
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	2f ef       	ldi	r18, 0xFF	; 255
    140a:	fc 01       	movw	r30, r24
    140c:	20 83       	st	Z, r18
	DDRD |= 0b11111111;
    140e:	8a e2       	ldi	r24, 0x2A	; 42
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	fc 01       	movw	r30, r24
    1414:	80 81       	ld	r24, Z
    1416:	8a e2       	ldi	r24, 0x2A	; 42
    1418:	90 e0       	ldi	r25, 0x00	; 0
    141a:	2f ef       	ldi	r18, 0xFF	; 255
    141c:	fc 01       	movw	r30, r24
    141e:	20 83       	st	Z, r18
	
	PORTD |= 0b10000000;
    1420:	8b e2       	ldi	r24, 0x2B	; 43
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	2b e2       	ldi	r18, 0x2B	; 43
    1426:	30 e0       	ldi	r19, 0x00	; 0
    1428:	f9 01       	movw	r30, r18
    142a:	20 81       	ld	r18, Z
    142c:	20 68       	ori	r18, 0x80	; 128
    142e:	fc 01       	movw	r30, r24
    1430:	20 83       	st	Z, r18
	
	ADMUX |= 0b01000000;
    1432:	8c e7       	ldi	r24, 0x7C	; 124
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	2c e7       	ldi	r18, 0x7C	; 124
    1438:	30 e0       	ldi	r19, 0x00	; 0
    143a:	f9 01       	movw	r30, r18
    143c:	20 81       	ld	r18, Z
    143e:	20 64       	ori	r18, 0x40	; 64
    1440:	fc 01       	movw	r30, r24
    1442:	20 83       	st	Z, r18
	ADCSRA |= 0b10000101; //prescaler 128 32?
    1444:	8a e7       	ldi	r24, 0x7A	; 122
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	2a e7       	ldi	r18, 0x7A	; 122
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	f9 01       	movw	r30, r18
    144e:	20 81       	ld	r18, Z
    1450:	25 68       	ori	r18, 0x85	; 133
    1452:	fc 01       	movw	r30, r24
    1454:	20 83       	st	Z, r18
	//ADMUX |= 0b01000001;
	//ADCSRA |= 0b10000101;
	
	srandom(GetSeed());
    1456:	09 d0       	rcall	.+18     	; 0x146a <GetSeed>
    1458:	dc 01       	movw	r26, r24
    145a:	cb 01       	movw	r24, r22
    145c:	bc 01       	movw	r22, r24
    145e:	cd 01       	movw	r24, r26
    1460:	24 d6       	rcall	.+3144   	; 0x20aa <srandom>
}
    1462:	00 00       	nop
    1464:	df 91       	pop	r29
    1466:	cf 91       	pop	r28
    1468:	08 95       	ret

0000146a <GetSeed>:

long GetSeed()
{
    146a:	cf 93       	push	r28
    146c:	df 93       	push	r29
    146e:	00 d0       	rcall	.+0      	; 0x1470 <GetSeed+0x6>
    1470:	00 d0       	rcall	.+0      	; 0x1472 <GetSeed+0x8>
    1472:	cd b7       	in	r28, 0x3d	; 61
    1474:	de b7       	in	r29, 0x3e	; 62
	long seed = 0;
    1476:	19 82       	std	Y+1, r1	; 0x01
    1478:	1a 82       	std	Y+2, r1	; 0x02
    147a:	1b 82       	std	Y+3, r1	; 0x03
    147c:	1c 82       	std	Y+4, r1	; 0x04
	seed += ADCRead(0);
    147e:	80 e0       	ldi	r24, 0x00	; 0
    1480:	d4 d9       	rcall	.-3160   	; 0x82a <ADCRead>
    1482:	cc 01       	movw	r24, r24
    1484:	a0 e0       	ldi	r26, 0x00	; 0
    1486:	b0 e0       	ldi	r27, 0x00	; 0
    1488:	29 81       	ldd	r18, Y+1	; 0x01
    148a:	3a 81       	ldd	r19, Y+2	; 0x02
    148c:	4b 81       	ldd	r20, Y+3	; 0x03
    148e:	5c 81       	ldd	r21, Y+4	; 0x04
    1490:	82 0f       	add	r24, r18
    1492:	93 1f       	adc	r25, r19
    1494:	a4 1f       	adc	r26, r20
    1496:	b5 1f       	adc	r27, r21
    1498:	89 83       	std	Y+1, r24	; 0x01
    149a:	9a 83       	std	Y+2, r25	; 0x02
    149c:	ab 83       	std	Y+3, r26	; 0x03
    149e:	bc 83       	std	Y+4, r27	; 0x04
	seed += ADCRead(1);
    14a0:	81 e0       	ldi	r24, 0x01	; 1
    14a2:	c3 d9       	rcall	.-3194   	; 0x82a <ADCRead>
    14a4:	cc 01       	movw	r24, r24
    14a6:	a0 e0       	ldi	r26, 0x00	; 0
    14a8:	b0 e0       	ldi	r27, 0x00	; 0
    14aa:	29 81       	ldd	r18, Y+1	; 0x01
    14ac:	3a 81       	ldd	r19, Y+2	; 0x02
    14ae:	4b 81       	ldd	r20, Y+3	; 0x03
    14b0:	5c 81       	ldd	r21, Y+4	; 0x04
    14b2:	82 0f       	add	r24, r18
    14b4:	93 1f       	adc	r25, r19
    14b6:	a4 1f       	adc	r26, r20
    14b8:	b5 1f       	adc	r27, r21
    14ba:	89 83       	std	Y+1, r24	; 0x01
    14bc:	9a 83       	std	Y+2, r25	; 0x02
    14be:	ab 83       	std	Y+3, r26	; 0x03
    14c0:	bc 83       	std	Y+4, r27	; 0x04
	
	return seed;
    14c2:	89 81       	ldd	r24, Y+1	; 0x01
    14c4:	9a 81       	ldd	r25, Y+2	; 0x02
    14c6:	ab 81       	ldd	r26, Y+3	; 0x03
    14c8:	bc 81       	ldd	r27, Y+4	; 0x04
}
    14ca:	bc 01       	movw	r22, r24
    14cc:	cd 01       	movw	r24, r26
    14ce:	0f 90       	pop	r0
    14d0:	0f 90       	pop	r0
    14d2:	0f 90       	pop	r0
    14d4:	0f 90       	pop	r0
    14d6:	df 91       	pop	r29
    14d8:	cf 91       	pop	r28
    14da:	08 95       	ret

000014dc <ReadPix>:

char ReadPix(char id, char row){
    14dc:	cf 93       	push	r28
    14de:	df 93       	push	r29
    14e0:	cd b7       	in	r28, 0x3d	; 61
    14e2:	de b7       	in	r29, 0x3e	; 62
    14e4:	63 97       	sbiw	r28, 0x13	; 19
    14e6:	0f b6       	in	r0, 0x3f	; 63
    14e8:	f8 94       	cli
    14ea:	de bf       	out	0x3e, r29	; 62
    14ec:	0f be       	out	0x3f, r0	; 63
    14ee:	cd bf       	out	0x3d, r28	; 61
    14f0:	8a 8b       	std	Y+18, r24	; 0x12
    14f2:	6b 8b       	std	Y+19, r22	; 0x13
	char out = 0;
    14f4:	19 82       	std	Y+1, r1	; 0x01
	if (id == 0)
    14f6:	8a 89       	ldd	r24, Y+18	; 0x12
    14f8:	88 23       	and	r24, r24
    14fa:	29 f5       	brne	.+74     	; 0x1546 <ReadPix+0x6a>
	{
		for (int i = 3; i >= 0; i--)
    14fc:	83 e0       	ldi	r24, 0x03	; 3
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	9b 83       	std	Y+3, r25	; 0x03
    1502:	8a 83       	std	Y+2, r24	; 0x02
    1504:	1b c0       	rjmp	.+54     	; 0x153c <ReadPix+0x60>
		{
			out = out << 1;
    1506:	89 81       	ldd	r24, Y+1	; 0x01
    1508:	88 0f       	add	r24, r24
    150a:	89 83       	std	Y+1, r24	; 0x01
			out += blank[row][i];
    150c:	8b 89       	ldd	r24, Y+19	; 0x13
    150e:	88 2f       	mov	r24, r24
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	9c 01       	movw	r18, r24
    1514:	22 0f       	add	r18, r18
    1516:	33 1f       	adc	r19, r19
    1518:	22 0f       	add	r18, r18
    151a:	33 1f       	adc	r19, r19
    151c:	8a 81       	ldd	r24, Y+2	; 0x02
    151e:	9b 81       	ldd	r25, Y+3	; 0x03
    1520:	82 0f       	add	r24, r18
    1522:	93 1f       	adc	r25, r19
    1524:	86 54       	subi	r24, 0x46	; 70
    1526:	99 4f       	sbci	r25, 0xF9	; 249
    1528:	fc 01       	movw	r30, r24
    152a:	80 81       	ld	r24, Z
    152c:	99 81       	ldd	r25, Y+1	; 0x01
    152e:	89 0f       	add	r24, r25
    1530:	89 83       	std	Y+1, r24	; 0x01

char ReadPix(char id, char row){
	char out = 0;
	if (id == 0)
	{
		for (int i = 3; i >= 0; i--)
    1532:	8a 81       	ldd	r24, Y+2	; 0x02
    1534:	9b 81       	ldd	r25, Y+3	; 0x03
    1536:	01 97       	sbiw	r24, 0x01	; 1
    1538:	9b 83       	std	Y+3, r25	; 0x03
    153a:	8a 83       	std	Y+2, r24	; 0x02
    153c:	8a 81       	ldd	r24, Y+2	; 0x02
    153e:	9b 81       	ldd	r25, Y+3	; 0x03
    1540:	99 23       	and	r25, r25
    1542:	0c f7       	brge	.-62     	; 0x1506 <ReadPix+0x2a>
    1544:	1a c1       	rjmp	.+564    	; 0x177a <ReadPix+0x29e>
			out = out << 1;
			out += blank[row][i];
			
		}
	}
	else if (id >= 1 && id <= 240)
    1546:	8a 89       	ldd	r24, Y+18	; 0x12
    1548:	88 23       	and	r24, r24
    154a:	41 f1       	breq	.+80     	; 0x159c <ReadPix+0xc0>
    154c:	8a 89       	ldd	r24, Y+18	; 0x12
    154e:	81 3f       	cpi	r24, 0xF1	; 241
    1550:	28 f5       	brcc	.+74     	; 0x159c <ReadPix+0xc0>
	{
		for(int i = 3; i >= 0; i--)
    1552:	83 e0       	ldi	r24, 0x03	; 3
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	9d 83       	std	Y+5, r25	; 0x05
    1558:	8c 83       	std	Y+4, r24	; 0x04
    155a:	1b c0       	rjmp	.+54     	; 0x1592 <ReadPix+0xb6>
		{
			out = out << 1;
    155c:	89 81       	ldd	r24, Y+1	; 0x01
    155e:	88 0f       	add	r24, r24
    1560:	89 83       	std	Y+1, r24	; 0x01
			out += fill[row][i];
    1562:	8b 89       	ldd	r24, Y+19	; 0x13
    1564:	88 2f       	mov	r24, r24
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	9c 01       	movw	r18, r24
    156a:	22 0f       	add	r18, r18
    156c:	33 1f       	adc	r19, r19
    156e:	22 0f       	add	r18, r18
    1570:	33 1f       	adc	r19, r19
    1572:	8c 81       	ldd	r24, Y+4	; 0x04
    1574:	9d 81       	ldd	r25, Y+5	; 0x05
    1576:	82 0f       	add	r24, r18
    1578:	93 1f       	adc	r25, r19
    157a:	8c 5b       	subi	r24, 0xBC	; 188
    157c:	9e 4f       	sbci	r25, 0xFE	; 254
    157e:	fc 01       	movw	r30, r24
    1580:	80 81       	ld	r24, Z
    1582:	99 81       	ldd	r25, Y+1	; 0x01
    1584:	89 0f       	add	r24, r25
    1586:	89 83       	std	Y+1, r24	; 0x01
			
		}
	}
	else if (id >= 1 && id <= 240)
	{
		for(int i = 3; i >= 0; i--)
    1588:	8c 81       	ldd	r24, Y+4	; 0x04
    158a:	9d 81       	ldd	r25, Y+5	; 0x05
    158c:	01 97       	sbiw	r24, 0x01	; 1
    158e:	9d 83       	std	Y+5, r25	; 0x05
    1590:	8c 83       	std	Y+4, r24	; 0x04
    1592:	8c 81       	ldd	r24, Y+4	; 0x04
    1594:	9d 81       	ldd	r25, Y+5	; 0x05
    1596:	99 23       	and	r25, r25
    1598:	0c f7       	brge	.-62     	; 0x155c <ReadPix+0x80>
    159a:	ef c0       	rjmp	.+478    	; 0x177a <ReadPix+0x29e>
		{
			out = out << 1;
			out += fill[row][i];
		}
	}
	else if (id == 241)
    159c:	8a 89       	ldd	r24, Y+18	; 0x12
    159e:	81 3f       	cpi	r24, 0xF1	; 241
    15a0:	29 f5       	brne	.+74     	; 0x15ec <ReadPix+0x110>
	{
		for(int i = 3; i >= 0; i--)
    15a2:	83 e0       	ldi	r24, 0x03	; 3
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	9f 83       	std	Y+7, r25	; 0x07
    15a8:	8e 83       	std	Y+6, r24	; 0x06
    15aa:	1b c0       	rjmp	.+54     	; 0x15e2 <ReadPix+0x106>
		{
			out = out << 1;
    15ac:	89 81       	ldd	r24, Y+1	; 0x01
    15ae:	88 0f       	add	r24, r24
    15b0:	89 83       	std	Y+1, r24	; 0x01
			out += food[row][i];
    15b2:	8b 89       	ldd	r24, Y+19	; 0x13
    15b4:	88 2f       	mov	r24, r24
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	9c 01       	movw	r18, r24
    15ba:	22 0f       	add	r18, r18
    15bc:	33 1f       	adc	r19, r19
    15be:	22 0f       	add	r18, r18
    15c0:	33 1f       	adc	r19, r19
    15c2:	8e 81       	ldd	r24, Y+6	; 0x06
    15c4:	9f 81       	ldd	r25, Y+7	; 0x07
    15c6:	82 0f       	add	r24, r18
    15c8:	93 1f       	adc	r25, r19
    15ca:	8c 59       	subi	r24, 0x9C	; 156
    15cc:	9e 4f       	sbci	r25, 0xFE	; 254
    15ce:	fc 01       	movw	r30, r24
    15d0:	80 81       	ld	r24, Z
    15d2:	99 81       	ldd	r25, Y+1	; 0x01
    15d4:	89 0f       	add	r24, r25
    15d6:	89 83       	std	Y+1, r24	; 0x01
			out += fill[row][i];
		}
	}
	else if (id == 241)
	{
		for(int i = 3; i >= 0; i--)
    15d8:	8e 81       	ldd	r24, Y+6	; 0x06
    15da:	9f 81       	ldd	r25, Y+7	; 0x07
    15dc:	01 97       	sbiw	r24, 0x01	; 1
    15de:	9f 83       	std	Y+7, r25	; 0x07
    15e0:	8e 83       	std	Y+6, r24	; 0x06
    15e2:	8e 81       	ldd	r24, Y+6	; 0x06
    15e4:	9f 81       	ldd	r25, Y+7	; 0x07
    15e6:	99 23       	and	r25, r25
    15e8:	0c f7       	brge	.-62     	; 0x15ac <ReadPix+0xd0>
    15ea:	c7 c0       	rjmp	.+398    	; 0x177a <ReadPix+0x29e>
		{
			out = out << 1;
			out += food[row][i];
		}
	}
	else if (id == (250 + 0))
    15ec:	8a 89       	ldd	r24, Y+18	; 0x12
    15ee:	8a 3f       	cpi	r24, 0xFA	; 250
    15f0:	29 f5       	brne	.+74     	; 0x163c <ReadPix+0x160>
	{
		for(int i = 3; i >= 0; i--)
    15f2:	83 e0       	ldi	r24, 0x03	; 3
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	99 87       	std	Y+9, r25	; 0x09
    15f8:	88 87       	std	Y+8, r24	; 0x08
    15fa:	1b c0       	rjmp	.+54     	; 0x1632 <ReadPix+0x156>
		{
			out = out << 1;
    15fc:	89 81       	ldd	r24, Y+1	; 0x01
    15fe:	88 0f       	add	r24, r24
    1600:	89 83       	std	Y+1, r24	; 0x01
			out += headEast[row][i];
    1602:	8b 89       	ldd	r24, Y+19	; 0x13
    1604:	88 2f       	mov	r24, r24
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	9c 01       	movw	r18, r24
    160a:	22 0f       	add	r18, r18
    160c:	33 1f       	adc	r19, r19
    160e:	22 0f       	add	r18, r18
    1610:	33 1f       	adc	r19, r19
    1612:	88 85       	ldd	r24, Y+8	; 0x08
    1614:	99 85       	ldd	r25, Y+9	; 0x09
    1616:	82 0f       	add	r24, r18
    1618:	93 1f       	adc	r25, r19
    161a:	8c 5d       	subi	r24, 0xDC	; 220
    161c:	9e 4f       	sbci	r25, 0xFE	; 254
    161e:	fc 01       	movw	r30, r24
    1620:	80 81       	ld	r24, Z
    1622:	99 81       	ldd	r25, Y+1	; 0x01
    1624:	89 0f       	add	r24, r25
    1626:	89 83       	std	Y+1, r24	; 0x01
			out += food[row][i];
		}
	}
	else if (id == (250 + 0))
	{
		for(int i = 3; i >= 0; i--)
    1628:	88 85       	ldd	r24, Y+8	; 0x08
    162a:	99 85       	ldd	r25, Y+9	; 0x09
    162c:	01 97       	sbiw	r24, 0x01	; 1
    162e:	99 87       	std	Y+9, r25	; 0x09
    1630:	88 87       	std	Y+8, r24	; 0x08
    1632:	88 85       	ldd	r24, Y+8	; 0x08
    1634:	99 85       	ldd	r25, Y+9	; 0x09
    1636:	99 23       	and	r25, r25
    1638:	0c f7       	brge	.-62     	; 0x15fc <ReadPix+0x120>
    163a:	9f c0       	rjmp	.+318    	; 0x177a <ReadPix+0x29e>
		{
			out = out << 1;
			out += headEast[row][i];
		}
	}
	else if (id == (250 + 3))
    163c:	8a 89       	ldd	r24, Y+18	; 0x12
    163e:	8d 3f       	cpi	r24, 0xFD	; 253
    1640:	29 f5       	brne	.+74     	; 0x168c <ReadPix+0x1b0>
	{
		for(int i = 3; i >= 0; i--)
    1642:	83 e0       	ldi	r24, 0x03	; 3
    1644:	90 e0       	ldi	r25, 0x00	; 0
    1646:	9b 87       	std	Y+11, r25	; 0x0b
    1648:	8a 87       	std	Y+10, r24	; 0x0a
    164a:	1b c0       	rjmp	.+54     	; 0x1682 <ReadPix+0x1a6>
		{
			out = out << 1;
    164c:	89 81       	ldd	r24, Y+1	; 0x01
    164e:	88 0f       	add	r24, r24
    1650:	89 83       	std	Y+1, r24	; 0x01
			out += headNorth[row][i];
    1652:	8b 89       	ldd	r24, Y+19	; 0x13
    1654:	88 2f       	mov	r24, r24
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	9c 01       	movw	r18, r24
    165a:	22 0f       	add	r18, r18
    165c:	33 1f       	adc	r19, r19
    165e:	22 0f       	add	r18, r18
    1660:	33 1f       	adc	r19, r19
    1662:	8a 85       	ldd	r24, Y+10	; 0x0a
    1664:	9b 85       	ldd	r25, Y+11	; 0x0b
    1666:	82 0f       	add	r24, r18
    1668:	93 1f       	adc	r25, r19
    166a:	8c 5f       	subi	r24, 0xFC	; 252
    166c:	9e 4f       	sbci	r25, 0xFE	; 254
    166e:	fc 01       	movw	r30, r24
    1670:	80 81       	ld	r24, Z
    1672:	99 81       	ldd	r25, Y+1	; 0x01
    1674:	89 0f       	add	r24, r25
    1676:	89 83       	std	Y+1, r24	; 0x01
			out += headEast[row][i];
		}
	}
	else if (id == (250 + 3))
	{
		for(int i = 3; i >= 0; i--)
    1678:	8a 85       	ldd	r24, Y+10	; 0x0a
    167a:	9b 85       	ldd	r25, Y+11	; 0x0b
    167c:	01 97       	sbiw	r24, 0x01	; 1
    167e:	9b 87       	std	Y+11, r25	; 0x0b
    1680:	8a 87       	std	Y+10, r24	; 0x0a
    1682:	8a 85       	ldd	r24, Y+10	; 0x0a
    1684:	9b 85       	ldd	r25, Y+11	; 0x0b
    1686:	99 23       	and	r25, r25
    1688:	0c f7       	brge	.-62     	; 0x164c <ReadPix+0x170>
    168a:	77 c0       	rjmp	.+238    	; 0x177a <ReadPix+0x29e>
		{
			out = out << 1;
			out += headNorth[row][i];
		}
	}
	else if (id == (250 + 2))
    168c:	8a 89       	ldd	r24, Y+18	; 0x12
    168e:	8c 3f       	cpi	r24, 0xFC	; 252
    1690:	29 f5       	brne	.+74     	; 0x16dc <ReadPix+0x200>
	{
		for(int i = 3; i >= 0; i--)
    1692:	83 e0       	ldi	r24, 0x03	; 3
    1694:	90 e0       	ldi	r25, 0x00	; 0
    1696:	9d 87       	std	Y+13, r25	; 0x0d
    1698:	8c 87       	std	Y+12, r24	; 0x0c
    169a:	1b c0       	rjmp	.+54     	; 0x16d2 <ReadPix+0x1f6>
		{
			out = out << 1;
    169c:	89 81       	ldd	r24, Y+1	; 0x01
    169e:	88 0f       	add	r24, r24
    16a0:	89 83       	std	Y+1, r24	; 0x01
			out += headWest[row][i];
    16a2:	8b 89       	ldd	r24, Y+19	; 0x13
    16a4:	88 2f       	mov	r24, r24
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	9c 01       	movw	r18, r24
    16aa:	22 0f       	add	r18, r18
    16ac:	33 1f       	adc	r19, r19
    16ae:	22 0f       	add	r18, r18
    16b0:	33 1f       	adc	r19, r19
    16b2:	8c 85       	ldd	r24, Y+12	; 0x0c
    16b4:	9d 85       	ldd	r25, Y+13	; 0x0d
    16b6:	82 0f       	add	r24, r18
    16b8:	93 1f       	adc	r25, r19
    16ba:	8c 5c       	subi	r24, 0xCC	; 204
    16bc:	9e 4f       	sbci	r25, 0xFE	; 254
    16be:	fc 01       	movw	r30, r24
    16c0:	80 81       	ld	r24, Z
    16c2:	99 81       	ldd	r25, Y+1	; 0x01
    16c4:	89 0f       	add	r24, r25
    16c6:	89 83       	std	Y+1, r24	; 0x01
			out += headNorth[row][i];
		}
	}
	else if (id == (250 + 2))
	{
		for(int i = 3; i >= 0; i--)
    16c8:	8c 85       	ldd	r24, Y+12	; 0x0c
    16ca:	9d 85       	ldd	r25, Y+13	; 0x0d
    16cc:	01 97       	sbiw	r24, 0x01	; 1
    16ce:	9d 87       	std	Y+13, r25	; 0x0d
    16d0:	8c 87       	std	Y+12, r24	; 0x0c
    16d2:	8c 85       	ldd	r24, Y+12	; 0x0c
    16d4:	9d 85       	ldd	r25, Y+13	; 0x0d
    16d6:	99 23       	and	r25, r25
    16d8:	0c f7       	brge	.-62     	; 0x169c <ReadPix+0x1c0>
    16da:	4f c0       	rjmp	.+158    	; 0x177a <ReadPix+0x29e>
		{
			out = out << 1;
			out += headWest[row][i];
		}
	}
	else if (id == (250 + 1))
    16dc:	8a 89       	ldd	r24, Y+18	; 0x12
    16de:	8b 3f       	cpi	r24, 0xFB	; 251
    16e0:	29 f5       	brne	.+74     	; 0x172c <ReadPix+0x250>
	{
		for(int i = 3; i >= 0; i--)
    16e2:	83 e0       	ldi	r24, 0x03	; 3
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	9f 87       	std	Y+15, r25	; 0x0f
    16e8:	8e 87       	std	Y+14, r24	; 0x0e
    16ea:	1b c0       	rjmp	.+54     	; 0x1722 <ReadPix+0x246>
		{
			out = out << 1;
    16ec:	89 81       	ldd	r24, Y+1	; 0x01
    16ee:	88 0f       	add	r24, r24
    16f0:	89 83       	std	Y+1, r24	; 0x01
			out += headSouth[row][i];
    16f2:	8b 89       	ldd	r24, Y+19	; 0x13
    16f4:	88 2f       	mov	r24, r24
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	9c 01       	movw	r18, r24
    16fa:	22 0f       	add	r18, r18
    16fc:	33 1f       	adc	r19, r19
    16fe:	22 0f       	add	r18, r18
    1700:	33 1f       	adc	r19, r19
    1702:	8e 85       	ldd	r24, Y+14	; 0x0e
    1704:	9f 85       	ldd	r25, Y+15	; 0x0f
    1706:	82 0f       	add	r24, r18
    1708:	93 1f       	adc	r25, r19
    170a:	8c 5e       	subi	r24, 0xEC	; 236
    170c:	9e 4f       	sbci	r25, 0xFE	; 254
    170e:	fc 01       	movw	r30, r24
    1710:	80 81       	ld	r24, Z
    1712:	99 81       	ldd	r25, Y+1	; 0x01
    1714:	89 0f       	add	r24, r25
    1716:	89 83       	std	Y+1, r24	; 0x01
			out += headWest[row][i];
		}
	}
	else if (id == (250 + 1))
	{
		for(int i = 3; i >= 0; i--)
    1718:	8e 85       	ldd	r24, Y+14	; 0x0e
    171a:	9f 85       	ldd	r25, Y+15	; 0x0f
    171c:	01 97       	sbiw	r24, 0x01	; 1
    171e:	9f 87       	std	Y+15, r25	; 0x0f
    1720:	8e 87       	std	Y+14, r24	; 0x0e
    1722:	8e 85       	ldd	r24, Y+14	; 0x0e
    1724:	9f 85       	ldd	r25, Y+15	; 0x0f
    1726:	99 23       	and	r25, r25
    1728:	0c f7       	brge	.-62     	; 0x16ec <ReadPix+0x210>
    172a:	27 c0       	rjmp	.+78     	; 0x177a <ReadPix+0x29e>
		{
			out = out << 1;
			out += headSouth[row][i];
		}
	}
	else if (id == 245)
    172c:	8a 89       	ldd	r24, Y+18	; 0x12
    172e:	85 3f       	cpi	r24, 0xF5	; 245
    1730:	21 f5       	brne	.+72     	; 0x177a <ReadPix+0x29e>
	{
		for(int i = 3; i >= 0; i--)
    1732:	83 e0       	ldi	r24, 0x03	; 3
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	99 8b       	std	Y+17, r25	; 0x11
    1738:	88 8b       	std	Y+16, r24	; 0x10
    173a:	1b c0       	rjmp	.+54     	; 0x1772 <ReadPix+0x296>
		{
			out = out << 1;
    173c:	89 81       	ldd	r24, Y+1	; 0x01
    173e:	88 0f       	add	r24, r24
    1740:	89 83       	std	Y+1, r24	; 0x01
			out += fill2[row][i];
    1742:	8b 89       	ldd	r24, Y+19	; 0x13
    1744:	88 2f       	mov	r24, r24
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	9c 01       	movw	r18, r24
    174a:	22 0f       	add	r18, r18
    174c:	33 1f       	adc	r19, r19
    174e:	22 0f       	add	r18, r18
    1750:	33 1f       	adc	r19, r19
    1752:	88 89       	ldd	r24, Y+16	; 0x10
    1754:	99 89       	ldd	r25, Y+17	; 0x11
    1756:	82 0f       	add	r24, r18
    1758:	93 1f       	adc	r25, r19
    175a:	8c 5a       	subi	r24, 0xAC	; 172
    175c:	9e 4f       	sbci	r25, 0xFE	; 254
    175e:	fc 01       	movw	r30, r24
    1760:	80 81       	ld	r24, Z
    1762:	99 81       	ldd	r25, Y+1	; 0x01
    1764:	89 0f       	add	r24, r25
    1766:	89 83       	std	Y+1, r24	; 0x01
			out += headSouth[row][i];
		}
	}
	else if (id == 245)
	{
		for(int i = 3; i >= 0; i--)
    1768:	88 89       	ldd	r24, Y+16	; 0x10
    176a:	99 89       	ldd	r25, Y+17	; 0x11
    176c:	01 97       	sbiw	r24, 0x01	; 1
    176e:	99 8b       	std	Y+17, r25	; 0x11
    1770:	88 8b       	std	Y+16, r24	; 0x10
    1772:	88 89       	ldd	r24, Y+16	; 0x10
    1774:	99 89       	ldd	r25, Y+17	; 0x11
    1776:	99 23       	and	r25, r25
    1778:	0c f7       	brge	.-62     	; 0x173c <ReadPix+0x260>
		{
			out = out << 1;
			out += fill2[row][i];
		}
	}
	return out;
    177a:	89 81       	ldd	r24, Y+1	; 0x01
}
    177c:	63 96       	adiw	r28, 0x13	; 19
    177e:	0f b6       	in	r0, 0x3f	; 63
    1780:	f8 94       	cli
    1782:	de bf       	out	0x3e, r29	; 62
    1784:	0f be       	out	0x3f, r0	; 63
    1786:	cd bf       	out	0x3d, r28	; 61
    1788:	df 91       	pop	r29
    178a:	cf 91       	pop	r28
    178c:	08 95       	ret

0000178e <GameOver>:

void GameOver()
{
    178e:	cf 93       	push	r28
    1790:	df 93       	push	r29
    1792:	00 d0       	rcall	.+0      	; 0x1794 <GameOver+0x6>
    1794:	00 d0       	rcall	.+0      	; 0x1796 <GameOver+0x8>
    1796:	cd b7       	in	r28, 0x3d	; 61
    1798:	de b7       	in	r29, 0x3e	; 62
	lost = 1;
    179a:	81 e0       	ldi	r24, 0x01	; 1
    179c:	80 93 12 07 	sts	0x0712, r24	; 0x800712 <lost>
	
	for (int x = 0; x < 16; x++)
    17a0:	1a 82       	std	Y+2, r1	; 0x02
    17a2:	19 82       	std	Y+1, r1	; 0x01
    17a4:	33 c0       	rjmp	.+102    	; 0x180c <GameOver+0x7e>
	{
		for (int y = 0; y < 16; y++)
    17a6:	1c 82       	std	Y+4, r1	; 0x04
    17a8:	1b 82       	std	Y+3, r1	; 0x03
    17aa:	27 c0       	rjmp	.+78     	; 0x17fa <GameOver+0x6c>
		{
			game[x][y] = gameOver[x][y];
    17ac:	89 81       	ldd	r24, Y+1	; 0x01
    17ae:	9a 81       	ldd	r25, Y+2	; 0x02
    17b0:	9c 01       	movw	r18, r24
    17b2:	22 95       	swap	r18
    17b4:	32 95       	swap	r19
    17b6:	30 7f       	andi	r19, 0xF0	; 240
    17b8:	32 27       	eor	r19, r18
    17ba:	20 7f       	andi	r18, 0xF0	; 240
    17bc:	32 27       	eor	r19, r18
    17be:	8b 81       	ldd	r24, Y+3	; 0x03
    17c0:	9c 81       	ldd	r25, Y+4	; 0x04
    17c2:	82 0f       	add	r24, r18
    17c4:	93 1f       	adc	r25, r19
    17c6:	8c 58       	subi	r24, 0x8C	; 140
    17c8:	9e 4f       	sbci	r25, 0xFE	; 254
    17ca:	fc 01       	movw	r30, r24
    17cc:	40 81       	ld	r20, Z
    17ce:	89 81       	ldd	r24, Y+1	; 0x01
    17d0:	9a 81       	ldd	r25, Y+2	; 0x02
    17d2:	9c 01       	movw	r18, r24
    17d4:	22 95       	swap	r18
    17d6:	32 95       	swap	r19
    17d8:	30 7f       	andi	r19, 0xF0	; 240
    17da:	32 27       	eor	r19, r18
    17dc:	20 7f       	andi	r18, 0xF0	; 240
    17de:	32 27       	eor	r19, r18
    17e0:	8b 81       	ldd	r24, Y+3	; 0x03
    17e2:	9c 81       	ldd	r25, Y+4	; 0x04
    17e4:	82 0f       	add	r24, r18
    17e6:	93 1f       	adc	r25, r19
    17e8:	87 5e       	subi	r24, 0xE7	; 231
    17ea:	98 4f       	sbci	r25, 0xF8	; 248
    17ec:	fc 01       	movw	r30, r24
    17ee:	40 83       	st	Z, r20
{
	lost = 1;
	
	for (int x = 0; x < 16; x++)
	{
		for (int y = 0; y < 16; y++)
    17f0:	8b 81       	ldd	r24, Y+3	; 0x03
    17f2:	9c 81       	ldd	r25, Y+4	; 0x04
    17f4:	01 96       	adiw	r24, 0x01	; 1
    17f6:	9c 83       	std	Y+4, r25	; 0x04
    17f8:	8b 83       	std	Y+3, r24	; 0x03
    17fa:	8b 81       	ldd	r24, Y+3	; 0x03
    17fc:	9c 81       	ldd	r25, Y+4	; 0x04
    17fe:	40 97       	sbiw	r24, 0x10	; 16
    1800:	ac f2       	brlt	.-86     	; 0x17ac <GameOver+0x1e>

void GameOver()
{
	lost = 1;
	
	for (int x = 0; x < 16; x++)
    1802:	89 81       	ldd	r24, Y+1	; 0x01
    1804:	9a 81       	ldd	r25, Y+2	; 0x02
    1806:	01 96       	adiw	r24, 0x01	; 1
    1808:	9a 83       	std	Y+2, r25	; 0x02
    180a:	89 83       	std	Y+1, r24	; 0x01
    180c:	89 81       	ldd	r24, Y+1	; 0x01
    180e:	9a 81       	ldd	r25, Y+2	; 0x02
    1810:	40 97       	sbiw	r24, 0x10	; 16
    1812:	4c f2       	brlt	.-110    	; 0x17a6 <GameOver+0x18>
		for (int y = 0; y < 16; y++)
		{
			game[x][y] = gameOver[x][y];
		}
	}
    1814:	00 00       	nop
    1816:	0f 90       	pop	r0
    1818:	0f 90       	pop	r0
    181a:	0f 90       	pop	r0
    181c:	0f 90       	pop	r0
    181e:	df 91       	pop	r29
    1820:	cf 91       	pop	r28
    1822:	08 95       	ret

00001824 <__cmpsf2>:
    1824:	d9 d0       	rcall	.+434    	; 0x19d8 <__fp_cmp>
    1826:	08 f4       	brcc	.+2      	; 0x182a <__cmpsf2+0x6>
    1828:	81 e0       	ldi	r24, 0x01	; 1
    182a:	08 95       	ret

0000182c <__divsf3>:
    182c:	0c d0       	rcall	.+24     	; 0x1846 <__divsf3x>
    182e:	0f c1       	rjmp	.+542    	; 0x1a4e <__fp_round>
    1830:	07 d1       	rcall	.+526    	; 0x1a40 <__fp_pscB>
    1832:	40 f0       	brcs	.+16     	; 0x1844 <__divsf3+0x18>
    1834:	fe d0       	rcall	.+508    	; 0x1a32 <__fp_pscA>
    1836:	30 f0       	brcs	.+12     	; 0x1844 <__divsf3+0x18>
    1838:	21 f4       	brne	.+8      	; 0x1842 <__divsf3+0x16>
    183a:	5f 3f       	cpi	r21, 0xFF	; 255
    183c:	19 f0       	breq	.+6      	; 0x1844 <__divsf3+0x18>
    183e:	f0 c0       	rjmp	.+480    	; 0x1a20 <__fp_inf>
    1840:	51 11       	cpse	r21, r1
    1842:	39 c1       	rjmp	.+626    	; 0x1ab6 <__fp_szero>
    1844:	f3 c0       	rjmp	.+486    	; 0x1a2c <__fp_nan>

00001846 <__divsf3x>:
    1846:	14 d1       	rcall	.+552    	; 0x1a70 <__fp_split3>
    1848:	98 f3       	brcs	.-26     	; 0x1830 <__divsf3+0x4>

0000184a <__divsf3_pse>:
    184a:	99 23       	and	r25, r25
    184c:	c9 f3       	breq	.-14     	; 0x1840 <__divsf3+0x14>
    184e:	55 23       	and	r21, r21
    1850:	b1 f3       	breq	.-20     	; 0x183e <__divsf3+0x12>
    1852:	95 1b       	sub	r25, r21
    1854:	55 0b       	sbc	r21, r21
    1856:	bb 27       	eor	r27, r27
    1858:	aa 27       	eor	r26, r26
    185a:	62 17       	cp	r22, r18
    185c:	73 07       	cpc	r23, r19
    185e:	84 07       	cpc	r24, r20
    1860:	38 f0       	brcs	.+14     	; 0x1870 <__divsf3_pse+0x26>
    1862:	9f 5f       	subi	r25, 0xFF	; 255
    1864:	5f 4f       	sbci	r21, 0xFF	; 255
    1866:	22 0f       	add	r18, r18
    1868:	33 1f       	adc	r19, r19
    186a:	44 1f       	adc	r20, r20
    186c:	aa 1f       	adc	r26, r26
    186e:	a9 f3       	breq	.-22     	; 0x185a <__divsf3_pse+0x10>
    1870:	33 d0       	rcall	.+102    	; 0x18d8 <__divsf3_pse+0x8e>
    1872:	0e 2e       	mov	r0, r30
    1874:	3a f0       	brmi	.+14     	; 0x1884 <__divsf3_pse+0x3a>
    1876:	e0 e8       	ldi	r30, 0x80	; 128
    1878:	30 d0       	rcall	.+96     	; 0x18da <__divsf3_pse+0x90>
    187a:	91 50       	subi	r25, 0x01	; 1
    187c:	50 40       	sbci	r21, 0x00	; 0
    187e:	e6 95       	lsr	r30
    1880:	00 1c       	adc	r0, r0
    1882:	ca f7       	brpl	.-14     	; 0x1876 <__divsf3_pse+0x2c>
    1884:	29 d0       	rcall	.+82     	; 0x18d8 <__divsf3_pse+0x8e>
    1886:	fe 2f       	mov	r31, r30
    1888:	27 d0       	rcall	.+78     	; 0x18d8 <__divsf3_pse+0x8e>
    188a:	66 0f       	add	r22, r22
    188c:	77 1f       	adc	r23, r23
    188e:	88 1f       	adc	r24, r24
    1890:	bb 1f       	adc	r27, r27
    1892:	26 17       	cp	r18, r22
    1894:	37 07       	cpc	r19, r23
    1896:	48 07       	cpc	r20, r24
    1898:	ab 07       	cpc	r26, r27
    189a:	b0 e8       	ldi	r27, 0x80	; 128
    189c:	09 f0       	breq	.+2      	; 0x18a0 <__divsf3_pse+0x56>
    189e:	bb 0b       	sbc	r27, r27
    18a0:	80 2d       	mov	r24, r0
    18a2:	bf 01       	movw	r22, r30
    18a4:	ff 27       	eor	r31, r31
    18a6:	93 58       	subi	r25, 0x83	; 131
    18a8:	5f 4f       	sbci	r21, 0xFF	; 255
    18aa:	2a f0       	brmi	.+10     	; 0x18b6 <__divsf3_pse+0x6c>
    18ac:	9e 3f       	cpi	r25, 0xFE	; 254
    18ae:	51 05       	cpc	r21, r1
    18b0:	68 f0       	brcs	.+26     	; 0x18cc <__divsf3_pse+0x82>
    18b2:	b6 c0       	rjmp	.+364    	; 0x1a20 <__fp_inf>
    18b4:	00 c1       	rjmp	.+512    	; 0x1ab6 <__fp_szero>
    18b6:	5f 3f       	cpi	r21, 0xFF	; 255
    18b8:	ec f3       	brlt	.-6      	; 0x18b4 <__divsf3_pse+0x6a>
    18ba:	98 3e       	cpi	r25, 0xE8	; 232
    18bc:	dc f3       	brlt	.-10     	; 0x18b4 <__divsf3_pse+0x6a>
    18be:	86 95       	lsr	r24
    18c0:	77 95       	ror	r23
    18c2:	67 95       	ror	r22
    18c4:	b7 95       	ror	r27
    18c6:	f7 95       	ror	r31
    18c8:	9f 5f       	subi	r25, 0xFF	; 255
    18ca:	c9 f7       	brne	.-14     	; 0x18be <__divsf3_pse+0x74>
    18cc:	88 0f       	add	r24, r24
    18ce:	91 1d       	adc	r25, r1
    18d0:	96 95       	lsr	r25
    18d2:	87 95       	ror	r24
    18d4:	97 f9       	bld	r25, 7
    18d6:	08 95       	ret
    18d8:	e1 e0       	ldi	r30, 0x01	; 1
    18da:	66 0f       	add	r22, r22
    18dc:	77 1f       	adc	r23, r23
    18de:	88 1f       	adc	r24, r24
    18e0:	bb 1f       	adc	r27, r27
    18e2:	62 17       	cp	r22, r18
    18e4:	73 07       	cpc	r23, r19
    18e6:	84 07       	cpc	r24, r20
    18e8:	ba 07       	cpc	r27, r26
    18ea:	20 f0       	brcs	.+8      	; 0x18f4 <__divsf3_pse+0xaa>
    18ec:	62 1b       	sub	r22, r18
    18ee:	73 0b       	sbc	r23, r19
    18f0:	84 0b       	sbc	r24, r20
    18f2:	ba 0b       	sbc	r27, r26
    18f4:	ee 1f       	adc	r30, r30
    18f6:	88 f7       	brcc	.-30     	; 0x18da <__divsf3_pse+0x90>
    18f8:	e0 95       	com	r30
    18fa:	08 95       	ret

000018fc <__fixsfsi>:
    18fc:	04 d0       	rcall	.+8      	; 0x1906 <__fixunssfsi>
    18fe:	68 94       	set
    1900:	b1 11       	cpse	r27, r1
    1902:	d9 c0       	rjmp	.+434    	; 0x1ab6 <__fp_szero>
    1904:	08 95       	ret

00001906 <__fixunssfsi>:
    1906:	bc d0       	rcall	.+376    	; 0x1a80 <__fp_splitA>
    1908:	88 f0       	brcs	.+34     	; 0x192c <__fixunssfsi+0x26>
    190a:	9f 57       	subi	r25, 0x7F	; 127
    190c:	90 f0       	brcs	.+36     	; 0x1932 <__fixunssfsi+0x2c>
    190e:	b9 2f       	mov	r27, r25
    1910:	99 27       	eor	r25, r25
    1912:	b7 51       	subi	r27, 0x17	; 23
    1914:	a0 f0       	brcs	.+40     	; 0x193e <__fixunssfsi+0x38>
    1916:	d1 f0       	breq	.+52     	; 0x194c <__fixunssfsi+0x46>
    1918:	66 0f       	add	r22, r22
    191a:	77 1f       	adc	r23, r23
    191c:	88 1f       	adc	r24, r24
    191e:	99 1f       	adc	r25, r25
    1920:	1a f0       	brmi	.+6      	; 0x1928 <__fixunssfsi+0x22>
    1922:	ba 95       	dec	r27
    1924:	c9 f7       	brne	.-14     	; 0x1918 <__fixunssfsi+0x12>
    1926:	12 c0       	rjmp	.+36     	; 0x194c <__fixunssfsi+0x46>
    1928:	b1 30       	cpi	r27, 0x01	; 1
    192a:	81 f0       	breq	.+32     	; 0x194c <__fixunssfsi+0x46>
    192c:	c3 d0       	rcall	.+390    	; 0x1ab4 <__fp_zero>
    192e:	b1 e0       	ldi	r27, 0x01	; 1
    1930:	08 95       	ret
    1932:	c0 c0       	rjmp	.+384    	; 0x1ab4 <__fp_zero>
    1934:	67 2f       	mov	r22, r23
    1936:	78 2f       	mov	r23, r24
    1938:	88 27       	eor	r24, r24
    193a:	b8 5f       	subi	r27, 0xF8	; 248
    193c:	39 f0       	breq	.+14     	; 0x194c <__fixunssfsi+0x46>
    193e:	b9 3f       	cpi	r27, 0xF9	; 249
    1940:	cc f3       	brlt	.-14     	; 0x1934 <__fixunssfsi+0x2e>
    1942:	86 95       	lsr	r24
    1944:	77 95       	ror	r23
    1946:	67 95       	ror	r22
    1948:	b3 95       	inc	r27
    194a:	d9 f7       	brne	.-10     	; 0x1942 <__fixunssfsi+0x3c>
    194c:	3e f4       	brtc	.+14     	; 0x195c <__fixunssfsi+0x56>
    194e:	90 95       	com	r25
    1950:	80 95       	com	r24
    1952:	70 95       	com	r23
    1954:	61 95       	neg	r22
    1956:	7f 4f       	sbci	r23, 0xFF	; 255
    1958:	8f 4f       	sbci	r24, 0xFF	; 255
    195a:	9f 4f       	sbci	r25, 0xFF	; 255
    195c:	08 95       	ret

0000195e <__floatunsisf>:
    195e:	e8 94       	clt
    1960:	09 c0       	rjmp	.+18     	; 0x1974 <__floatsisf+0x12>

00001962 <__floatsisf>:
    1962:	97 fb       	bst	r25, 7
    1964:	3e f4       	brtc	.+14     	; 0x1974 <__floatsisf+0x12>
    1966:	90 95       	com	r25
    1968:	80 95       	com	r24
    196a:	70 95       	com	r23
    196c:	61 95       	neg	r22
    196e:	7f 4f       	sbci	r23, 0xFF	; 255
    1970:	8f 4f       	sbci	r24, 0xFF	; 255
    1972:	9f 4f       	sbci	r25, 0xFF	; 255
    1974:	99 23       	and	r25, r25
    1976:	a9 f0       	breq	.+42     	; 0x19a2 <__floatsisf+0x40>
    1978:	f9 2f       	mov	r31, r25
    197a:	96 e9       	ldi	r25, 0x96	; 150
    197c:	bb 27       	eor	r27, r27
    197e:	93 95       	inc	r25
    1980:	f6 95       	lsr	r31
    1982:	87 95       	ror	r24
    1984:	77 95       	ror	r23
    1986:	67 95       	ror	r22
    1988:	b7 95       	ror	r27
    198a:	f1 11       	cpse	r31, r1
    198c:	f8 cf       	rjmp	.-16     	; 0x197e <__floatsisf+0x1c>
    198e:	fa f4       	brpl	.+62     	; 0x19ce <__floatsisf+0x6c>
    1990:	bb 0f       	add	r27, r27
    1992:	11 f4       	brne	.+4      	; 0x1998 <__floatsisf+0x36>
    1994:	60 ff       	sbrs	r22, 0
    1996:	1b c0       	rjmp	.+54     	; 0x19ce <__floatsisf+0x6c>
    1998:	6f 5f       	subi	r22, 0xFF	; 255
    199a:	7f 4f       	sbci	r23, 0xFF	; 255
    199c:	8f 4f       	sbci	r24, 0xFF	; 255
    199e:	9f 4f       	sbci	r25, 0xFF	; 255
    19a0:	16 c0       	rjmp	.+44     	; 0x19ce <__floatsisf+0x6c>
    19a2:	88 23       	and	r24, r24
    19a4:	11 f0       	breq	.+4      	; 0x19aa <__floatsisf+0x48>
    19a6:	96 e9       	ldi	r25, 0x96	; 150
    19a8:	11 c0       	rjmp	.+34     	; 0x19cc <__floatsisf+0x6a>
    19aa:	77 23       	and	r23, r23
    19ac:	21 f0       	breq	.+8      	; 0x19b6 <__floatsisf+0x54>
    19ae:	9e e8       	ldi	r25, 0x8E	; 142
    19b0:	87 2f       	mov	r24, r23
    19b2:	76 2f       	mov	r23, r22
    19b4:	05 c0       	rjmp	.+10     	; 0x19c0 <__floatsisf+0x5e>
    19b6:	66 23       	and	r22, r22
    19b8:	71 f0       	breq	.+28     	; 0x19d6 <__floatsisf+0x74>
    19ba:	96 e8       	ldi	r25, 0x86	; 134
    19bc:	86 2f       	mov	r24, r22
    19be:	70 e0       	ldi	r23, 0x00	; 0
    19c0:	60 e0       	ldi	r22, 0x00	; 0
    19c2:	2a f0       	brmi	.+10     	; 0x19ce <__floatsisf+0x6c>
    19c4:	9a 95       	dec	r25
    19c6:	66 0f       	add	r22, r22
    19c8:	77 1f       	adc	r23, r23
    19ca:	88 1f       	adc	r24, r24
    19cc:	da f7       	brpl	.-10     	; 0x19c4 <__floatsisf+0x62>
    19ce:	88 0f       	add	r24, r24
    19d0:	96 95       	lsr	r25
    19d2:	87 95       	ror	r24
    19d4:	97 f9       	bld	r25, 7
    19d6:	08 95       	ret

000019d8 <__fp_cmp>:
    19d8:	99 0f       	add	r25, r25
    19da:	00 08       	sbc	r0, r0
    19dc:	55 0f       	add	r21, r21
    19de:	aa 0b       	sbc	r26, r26
    19e0:	e0 e8       	ldi	r30, 0x80	; 128
    19e2:	fe ef       	ldi	r31, 0xFE	; 254
    19e4:	16 16       	cp	r1, r22
    19e6:	17 06       	cpc	r1, r23
    19e8:	e8 07       	cpc	r30, r24
    19ea:	f9 07       	cpc	r31, r25
    19ec:	c0 f0       	brcs	.+48     	; 0x1a1e <__fp_cmp+0x46>
    19ee:	12 16       	cp	r1, r18
    19f0:	13 06       	cpc	r1, r19
    19f2:	e4 07       	cpc	r30, r20
    19f4:	f5 07       	cpc	r31, r21
    19f6:	98 f0       	brcs	.+38     	; 0x1a1e <__fp_cmp+0x46>
    19f8:	62 1b       	sub	r22, r18
    19fa:	73 0b       	sbc	r23, r19
    19fc:	84 0b       	sbc	r24, r20
    19fe:	95 0b       	sbc	r25, r21
    1a00:	39 f4       	brne	.+14     	; 0x1a10 <__fp_cmp+0x38>
    1a02:	0a 26       	eor	r0, r26
    1a04:	61 f0       	breq	.+24     	; 0x1a1e <__fp_cmp+0x46>
    1a06:	23 2b       	or	r18, r19
    1a08:	24 2b       	or	r18, r20
    1a0a:	25 2b       	or	r18, r21
    1a0c:	21 f4       	brne	.+8      	; 0x1a16 <__fp_cmp+0x3e>
    1a0e:	08 95       	ret
    1a10:	0a 26       	eor	r0, r26
    1a12:	09 f4       	brne	.+2      	; 0x1a16 <__fp_cmp+0x3e>
    1a14:	a1 40       	sbci	r26, 0x01	; 1
    1a16:	a6 95       	lsr	r26
    1a18:	8f ef       	ldi	r24, 0xFF	; 255
    1a1a:	81 1d       	adc	r24, r1
    1a1c:	81 1d       	adc	r24, r1
    1a1e:	08 95       	ret

00001a20 <__fp_inf>:
    1a20:	97 f9       	bld	r25, 7
    1a22:	9f 67       	ori	r25, 0x7F	; 127
    1a24:	80 e8       	ldi	r24, 0x80	; 128
    1a26:	70 e0       	ldi	r23, 0x00	; 0
    1a28:	60 e0       	ldi	r22, 0x00	; 0
    1a2a:	08 95       	ret

00001a2c <__fp_nan>:
    1a2c:	9f ef       	ldi	r25, 0xFF	; 255
    1a2e:	80 ec       	ldi	r24, 0xC0	; 192
    1a30:	08 95       	ret

00001a32 <__fp_pscA>:
    1a32:	00 24       	eor	r0, r0
    1a34:	0a 94       	dec	r0
    1a36:	16 16       	cp	r1, r22
    1a38:	17 06       	cpc	r1, r23
    1a3a:	18 06       	cpc	r1, r24
    1a3c:	09 06       	cpc	r0, r25
    1a3e:	08 95       	ret

00001a40 <__fp_pscB>:
    1a40:	00 24       	eor	r0, r0
    1a42:	0a 94       	dec	r0
    1a44:	12 16       	cp	r1, r18
    1a46:	13 06       	cpc	r1, r19
    1a48:	14 06       	cpc	r1, r20
    1a4a:	05 06       	cpc	r0, r21
    1a4c:	08 95       	ret

00001a4e <__fp_round>:
    1a4e:	09 2e       	mov	r0, r25
    1a50:	03 94       	inc	r0
    1a52:	00 0c       	add	r0, r0
    1a54:	11 f4       	brne	.+4      	; 0x1a5a <__fp_round+0xc>
    1a56:	88 23       	and	r24, r24
    1a58:	52 f0       	brmi	.+20     	; 0x1a6e <__fp_round+0x20>
    1a5a:	bb 0f       	add	r27, r27
    1a5c:	40 f4       	brcc	.+16     	; 0x1a6e <__fp_round+0x20>
    1a5e:	bf 2b       	or	r27, r31
    1a60:	11 f4       	brne	.+4      	; 0x1a66 <__fp_round+0x18>
    1a62:	60 ff       	sbrs	r22, 0
    1a64:	04 c0       	rjmp	.+8      	; 0x1a6e <__fp_round+0x20>
    1a66:	6f 5f       	subi	r22, 0xFF	; 255
    1a68:	7f 4f       	sbci	r23, 0xFF	; 255
    1a6a:	8f 4f       	sbci	r24, 0xFF	; 255
    1a6c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a6e:	08 95       	ret

00001a70 <__fp_split3>:
    1a70:	57 fd       	sbrc	r21, 7
    1a72:	90 58       	subi	r25, 0x80	; 128
    1a74:	44 0f       	add	r20, r20
    1a76:	55 1f       	adc	r21, r21
    1a78:	59 f0       	breq	.+22     	; 0x1a90 <__fp_splitA+0x10>
    1a7a:	5f 3f       	cpi	r21, 0xFF	; 255
    1a7c:	71 f0       	breq	.+28     	; 0x1a9a <__fp_splitA+0x1a>
    1a7e:	47 95       	ror	r20

00001a80 <__fp_splitA>:
    1a80:	88 0f       	add	r24, r24
    1a82:	97 fb       	bst	r25, 7
    1a84:	99 1f       	adc	r25, r25
    1a86:	61 f0       	breq	.+24     	; 0x1aa0 <__fp_splitA+0x20>
    1a88:	9f 3f       	cpi	r25, 0xFF	; 255
    1a8a:	79 f0       	breq	.+30     	; 0x1aaa <__fp_splitA+0x2a>
    1a8c:	87 95       	ror	r24
    1a8e:	08 95       	ret
    1a90:	12 16       	cp	r1, r18
    1a92:	13 06       	cpc	r1, r19
    1a94:	14 06       	cpc	r1, r20
    1a96:	55 1f       	adc	r21, r21
    1a98:	f2 cf       	rjmp	.-28     	; 0x1a7e <__fp_split3+0xe>
    1a9a:	46 95       	lsr	r20
    1a9c:	f1 df       	rcall	.-30     	; 0x1a80 <__fp_splitA>
    1a9e:	08 c0       	rjmp	.+16     	; 0x1ab0 <__fp_splitA+0x30>
    1aa0:	16 16       	cp	r1, r22
    1aa2:	17 06       	cpc	r1, r23
    1aa4:	18 06       	cpc	r1, r24
    1aa6:	99 1f       	adc	r25, r25
    1aa8:	f1 cf       	rjmp	.-30     	; 0x1a8c <__fp_splitA+0xc>
    1aaa:	86 95       	lsr	r24
    1aac:	71 05       	cpc	r23, r1
    1aae:	61 05       	cpc	r22, r1
    1ab0:	08 94       	sec
    1ab2:	08 95       	ret

00001ab4 <__fp_zero>:
    1ab4:	e8 94       	clt

00001ab6 <__fp_szero>:
    1ab6:	bb 27       	eor	r27, r27
    1ab8:	66 27       	eor	r22, r22
    1aba:	77 27       	eor	r23, r23
    1abc:	cb 01       	movw	r24, r22
    1abe:	97 f9       	bld	r25, 7
    1ac0:	08 95       	ret

00001ac2 <__gesf2>:
    1ac2:	8a df       	rcall	.-236    	; 0x19d8 <__fp_cmp>
    1ac4:	08 f4       	brcc	.+2      	; 0x1ac8 <__gesf2+0x6>
    1ac6:	8f ef       	ldi	r24, 0xFF	; 255
    1ac8:	08 95       	ret

00001aca <__mulsf3>:
    1aca:	0b d0       	rcall	.+22     	; 0x1ae2 <__mulsf3x>
    1acc:	c0 cf       	rjmp	.-128    	; 0x1a4e <__fp_round>
    1ace:	b1 df       	rcall	.-158    	; 0x1a32 <__fp_pscA>
    1ad0:	28 f0       	brcs	.+10     	; 0x1adc <__mulsf3+0x12>
    1ad2:	b6 df       	rcall	.-148    	; 0x1a40 <__fp_pscB>
    1ad4:	18 f0       	brcs	.+6      	; 0x1adc <__mulsf3+0x12>
    1ad6:	95 23       	and	r25, r21
    1ad8:	09 f0       	breq	.+2      	; 0x1adc <__mulsf3+0x12>
    1ada:	a2 cf       	rjmp	.-188    	; 0x1a20 <__fp_inf>
    1adc:	a7 cf       	rjmp	.-178    	; 0x1a2c <__fp_nan>
    1ade:	11 24       	eor	r1, r1
    1ae0:	ea cf       	rjmp	.-44     	; 0x1ab6 <__fp_szero>

00001ae2 <__mulsf3x>:
    1ae2:	c6 df       	rcall	.-116    	; 0x1a70 <__fp_split3>
    1ae4:	a0 f3       	brcs	.-24     	; 0x1ace <__mulsf3+0x4>

00001ae6 <__mulsf3_pse>:
    1ae6:	95 9f       	mul	r25, r21
    1ae8:	d1 f3       	breq	.-12     	; 0x1ade <__mulsf3+0x14>
    1aea:	95 0f       	add	r25, r21
    1aec:	50 e0       	ldi	r21, 0x00	; 0
    1aee:	55 1f       	adc	r21, r21
    1af0:	62 9f       	mul	r22, r18
    1af2:	f0 01       	movw	r30, r0
    1af4:	72 9f       	mul	r23, r18
    1af6:	bb 27       	eor	r27, r27
    1af8:	f0 0d       	add	r31, r0
    1afa:	b1 1d       	adc	r27, r1
    1afc:	63 9f       	mul	r22, r19
    1afe:	aa 27       	eor	r26, r26
    1b00:	f0 0d       	add	r31, r0
    1b02:	b1 1d       	adc	r27, r1
    1b04:	aa 1f       	adc	r26, r26
    1b06:	64 9f       	mul	r22, r20
    1b08:	66 27       	eor	r22, r22
    1b0a:	b0 0d       	add	r27, r0
    1b0c:	a1 1d       	adc	r26, r1
    1b0e:	66 1f       	adc	r22, r22
    1b10:	82 9f       	mul	r24, r18
    1b12:	22 27       	eor	r18, r18
    1b14:	b0 0d       	add	r27, r0
    1b16:	a1 1d       	adc	r26, r1
    1b18:	62 1f       	adc	r22, r18
    1b1a:	73 9f       	mul	r23, r19
    1b1c:	b0 0d       	add	r27, r0
    1b1e:	a1 1d       	adc	r26, r1
    1b20:	62 1f       	adc	r22, r18
    1b22:	83 9f       	mul	r24, r19
    1b24:	a0 0d       	add	r26, r0
    1b26:	61 1d       	adc	r22, r1
    1b28:	22 1f       	adc	r18, r18
    1b2a:	74 9f       	mul	r23, r20
    1b2c:	33 27       	eor	r19, r19
    1b2e:	a0 0d       	add	r26, r0
    1b30:	61 1d       	adc	r22, r1
    1b32:	23 1f       	adc	r18, r19
    1b34:	84 9f       	mul	r24, r20
    1b36:	60 0d       	add	r22, r0
    1b38:	21 1d       	adc	r18, r1
    1b3a:	82 2f       	mov	r24, r18
    1b3c:	76 2f       	mov	r23, r22
    1b3e:	6a 2f       	mov	r22, r26
    1b40:	11 24       	eor	r1, r1
    1b42:	9f 57       	subi	r25, 0x7F	; 127
    1b44:	50 40       	sbci	r21, 0x00	; 0
    1b46:	8a f0       	brmi	.+34     	; 0x1b6a <__mulsf3_pse+0x84>
    1b48:	e1 f0       	breq	.+56     	; 0x1b82 <__mulsf3_pse+0x9c>
    1b4a:	88 23       	and	r24, r24
    1b4c:	4a f0       	brmi	.+18     	; 0x1b60 <__mulsf3_pse+0x7a>
    1b4e:	ee 0f       	add	r30, r30
    1b50:	ff 1f       	adc	r31, r31
    1b52:	bb 1f       	adc	r27, r27
    1b54:	66 1f       	adc	r22, r22
    1b56:	77 1f       	adc	r23, r23
    1b58:	88 1f       	adc	r24, r24
    1b5a:	91 50       	subi	r25, 0x01	; 1
    1b5c:	50 40       	sbci	r21, 0x00	; 0
    1b5e:	a9 f7       	brne	.-22     	; 0x1b4a <__mulsf3_pse+0x64>
    1b60:	9e 3f       	cpi	r25, 0xFE	; 254
    1b62:	51 05       	cpc	r21, r1
    1b64:	70 f0       	brcs	.+28     	; 0x1b82 <__mulsf3_pse+0x9c>
    1b66:	5c cf       	rjmp	.-328    	; 0x1a20 <__fp_inf>
    1b68:	a6 cf       	rjmp	.-180    	; 0x1ab6 <__fp_szero>
    1b6a:	5f 3f       	cpi	r21, 0xFF	; 255
    1b6c:	ec f3       	brlt	.-6      	; 0x1b68 <__mulsf3_pse+0x82>
    1b6e:	98 3e       	cpi	r25, 0xE8	; 232
    1b70:	dc f3       	brlt	.-10     	; 0x1b68 <__mulsf3_pse+0x82>
    1b72:	86 95       	lsr	r24
    1b74:	77 95       	ror	r23
    1b76:	67 95       	ror	r22
    1b78:	b7 95       	ror	r27
    1b7a:	f7 95       	ror	r31
    1b7c:	e7 95       	ror	r30
    1b7e:	9f 5f       	subi	r25, 0xFF	; 255
    1b80:	c1 f7       	brne	.-16     	; 0x1b72 <__mulsf3_pse+0x8c>
    1b82:	fe 2b       	or	r31, r30
    1b84:	88 0f       	add	r24, r24
    1b86:	91 1d       	adc	r25, r1
    1b88:	96 95       	lsr	r25
    1b8a:	87 95       	ror	r24
    1b8c:	97 f9       	bld	r25, 7
    1b8e:	08 95       	ret

00001b90 <pow>:
    1b90:	fa 01       	movw	r30, r20
    1b92:	ee 0f       	add	r30, r30
    1b94:	ff 1f       	adc	r31, r31
    1b96:	30 96       	adiw	r30, 0x00	; 0
    1b98:	21 05       	cpc	r18, r1
    1b9a:	31 05       	cpc	r19, r1
    1b9c:	99 f1       	breq	.+102    	; 0x1c04 <pow+0x74>
    1b9e:	61 15       	cp	r22, r1
    1ba0:	71 05       	cpc	r23, r1
    1ba2:	61 f4       	brne	.+24     	; 0x1bbc <pow+0x2c>
    1ba4:	80 38       	cpi	r24, 0x80	; 128
    1ba6:	bf e3       	ldi	r27, 0x3F	; 63
    1ba8:	9b 07       	cpc	r25, r27
    1baa:	49 f1       	breq	.+82     	; 0x1bfe <pow+0x6e>
    1bac:	68 94       	set
    1bae:	90 38       	cpi	r25, 0x80	; 128
    1bb0:	81 05       	cpc	r24, r1
    1bb2:	61 f0       	breq	.+24     	; 0x1bcc <pow+0x3c>
    1bb4:	80 38       	cpi	r24, 0x80	; 128
    1bb6:	bf ef       	ldi	r27, 0xFF	; 255
    1bb8:	9b 07       	cpc	r25, r27
    1bba:	41 f0       	breq	.+16     	; 0x1bcc <pow+0x3c>
    1bbc:	99 23       	and	r25, r25
    1bbe:	42 f5       	brpl	.+80     	; 0x1c10 <pow+0x80>
    1bc0:	ff 3f       	cpi	r31, 0xFF	; 255
    1bc2:	e1 05       	cpc	r30, r1
    1bc4:	31 05       	cpc	r19, r1
    1bc6:	21 05       	cpc	r18, r1
    1bc8:	11 f1       	breq	.+68     	; 0x1c0e <pow+0x7e>
    1bca:	e8 94       	clt
    1bcc:	08 94       	sec
    1bce:	e7 95       	ror	r30
    1bd0:	d9 01       	movw	r26, r18
    1bd2:	aa 23       	and	r26, r26
    1bd4:	29 f4       	brne	.+10     	; 0x1be0 <pow+0x50>
    1bd6:	ab 2f       	mov	r26, r27
    1bd8:	be 2f       	mov	r27, r30
    1bda:	f8 5f       	subi	r31, 0xF8	; 248
    1bdc:	d0 f3       	brcs	.-12     	; 0x1bd2 <pow+0x42>
    1bde:	10 c0       	rjmp	.+32     	; 0x1c00 <pow+0x70>
    1be0:	ff 5f       	subi	r31, 0xFF	; 255
    1be2:	70 f4       	brcc	.+28     	; 0x1c00 <pow+0x70>
    1be4:	a6 95       	lsr	r26
    1be6:	e0 f7       	brcc	.-8      	; 0x1be0 <pow+0x50>
    1be8:	f7 39       	cpi	r31, 0x97	; 151
    1bea:	50 f0       	brcs	.+20     	; 0x1c00 <pow+0x70>
    1bec:	19 f0       	breq	.+6      	; 0x1bf4 <pow+0x64>
    1bee:	ff 3a       	cpi	r31, 0xAF	; 175
    1bf0:	38 f4       	brcc	.+14     	; 0x1c00 <pow+0x70>
    1bf2:	9f 77       	andi	r25, 0x7F	; 127
    1bf4:	9f 93       	push	r25
    1bf6:	0c d0       	rcall	.+24     	; 0x1c10 <pow+0x80>
    1bf8:	0f 90       	pop	r0
    1bfa:	07 fc       	sbrc	r0, 7
    1bfc:	90 58       	subi	r25, 0x80	; 128
    1bfe:	08 95       	ret
    1c00:	3e f0       	brts	.+14     	; 0x1c10 <pow+0x80>
    1c02:	14 cf       	rjmp	.-472    	; 0x1a2c <__fp_nan>
    1c04:	60 e0       	ldi	r22, 0x00	; 0
    1c06:	70 e0       	ldi	r23, 0x00	; 0
    1c08:	80 e8       	ldi	r24, 0x80	; 128
    1c0a:	9f e3       	ldi	r25, 0x3F	; 63
    1c0c:	08 95       	ret
    1c0e:	4f e7       	ldi	r20, 0x7F	; 127
    1c10:	9f 77       	andi	r25, 0x7F	; 127
    1c12:	5f 93       	push	r21
    1c14:	4f 93       	push	r20
    1c16:	3f 93       	push	r19
    1c18:	2f 93       	push	r18
    1c1a:	9e d0       	rcall	.+316    	; 0x1d58 <log>
    1c1c:	2f 91       	pop	r18
    1c1e:	3f 91       	pop	r19
    1c20:	4f 91       	pop	r20
    1c22:	5f 91       	pop	r21
    1c24:	52 df       	rcall	.-348    	; 0x1aca <__mulsf3>
    1c26:	05 c0       	rjmp	.+10     	; 0x1c32 <exp>
    1c28:	19 f4       	brne	.+6      	; 0x1c30 <pow+0xa0>
    1c2a:	0e f0       	brts	.+2      	; 0x1c2e <pow+0x9e>
    1c2c:	f9 ce       	rjmp	.-526    	; 0x1a20 <__fp_inf>
    1c2e:	42 cf       	rjmp	.-380    	; 0x1ab4 <__fp_zero>
    1c30:	fd ce       	rjmp	.-518    	; 0x1a2c <__fp_nan>

00001c32 <exp>:
    1c32:	26 df       	rcall	.-436    	; 0x1a80 <__fp_splitA>
    1c34:	c8 f3       	brcs	.-14     	; 0x1c28 <pow+0x98>
    1c36:	96 38       	cpi	r25, 0x86	; 134
    1c38:	c0 f7       	brcc	.-16     	; 0x1c2a <pow+0x9a>
    1c3a:	07 f8       	bld	r0, 7
    1c3c:	0f 92       	push	r0
    1c3e:	e8 94       	clt
    1c40:	2b e3       	ldi	r18, 0x3B	; 59
    1c42:	3a ea       	ldi	r19, 0xAA	; 170
    1c44:	48 eb       	ldi	r20, 0xB8	; 184
    1c46:	5f e7       	ldi	r21, 0x7F	; 127
    1c48:	4e df       	rcall	.-356    	; 0x1ae6 <__mulsf3_pse>
    1c4a:	0f 92       	push	r0
    1c4c:	0f 92       	push	r0
    1c4e:	0f 92       	push	r0
    1c50:	4d b7       	in	r20, 0x3d	; 61
    1c52:	5e b7       	in	r21, 0x3e	; 62
    1c54:	0f 92       	push	r0
    1c56:	c0 d0       	rcall	.+384    	; 0x1dd8 <modf>
    1c58:	e0 ea       	ldi	r30, 0xA0	; 160
    1c5a:	f0 e0       	ldi	r31, 0x00	; 0
    1c5c:	16 d0       	rcall	.+44     	; 0x1c8a <__fp_powser>
    1c5e:	4f 91       	pop	r20
    1c60:	5f 91       	pop	r21
    1c62:	ef 91       	pop	r30
    1c64:	ff 91       	pop	r31
    1c66:	e5 95       	asr	r30
    1c68:	ee 1f       	adc	r30, r30
    1c6a:	ff 1f       	adc	r31, r31
    1c6c:	49 f0       	breq	.+18     	; 0x1c80 <exp+0x4e>
    1c6e:	fe 57       	subi	r31, 0x7E	; 126
    1c70:	e0 68       	ori	r30, 0x80	; 128
    1c72:	44 27       	eor	r20, r20
    1c74:	ee 0f       	add	r30, r30
    1c76:	44 1f       	adc	r20, r20
    1c78:	fa 95       	dec	r31
    1c7a:	e1 f7       	brne	.-8      	; 0x1c74 <exp+0x42>
    1c7c:	41 95       	neg	r20
    1c7e:	55 0b       	sbc	r21, r21
    1c80:	32 d0       	rcall	.+100    	; 0x1ce6 <ldexp>
    1c82:	0f 90       	pop	r0
    1c84:	07 fe       	sbrs	r0, 7
    1c86:	26 c0       	rjmp	.+76     	; 0x1cd4 <inverse>
    1c88:	08 95       	ret

00001c8a <__fp_powser>:
    1c8a:	df 93       	push	r29
    1c8c:	cf 93       	push	r28
    1c8e:	1f 93       	push	r17
    1c90:	0f 93       	push	r16
    1c92:	ff 92       	push	r15
    1c94:	ef 92       	push	r14
    1c96:	df 92       	push	r13
    1c98:	7b 01       	movw	r14, r22
    1c9a:	8c 01       	movw	r16, r24
    1c9c:	68 94       	set
    1c9e:	05 c0       	rjmp	.+10     	; 0x1caa <__fp_powser+0x20>
    1ca0:	da 2e       	mov	r13, r26
    1ca2:	ef 01       	movw	r28, r30
    1ca4:	1e df       	rcall	.-452    	; 0x1ae2 <__mulsf3x>
    1ca6:	fe 01       	movw	r30, r28
    1ca8:	e8 94       	clt
    1caa:	a5 91       	lpm	r26, Z+
    1cac:	25 91       	lpm	r18, Z+
    1cae:	35 91       	lpm	r19, Z+
    1cb0:	45 91       	lpm	r20, Z+
    1cb2:	55 91       	lpm	r21, Z+
    1cb4:	ae f3       	brts	.-22     	; 0x1ca0 <__fp_powser+0x16>
    1cb6:	ef 01       	movw	r28, r30
    1cb8:	d4 d0       	rcall	.+424    	; 0x1e62 <__addsf3x>
    1cba:	fe 01       	movw	r30, r28
    1cbc:	97 01       	movw	r18, r14
    1cbe:	a8 01       	movw	r20, r16
    1cc0:	da 94       	dec	r13
    1cc2:	79 f7       	brne	.-34     	; 0x1ca2 <__fp_powser+0x18>
    1cc4:	df 90       	pop	r13
    1cc6:	ef 90       	pop	r14
    1cc8:	ff 90       	pop	r15
    1cca:	0f 91       	pop	r16
    1ccc:	1f 91       	pop	r17
    1cce:	cf 91       	pop	r28
    1cd0:	df 91       	pop	r29
    1cd2:	08 95       	ret

00001cd4 <inverse>:
    1cd4:	9b 01       	movw	r18, r22
    1cd6:	ac 01       	movw	r20, r24
    1cd8:	60 e0       	ldi	r22, 0x00	; 0
    1cda:	70 e0       	ldi	r23, 0x00	; 0
    1cdc:	80 e8       	ldi	r24, 0x80	; 128
    1cde:	9f e3       	ldi	r25, 0x3F	; 63
    1ce0:	a5 cd       	rjmp	.-1206   	; 0x182c <__divsf3>
    1ce2:	9e ce       	rjmp	.-708    	; 0x1a20 <__fp_inf>
    1ce4:	11 c1       	rjmp	.+546    	; 0x1f08 <__fp_mpack>

00001ce6 <ldexp>:
    1ce6:	cc de       	rcall	.-616    	; 0x1a80 <__fp_splitA>
    1ce8:	e8 f3       	brcs	.-6      	; 0x1ce4 <inverse+0x10>
    1cea:	99 23       	and	r25, r25
    1cec:	d9 f3       	breq	.-10     	; 0x1ce4 <inverse+0x10>
    1cee:	94 0f       	add	r25, r20
    1cf0:	51 1d       	adc	r21, r1
    1cf2:	bb f3       	brvs	.-18     	; 0x1ce2 <inverse+0xe>
    1cf4:	91 50       	subi	r25, 0x01	; 1
    1cf6:	50 40       	sbci	r21, 0x00	; 0
    1cf8:	94 f0       	brlt	.+36     	; 0x1d1e <ldexp+0x38>
    1cfa:	59 f0       	breq	.+22     	; 0x1d12 <ldexp+0x2c>
    1cfc:	88 23       	and	r24, r24
    1cfe:	32 f0       	brmi	.+12     	; 0x1d0c <ldexp+0x26>
    1d00:	66 0f       	add	r22, r22
    1d02:	77 1f       	adc	r23, r23
    1d04:	88 1f       	adc	r24, r24
    1d06:	91 50       	subi	r25, 0x01	; 1
    1d08:	50 40       	sbci	r21, 0x00	; 0
    1d0a:	c1 f7       	brne	.-16     	; 0x1cfc <ldexp+0x16>
    1d0c:	9e 3f       	cpi	r25, 0xFE	; 254
    1d0e:	51 05       	cpc	r21, r1
    1d10:	44 f7       	brge	.-48     	; 0x1ce2 <inverse+0xe>
    1d12:	88 0f       	add	r24, r24
    1d14:	91 1d       	adc	r25, r1
    1d16:	96 95       	lsr	r25
    1d18:	87 95       	ror	r24
    1d1a:	97 f9       	bld	r25, 7
    1d1c:	08 95       	ret
    1d1e:	5f 3f       	cpi	r21, 0xFF	; 255
    1d20:	ac f0       	brlt	.+42     	; 0x1d4c <ldexp+0x66>
    1d22:	98 3e       	cpi	r25, 0xE8	; 232
    1d24:	9c f0       	brlt	.+38     	; 0x1d4c <ldexp+0x66>
    1d26:	bb 27       	eor	r27, r27
    1d28:	86 95       	lsr	r24
    1d2a:	77 95       	ror	r23
    1d2c:	67 95       	ror	r22
    1d2e:	b7 95       	ror	r27
    1d30:	08 f4       	brcc	.+2      	; 0x1d34 <ldexp+0x4e>
    1d32:	b1 60       	ori	r27, 0x01	; 1
    1d34:	93 95       	inc	r25
    1d36:	c1 f7       	brne	.-16     	; 0x1d28 <ldexp+0x42>
    1d38:	bb 0f       	add	r27, r27
    1d3a:	58 f7       	brcc	.-42     	; 0x1d12 <ldexp+0x2c>
    1d3c:	11 f4       	brne	.+4      	; 0x1d42 <ldexp+0x5c>
    1d3e:	60 ff       	sbrs	r22, 0
    1d40:	e8 cf       	rjmp	.-48     	; 0x1d12 <ldexp+0x2c>
    1d42:	6f 5f       	subi	r22, 0xFF	; 255
    1d44:	7f 4f       	sbci	r23, 0xFF	; 255
    1d46:	8f 4f       	sbci	r24, 0xFF	; 255
    1d48:	9f 4f       	sbci	r25, 0xFF	; 255
    1d4a:	e3 cf       	rjmp	.-58     	; 0x1d12 <ldexp+0x2c>
    1d4c:	b4 ce       	rjmp	.-664    	; 0x1ab6 <__fp_szero>
    1d4e:	0e f0       	brts	.+2      	; 0x1d52 <ldexp+0x6c>
    1d50:	db c0       	rjmp	.+438    	; 0x1f08 <__fp_mpack>
    1d52:	6c ce       	rjmp	.-808    	; 0x1a2c <__fp_nan>
    1d54:	68 94       	set
    1d56:	64 ce       	rjmp	.-824    	; 0x1a20 <__fp_inf>

00001d58 <log>:
    1d58:	93 de       	rcall	.-730    	; 0x1a80 <__fp_splitA>
    1d5a:	c8 f3       	brcs	.-14     	; 0x1d4e <ldexp+0x68>
    1d5c:	99 23       	and	r25, r25
    1d5e:	d1 f3       	breq	.-12     	; 0x1d54 <ldexp+0x6e>
    1d60:	c6 f3       	brts	.-16     	; 0x1d52 <ldexp+0x6c>
    1d62:	df 93       	push	r29
    1d64:	cf 93       	push	r28
    1d66:	1f 93       	push	r17
    1d68:	0f 93       	push	r16
    1d6a:	ff 92       	push	r15
    1d6c:	c9 2f       	mov	r28, r25
    1d6e:	dd 27       	eor	r29, r29
    1d70:	88 23       	and	r24, r24
    1d72:	2a f0       	brmi	.+10     	; 0x1d7e <log+0x26>
    1d74:	21 97       	sbiw	r28, 0x01	; 1
    1d76:	66 0f       	add	r22, r22
    1d78:	77 1f       	adc	r23, r23
    1d7a:	88 1f       	adc	r24, r24
    1d7c:	da f7       	brpl	.-10     	; 0x1d74 <log+0x1c>
    1d7e:	20 e0       	ldi	r18, 0x00	; 0
    1d80:	30 e0       	ldi	r19, 0x00	; 0
    1d82:	40 e8       	ldi	r20, 0x80	; 128
    1d84:	5f eb       	ldi	r21, 0xBF	; 191
    1d86:	9f e3       	ldi	r25, 0x3F	; 63
    1d88:	88 39       	cpi	r24, 0x98	; 152
    1d8a:	20 f0       	brcs	.+8      	; 0x1d94 <log+0x3c>
    1d8c:	80 3e       	cpi	r24, 0xE0	; 224
    1d8e:	30 f0       	brcs	.+12     	; 0x1d9c <log+0x44>
    1d90:	21 96       	adiw	r28, 0x01	; 1
    1d92:	8f 77       	andi	r24, 0x7F	; 127
    1d94:	55 d0       	rcall	.+170    	; 0x1e40 <__addsf3>
    1d96:	e8 ec       	ldi	r30, 0xC8	; 200
    1d98:	f0 e0       	ldi	r31, 0x00	; 0
    1d9a:	03 c0       	rjmp	.+6      	; 0x1da2 <log+0x4a>
    1d9c:	51 d0       	rcall	.+162    	; 0x1e40 <__addsf3>
    1d9e:	e5 ef       	ldi	r30, 0xF5	; 245
    1da0:	f0 e0       	ldi	r31, 0x00	; 0
    1da2:	73 df       	rcall	.-282    	; 0x1c8a <__fp_powser>
    1da4:	8b 01       	movw	r16, r22
    1da6:	be 01       	movw	r22, r28
    1da8:	ec 01       	movw	r28, r24
    1daa:	fb 2e       	mov	r15, r27
    1dac:	6f 57       	subi	r22, 0x7F	; 127
    1dae:	71 09       	sbc	r23, r1
    1db0:	75 95       	asr	r23
    1db2:	77 1f       	adc	r23, r23
    1db4:	88 0b       	sbc	r24, r24
    1db6:	99 0b       	sbc	r25, r25
    1db8:	d4 dd       	rcall	.-1112   	; 0x1962 <__floatsisf>
    1dba:	28 e1       	ldi	r18, 0x18	; 24
    1dbc:	32 e7       	ldi	r19, 0x72	; 114
    1dbe:	41 e3       	ldi	r20, 0x31	; 49
    1dc0:	5f e3       	ldi	r21, 0x3F	; 63
    1dc2:	8f de       	rcall	.-738    	; 0x1ae2 <__mulsf3x>
    1dc4:	af 2d       	mov	r26, r15
    1dc6:	98 01       	movw	r18, r16
    1dc8:	ae 01       	movw	r20, r28
    1dca:	ff 90       	pop	r15
    1dcc:	0f 91       	pop	r16
    1dce:	1f 91       	pop	r17
    1dd0:	cf 91       	pop	r28
    1dd2:	df 91       	pop	r29
    1dd4:	46 d0       	rcall	.+140    	; 0x1e62 <__addsf3x>
    1dd6:	3b ce       	rjmp	.-906    	; 0x1a4e <__fp_round>

00001dd8 <modf>:
    1dd8:	fa 01       	movw	r30, r20
    1dda:	dc 01       	movw	r26, r24
    1ddc:	aa 0f       	add	r26, r26
    1dde:	bb 1f       	adc	r27, r27
    1de0:	9b 01       	movw	r18, r22
    1de2:	ac 01       	movw	r20, r24
    1de4:	bf 57       	subi	r27, 0x7F	; 127
    1de6:	28 f4       	brcc	.+10     	; 0x1df2 <modf+0x1a>
    1de8:	22 27       	eor	r18, r18
    1dea:	33 27       	eor	r19, r19
    1dec:	44 27       	eor	r20, r20
    1dee:	50 78       	andi	r21, 0x80	; 128
    1df0:	1f c0       	rjmp	.+62     	; 0x1e30 <modf+0x58>
    1df2:	b7 51       	subi	r27, 0x17	; 23
    1df4:	88 f4       	brcc	.+34     	; 0x1e18 <modf+0x40>
    1df6:	ab 2f       	mov	r26, r27
    1df8:	00 24       	eor	r0, r0
    1dfa:	46 95       	lsr	r20
    1dfc:	37 95       	ror	r19
    1dfe:	27 95       	ror	r18
    1e00:	01 1c       	adc	r0, r1
    1e02:	a3 95       	inc	r26
    1e04:	d2 f3       	brmi	.-12     	; 0x1dfa <modf+0x22>
    1e06:	00 20       	and	r0, r0
    1e08:	69 f0       	breq	.+26     	; 0x1e24 <modf+0x4c>
    1e0a:	22 0f       	add	r18, r18
    1e0c:	33 1f       	adc	r19, r19
    1e0e:	44 1f       	adc	r20, r20
    1e10:	b3 95       	inc	r27
    1e12:	da f3       	brmi	.-10     	; 0x1e0a <modf+0x32>
    1e14:	0d d0       	rcall	.+26     	; 0x1e30 <modf+0x58>
    1e16:	13 c0       	rjmp	.+38     	; 0x1e3e <__subsf3>
    1e18:	61 30       	cpi	r22, 0x01	; 1
    1e1a:	71 05       	cpc	r23, r1
    1e1c:	a0 e8       	ldi	r26, 0x80	; 128
    1e1e:	8a 07       	cpc	r24, r26
    1e20:	b9 46       	sbci	r27, 0x69	; 105
    1e22:	30 f4       	brcc	.+12     	; 0x1e30 <modf+0x58>
    1e24:	9b 01       	movw	r18, r22
    1e26:	ac 01       	movw	r20, r24
    1e28:	66 27       	eor	r22, r22
    1e2a:	77 27       	eor	r23, r23
    1e2c:	88 27       	eor	r24, r24
    1e2e:	90 78       	andi	r25, 0x80	; 128
    1e30:	30 96       	adiw	r30, 0x00	; 0
    1e32:	21 f0       	breq	.+8      	; 0x1e3c <modf+0x64>
    1e34:	20 83       	st	Z, r18
    1e36:	31 83       	std	Z+1, r19	; 0x01
    1e38:	42 83       	std	Z+2, r20	; 0x02
    1e3a:	53 83       	std	Z+3, r21	; 0x03
    1e3c:	08 95       	ret

00001e3e <__subsf3>:
    1e3e:	50 58       	subi	r21, 0x80	; 128

00001e40 <__addsf3>:
    1e40:	bb 27       	eor	r27, r27
    1e42:	aa 27       	eor	r26, r26
    1e44:	0e d0       	rcall	.+28     	; 0x1e62 <__addsf3x>
    1e46:	03 ce       	rjmp	.-1018   	; 0x1a4e <__fp_round>
    1e48:	f4 dd       	rcall	.-1048   	; 0x1a32 <__fp_pscA>
    1e4a:	30 f0       	brcs	.+12     	; 0x1e58 <__addsf3+0x18>
    1e4c:	f9 dd       	rcall	.-1038   	; 0x1a40 <__fp_pscB>
    1e4e:	20 f0       	brcs	.+8      	; 0x1e58 <__addsf3+0x18>
    1e50:	31 f4       	brne	.+12     	; 0x1e5e <__addsf3+0x1e>
    1e52:	9f 3f       	cpi	r25, 0xFF	; 255
    1e54:	11 f4       	brne	.+4      	; 0x1e5a <__addsf3+0x1a>
    1e56:	1e f4       	brtc	.+6      	; 0x1e5e <__addsf3+0x1e>
    1e58:	e9 cd       	rjmp	.-1070   	; 0x1a2c <__fp_nan>
    1e5a:	0e f4       	brtc	.+2      	; 0x1e5e <__addsf3+0x1e>
    1e5c:	e0 95       	com	r30
    1e5e:	e7 fb       	bst	r30, 7
    1e60:	df cd       	rjmp	.-1090   	; 0x1a20 <__fp_inf>

00001e62 <__addsf3x>:
    1e62:	e9 2f       	mov	r30, r25
    1e64:	05 de       	rcall	.-1014   	; 0x1a70 <__fp_split3>
    1e66:	80 f3       	brcs	.-32     	; 0x1e48 <__addsf3+0x8>
    1e68:	ba 17       	cp	r27, r26
    1e6a:	62 07       	cpc	r22, r18
    1e6c:	73 07       	cpc	r23, r19
    1e6e:	84 07       	cpc	r24, r20
    1e70:	95 07       	cpc	r25, r21
    1e72:	18 f0       	brcs	.+6      	; 0x1e7a <__addsf3x+0x18>
    1e74:	71 f4       	brne	.+28     	; 0x1e92 <__addsf3x+0x30>
    1e76:	9e f5       	brtc	.+102    	; 0x1ede <__addsf3x+0x7c>
    1e78:	1d ce       	rjmp	.-966    	; 0x1ab4 <__fp_zero>
    1e7a:	0e f4       	brtc	.+2      	; 0x1e7e <__addsf3x+0x1c>
    1e7c:	e0 95       	com	r30
    1e7e:	0b 2e       	mov	r0, r27
    1e80:	ba 2f       	mov	r27, r26
    1e82:	a0 2d       	mov	r26, r0
    1e84:	0b 01       	movw	r0, r22
    1e86:	b9 01       	movw	r22, r18
    1e88:	90 01       	movw	r18, r0
    1e8a:	0c 01       	movw	r0, r24
    1e8c:	ca 01       	movw	r24, r20
    1e8e:	a0 01       	movw	r20, r0
    1e90:	11 24       	eor	r1, r1
    1e92:	ff 27       	eor	r31, r31
    1e94:	59 1b       	sub	r21, r25
    1e96:	99 f0       	breq	.+38     	; 0x1ebe <__addsf3x+0x5c>
    1e98:	59 3f       	cpi	r21, 0xF9	; 249
    1e9a:	50 f4       	brcc	.+20     	; 0x1eb0 <__addsf3x+0x4e>
    1e9c:	50 3e       	cpi	r21, 0xE0	; 224
    1e9e:	68 f1       	brcs	.+90     	; 0x1efa <__addsf3x+0x98>
    1ea0:	1a 16       	cp	r1, r26
    1ea2:	f0 40       	sbci	r31, 0x00	; 0
    1ea4:	a2 2f       	mov	r26, r18
    1ea6:	23 2f       	mov	r18, r19
    1ea8:	34 2f       	mov	r19, r20
    1eaa:	44 27       	eor	r20, r20
    1eac:	58 5f       	subi	r21, 0xF8	; 248
    1eae:	f3 cf       	rjmp	.-26     	; 0x1e96 <__addsf3x+0x34>
    1eb0:	46 95       	lsr	r20
    1eb2:	37 95       	ror	r19
    1eb4:	27 95       	ror	r18
    1eb6:	a7 95       	ror	r26
    1eb8:	f0 40       	sbci	r31, 0x00	; 0
    1eba:	53 95       	inc	r21
    1ebc:	c9 f7       	brne	.-14     	; 0x1eb0 <__addsf3x+0x4e>
    1ebe:	7e f4       	brtc	.+30     	; 0x1ede <__addsf3x+0x7c>
    1ec0:	1f 16       	cp	r1, r31
    1ec2:	ba 0b       	sbc	r27, r26
    1ec4:	62 0b       	sbc	r22, r18
    1ec6:	73 0b       	sbc	r23, r19
    1ec8:	84 0b       	sbc	r24, r20
    1eca:	ba f0       	brmi	.+46     	; 0x1efa <__addsf3x+0x98>
    1ecc:	91 50       	subi	r25, 0x01	; 1
    1ece:	a1 f0       	breq	.+40     	; 0x1ef8 <__addsf3x+0x96>
    1ed0:	ff 0f       	add	r31, r31
    1ed2:	bb 1f       	adc	r27, r27
    1ed4:	66 1f       	adc	r22, r22
    1ed6:	77 1f       	adc	r23, r23
    1ed8:	88 1f       	adc	r24, r24
    1eda:	c2 f7       	brpl	.-16     	; 0x1ecc <__addsf3x+0x6a>
    1edc:	0e c0       	rjmp	.+28     	; 0x1efa <__addsf3x+0x98>
    1ede:	ba 0f       	add	r27, r26
    1ee0:	62 1f       	adc	r22, r18
    1ee2:	73 1f       	adc	r23, r19
    1ee4:	84 1f       	adc	r24, r20
    1ee6:	48 f4       	brcc	.+18     	; 0x1efa <__addsf3x+0x98>
    1ee8:	87 95       	ror	r24
    1eea:	77 95       	ror	r23
    1eec:	67 95       	ror	r22
    1eee:	b7 95       	ror	r27
    1ef0:	f7 95       	ror	r31
    1ef2:	9e 3f       	cpi	r25, 0xFE	; 254
    1ef4:	08 f0       	brcs	.+2      	; 0x1ef8 <__addsf3x+0x96>
    1ef6:	b3 cf       	rjmp	.-154    	; 0x1e5e <__addsf3+0x1e>
    1ef8:	93 95       	inc	r25
    1efa:	88 0f       	add	r24, r24
    1efc:	08 f0       	brcs	.+2      	; 0x1f00 <__addsf3x+0x9e>
    1efe:	99 27       	eor	r25, r25
    1f00:	ee 0f       	add	r30, r30
    1f02:	97 95       	ror	r25
    1f04:	87 95       	ror	r24
    1f06:	08 95       	ret

00001f08 <__fp_mpack>:
    1f08:	9f 3f       	cpi	r25, 0xFF	; 255
    1f0a:	31 f0       	breq	.+12     	; 0x1f18 <__fp_mpack_finite+0xc>

00001f0c <__fp_mpack_finite>:
    1f0c:	91 50       	subi	r25, 0x01	; 1
    1f0e:	20 f4       	brcc	.+8      	; 0x1f18 <__fp_mpack_finite+0xc>
    1f10:	87 95       	ror	r24
    1f12:	77 95       	ror	r23
    1f14:	67 95       	ror	r22
    1f16:	b7 95       	ror	r27
    1f18:	88 0f       	add	r24, r24
    1f1a:	91 1d       	adc	r25, r1
    1f1c:	96 95       	lsr	r25
    1f1e:	87 95       	ror	r24
    1f20:	97 f9       	bld	r25, 7
    1f22:	08 95       	ret

00001f24 <__divmodhi4>:
    1f24:	97 fb       	bst	r25, 7
    1f26:	07 2e       	mov	r0, r23
    1f28:	16 f4       	brtc	.+4      	; 0x1f2e <__divmodhi4+0xa>
    1f2a:	00 94       	com	r0
    1f2c:	06 d0       	rcall	.+12     	; 0x1f3a <__divmodhi4_neg1>
    1f2e:	77 fd       	sbrc	r23, 7
    1f30:	08 d0       	rcall	.+16     	; 0x1f42 <__divmodhi4_neg2>
    1f32:	14 d0       	rcall	.+40     	; 0x1f5c <__udivmodhi4>
    1f34:	07 fc       	sbrc	r0, 7
    1f36:	05 d0       	rcall	.+10     	; 0x1f42 <__divmodhi4_neg2>
    1f38:	3e f4       	brtc	.+14     	; 0x1f48 <__divmodhi4_exit>

00001f3a <__divmodhi4_neg1>:
    1f3a:	90 95       	com	r25
    1f3c:	81 95       	neg	r24
    1f3e:	9f 4f       	sbci	r25, 0xFF	; 255
    1f40:	08 95       	ret

00001f42 <__divmodhi4_neg2>:
    1f42:	70 95       	com	r23
    1f44:	61 95       	neg	r22
    1f46:	7f 4f       	sbci	r23, 0xFF	; 255

00001f48 <__divmodhi4_exit>:
    1f48:	08 95       	ret

00001f4a <__tablejump2__>:
    1f4a:	ee 0f       	add	r30, r30
    1f4c:	ff 1f       	adc	r31, r31
    1f4e:	00 24       	eor	r0, r0
    1f50:	00 1c       	adc	r0, r0
    1f52:	0b be       	out	0x3b, r0	; 59
    1f54:	07 90       	elpm	r0, Z+
    1f56:	f6 91       	elpm	r31, Z
    1f58:	e0 2d       	mov	r30, r0
    1f5a:	09 94       	ijmp

00001f5c <__udivmodhi4>:
    1f5c:	aa 1b       	sub	r26, r26
    1f5e:	bb 1b       	sub	r27, r27
    1f60:	51 e1       	ldi	r21, 0x11	; 17
    1f62:	07 c0       	rjmp	.+14     	; 0x1f72 <__udivmodhi4_ep>

00001f64 <__udivmodhi4_loop>:
    1f64:	aa 1f       	adc	r26, r26
    1f66:	bb 1f       	adc	r27, r27
    1f68:	a6 17       	cp	r26, r22
    1f6a:	b7 07       	cpc	r27, r23
    1f6c:	10 f0       	brcs	.+4      	; 0x1f72 <__udivmodhi4_ep>
    1f6e:	a6 1b       	sub	r26, r22
    1f70:	b7 0b       	sbc	r27, r23

00001f72 <__udivmodhi4_ep>:
    1f72:	88 1f       	adc	r24, r24
    1f74:	99 1f       	adc	r25, r25
    1f76:	5a 95       	dec	r21
    1f78:	a9 f7       	brne	.-22     	; 0x1f64 <__udivmodhi4_loop>
    1f7a:	80 95       	com	r24
    1f7c:	90 95       	com	r25
    1f7e:	bc 01       	movw	r22, r24
    1f80:	cd 01       	movw	r24, r26
    1f82:	08 95       	ret

00001f84 <random_r>:
    1f84:	8f 92       	push	r8
    1f86:	9f 92       	push	r9
    1f88:	af 92       	push	r10
    1f8a:	bf 92       	push	r11
    1f8c:	cf 92       	push	r12
    1f8e:	df 92       	push	r13
    1f90:	ef 92       	push	r14
    1f92:	ff 92       	push	r15
    1f94:	cf 93       	push	r28
    1f96:	df 93       	push	r29
    1f98:	ec 01       	movw	r28, r24
    1f9a:	68 81       	ld	r22, Y
    1f9c:	79 81       	ldd	r23, Y+1	; 0x01
    1f9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa0:	9b 81       	ldd	r25, Y+3	; 0x03
    1fa2:	61 15       	cp	r22, r1
    1fa4:	71 05       	cpc	r23, r1
    1fa6:	81 05       	cpc	r24, r1
    1fa8:	91 05       	cpc	r25, r1
    1faa:	21 f4       	brne	.+8      	; 0x1fb4 <random_r+0x30>
    1fac:	64 e2       	ldi	r22, 0x24	; 36
    1fae:	79 ed       	ldi	r23, 0xD9	; 217
    1fb0:	8b e5       	ldi	r24, 0x5B	; 91
    1fb2:	97 e0       	ldi	r25, 0x07	; 7
    1fb4:	2d e1       	ldi	r18, 0x1D	; 29
    1fb6:	33 ef       	ldi	r19, 0xF3	; 243
    1fb8:	41 e0       	ldi	r20, 0x01	; 1
    1fba:	50 e0       	ldi	r21, 0x00	; 0
    1fbc:	7f d0       	rcall	.+254    	; 0x20bc <__divmodsi4>
    1fbe:	49 01       	movw	r8, r18
    1fc0:	5a 01       	movw	r10, r20
    1fc2:	9b 01       	movw	r18, r22
    1fc4:	ac 01       	movw	r20, r24
    1fc6:	a7 ea       	ldi	r26, 0xA7	; 167
    1fc8:	b1 e4       	ldi	r27, 0x41	; 65
    1fca:	94 d0       	rcall	.+296    	; 0x20f4 <__muluhisi3>
    1fcc:	6b 01       	movw	r12, r22
    1fce:	7c 01       	movw	r14, r24
    1fd0:	ac ee       	ldi	r26, 0xEC	; 236
    1fd2:	b4 ef       	ldi	r27, 0xF4	; 244
    1fd4:	a5 01       	movw	r20, r10
    1fd6:	94 01       	movw	r18, r8
    1fd8:	99 d0       	rcall	.+306    	; 0x210c <__mulohisi3>
    1fda:	dc 01       	movw	r26, r24
    1fdc:	cb 01       	movw	r24, r22
    1fde:	8c 0d       	add	r24, r12
    1fe0:	9d 1d       	adc	r25, r13
    1fe2:	ae 1d       	adc	r26, r14
    1fe4:	bf 1d       	adc	r27, r15
    1fe6:	b7 ff       	sbrs	r27, 7
    1fe8:	03 c0       	rjmp	.+6      	; 0x1ff0 <random_r+0x6c>
    1fea:	01 97       	sbiw	r24, 0x01	; 1
    1fec:	a1 09       	sbc	r26, r1
    1fee:	b0 48       	sbci	r27, 0x80	; 128
    1ff0:	88 83       	st	Y, r24
    1ff2:	99 83       	std	Y+1, r25	; 0x01
    1ff4:	aa 83       	std	Y+2, r26	; 0x02
    1ff6:	bb 83       	std	Y+3, r27	; 0x03
    1ff8:	bc 01       	movw	r22, r24
    1ffa:	cd 01       	movw	r24, r26
    1ffc:	9f 77       	andi	r25, 0x7F	; 127
    1ffe:	df 91       	pop	r29
    2000:	cf 91       	pop	r28
    2002:	ff 90       	pop	r15
    2004:	ef 90       	pop	r14
    2006:	df 90       	pop	r13
    2008:	cf 90       	pop	r12
    200a:	bf 90       	pop	r11
    200c:	af 90       	pop	r10
    200e:	9f 90       	pop	r9
    2010:	8f 90       	pop	r8
    2012:	08 95       	ret

00002014 <random>:
    2014:	8f 92       	push	r8
    2016:	9f 92       	push	r9
    2018:	af 92       	push	r10
    201a:	bf 92       	push	r11
    201c:	cf 92       	push	r12
    201e:	df 92       	push	r13
    2020:	ef 92       	push	r14
    2022:	ff 92       	push	r15
    2024:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
    2028:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
    202c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
    2030:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
    2034:	61 15       	cp	r22, r1
    2036:	71 05       	cpc	r23, r1
    2038:	81 05       	cpc	r24, r1
    203a:	91 05       	cpc	r25, r1
    203c:	21 f4       	brne	.+8      	; 0x2046 <random+0x32>
    203e:	64 e2       	ldi	r22, 0x24	; 36
    2040:	79 ed       	ldi	r23, 0xD9	; 217
    2042:	8b e5       	ldi	r24, 0x5B	; 91
    2044:	97 e0       	ldi	r25, 0x07	; 7
    2046:	2d e1       	ldi	r18, 0x1D	; 29
    2048:	33 ef       	ldi	r19, 0xF3	; 243
    204a:	41 e0       	ldi	r20, 0x01	; 1
    204c:	50 e0       	ldi	r21, 0x00	; 0
    204e:	36 d0       	rcall	.+108    	; 0x20bc <__divmodsi4>
    2050:	49 01       	movw	r8, r18
    2052:	5a 01       	movw	r10, r20
    2054:	9b 01       	movw	r18, r22
    2056:	ac 01       	movw	r20, r24
    2058:	a7 ea       	ldi	r26, 0xA7	; 167
    205a:	b1 e4       	ldi	r27, 0x41	; 65
    205c:	4b d0       	rcall	.+150    	; 0x20f4 <__muluhisi3>
    205e:	6b 01       	movw	r12, r22
    2060:	7c 01       	movw	r14, r24
    2062:	ac ee       	ldi	r26, 0xEC	; 236
    2064:	b4 ef       	ldi	r27, 0xF4	; 244
    2066:	a5 01       	movw	r20, r10
    2068:	94 01       	movw	r18, r8
    206a:	50 d0       	rcall	.+160    	; 0x210c <__mulohisi3>
    206c:	dc 01       	movw	r26, r24
    206e:	cb 01       	movw	r24, r22
    2070:	8c 0d       	add	r24, r12
    2072:	9d 1d       	adc	r25, r13
    2074:	ae 1d       	adc	r26, r14
    2076:	bf 1d       	adc	r27, r15
    2078:	b7 ff       	sbrs	r27, 7
    207a:	03 c0       	rjmp	.+6      	; 0x2082 <random+0x6e>
    207c:	01 97       	sbiw	r24, 0x01	; 1
    207e:	a1 09       	sbc	r26, r1
    2080:	b0 48       	sbci	r27, 0x80	; 128
    2082:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    2086:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    208a:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
    208e:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
    2092:	bc 01       	movw	r22, r24
    2094:	cd 01       	movw	r24, r26
    2096:	9f 77       	andi	r25, 0x7F	; 127
    2098:	ff 90       	pop	r15
    209a:	ef 90       	pop	r14
    209c:	df 90       	pop	r13
    209e:	cf 90       	pop	r12
    20a0:	bf 90       	pop	r11
    20a2:	af 90       	pop	r10
    20a4:	9f 90       	pop	r9
    20a6:	8f 90       	pop	r8
    20a8:	08 95       	ret

000020aa <srandom>:
    20aa:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
    20ae:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
    20b2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
    20b6:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
    20ba:	08 95       	ret

000020bc <__divmodsi4>:
    20bc:	05 2e       	mov	r0, r21
    20be:	97 fb       	bst	r25, 7
    20c0:	16 f4       	brtc	.+4      	; 0x20c6 <__divmodsi4+0xa>
    20c2:	00 94       	com	r0
    20c4:	0f d0       	rcall	.+30     	; 0x20e4 <__negsi2>
    20c6:	57 fd       	sbrc	r21, 7
    20c8:	05 d0       	rcall	.+10     	; 0x20d4 <__divmodsi4_neg2>
    20ca:	24 d0       	rcall	.+72     	; 0x2114 <__udivmodsi4>
    20cc:	07 fc       	sbrc	r0, 7
    20ce:	02 d0       	rcall	.+4      	; 0x20d4 <__divmodsi4_neg2>
    20d0:	46 f4       	brtc	.+16     	; 0x20e2 <__divmodsi4_exit>
    20d2:	08 c0       	rjmp	.+16     	; 0x20e4 <__negsi2>

000020d4 <__divmodsi4_neg2>:
    20d4:	50 95       	com	r21
    20d6:	40 95       	com	r20
    20d8:	30 95       	com	r19
    20da:	21 95       	neg	r18
    20dc:	3f 4f       	sbci	r19, 0xFF	; 255
    20de:	4f 4f       	sbci	r20, 0xFF	; 255
    20e0:	5f 4f       	sbci	r21, 0xFF	; 255

000020e2 <__divmodsi4_exit>:
    20e2:	08 95       	ret

000020e4 <__negsi2>:
    20e4:	90 95       	com	r25
    20e6:	80 95       	com	r24
    20e8:	70 95       	com	r23
    20ea:	61 95       	neg	r22
    20ec:	7f 4f       	sbci	r23, 0xFF	; 255
    20ee:	8f 4f       	sbci	r24, 0xFF	; 255
    20f0:	9f 4f       	sbci	r25, 0xFF	; 255
    20f2:	08 95       	ret

000020f4 <__muluhisi3>:
    20f4:	31 d0       	rcall	.+98     	; 0x2158 <__umulhisi3>
    20f6:	a5 9f       	mul	r26, r21
    20f8:	90 0d       	add	r25, r0
    20fa:	b4 9f       	mul	r27, r20
    20fc:	90 0d       	add	r25, r0
    20fe:	a4 9f       	mul	r26, r20
    2100:	80 0d       	add	r24, r0
    2102:	91 1d       	adc	r25, r1
    2104:	11 24       	eor	r1, r1
    2106:	08 95       	ret

00002108 <__mulshisi3>:
    2108:	b7 ff       	sbrs	r27, 7
    210a:	f4 cf       	rjmp	.-24     	; 0x20f4 <__muluhisi3>

0000210c <__mulohisi3>:
    210c:	f3 df       	rcall	.-26     	; 0x20f4 <__muluhisi3>
    210e:	82 1b       	sub	r24, r18
    2110:	93 0b       	sbc	r25, r19
    2112:	08 95       	ret

00002114 <__udivmodsi4>:
    2114:	a1 e2       	ldi	r26, 0x21	; 33
    2116:	1a 2e       	mov	r1, r26
    2118:	aa 1b       	sub	r26, r26
    211a:	bb 1b       	sub	r27, r27
    211c:	fd 01       	movw	r30, r26
    211e:	0d c0       	rjmp	.+26     	; 0x213a <__udivmodsi4_ep>

00002120 <__udivmodsi4_loop>:
    2120:	aa 1f       	adc	r26, r26
    2122:	bb 1f       	adc	r27, r27
    2124:	ee 1f       	adc	r30, r30
    2126:	ff 1f       	adc	r31, r31
    2128:	a2 17       	cp	r26, r18
    212a:	b3 07       	cpc	r27, r19
    212c:	e4 07       	cpc	r30, r20
    212e:	f5 07       	cpc	r31, r21
    2130:	20 f0       	brcs	.+8      	; 0x213a <__udivmodsi4_ep>
    2132:	a2 1b       	sub	r26, r18
    2134:	b3 0b       	sbc	r27, r19
    2136:	e4 0b       	sbc	r30, r20
    2138:	f5 0b       	sbc	r31, r21

0000213a <__udivmodsi4_ep>:
    213a:	66 1f       	adc	r22, r22
    213c:	77 1f       	adc	r23, r23
    213e:	88 1f       	adc	r24, r24
    2140:	99 1f       	adc	r25, r25
    2142:	1a 94       	dec	r1
    2144:	69 f7       	brne	.-38     	; 0x2120 <__udivmodsi4_loop>
    2146:	60 95       	com	r22
    2148:	70 95       	com	r23
    214a:	80 95       	com	r24
    214c:	90 95       	com	r25
    214e:	9b 01       	movw	r18, r22
    2150:	ac 01       	movw	r20, r24
    2152:	bd 01       	movw	r22, r26
    2154:	cf 01       	movw	r24, r30
    2156:	08 95       	ret

00002158 <__umulhisi3>:
    2158:	a2 9f       	mul	r26, r18
    215a:	b0 01       	movw	r22, r0
    215c:	b3 9f       	mul	r27, r19
    215e:	c0 01       	movw	r24, r0
    2160:	a3 9f       	mul	r26, r19
    2162:	70 0d       	add	r23, r0
    2164:	81 1d       	adc	r24, r1
    2166:	11 24       	eor	r1, r1
    2168:	91 1d       	adc	r25, r1
    216a:	b2 9f       	mul	r27, r18
    216c:	70 0d       	add	r23, r0
    216e:	81 1d       	adc	r24, r1
    2170:	11 24       	eor	r1, r1
    2172:	91 1d       	adc	r25, r1
    2174:	08 95       	ret

00002176 <_exit>:
    2176:	f8 94       	cli

00002178 <__stop_program>:
    2178:	ff cf       	rjmp	.-2      	; 0x2178 <__stop_program>
